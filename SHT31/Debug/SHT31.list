
SHT31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004fec  08004fec  00005fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e0  080050e0  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  080050e0  080050e0  000060e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050e8  080050e8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e8  080050e8  000060e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050ec  080050ec  000060ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080050f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000060  08005150  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005150  000072b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebcb  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002278  00000000  00000000  00015c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00017ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000997  00000000  00000000  00018b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ce4  00000000  00000000  000194e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ce  00000000  00000000  000401cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eac6b  00000000  00000000  00051599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003748  00000000  00000000  0013c248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0013f990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fd4 	.word	0x08004fd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004fd4 	.word	0x08004fd4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a2a      	ldr	r2, [pc, #168]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f001 f8a1 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <MX_GPIO_Init+0xc8>)
 80005fa:	f000 fee9 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005fe:	2320      	movs	r3, #32
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000618:	f000 feda 	bl	80013d0 <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	@ 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000632:	4a1c      	ldr	r2, [pc, #112]	@ (80006a4 <MX_I2C1_Init+0x78>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000636:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000638:	4a1b      	ldr	r2, [pc, #108]	@ (80006a8 <MX_I2C1_Init+0x7c>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000644:	2201      	movs	r2, #1
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000654:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000666:	480e      	ldr	r0, [pc, #56]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000668:	f001 f874 	bl	8001754 <HAL_I2C_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000672:	f000 fbce 	bl	8000e12 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000676:	2100      	movs	r1, #0
 8000678:	4809      	ldr	r0, [pc, #36]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800067a:	f001 fea7 	bl	80023cc <HAL_I2CEx_ConfigAnalogFilter>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000684:	f000 fbc5 	bl	8000e12 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000688:	2100      	movs	r1, #0
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800068c:	f001 fee9 	bl	8002462 <HAL_I2CEx_ConfigDigitalFilter>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 fbbc 	bl	8000e12 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000007c 	.word	0x2000007c
 80006a4:	40005400 	.word	0x40005400
 80006a8:	10d19ce4 	.word	0x10d19ce4

080006ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0ac      	sub	sp, #176	@ 0xb0
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2288      	movs	r2, #136	@ 0x88
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 f801 	bl	80046d4 <memset>
  if(i2cHandle->Instance==I2C1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a21      	ldr	r2, [pc, #132]	@ (800075c <HAL_I2C_MspInit+0xb0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d13b      	bne.n	8000754 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006dc:	2340      	movs	r3, #64	@ 0x40
 80006de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fd6b 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006f4:	f000 fb8d 	bl	8000e12 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fc:	4a18      	ldr	r2, [pc, #96]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000708:	f003 0302 	and.w	r3, r3, #2
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000710:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000714:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000718:	2312      	movs	r3, #18
 800071a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800072a:	2304      	movs	r3, #4
 800072c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000730:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000734:	4619      	mov	r1, r3
 8000736:	480b      	ldr	r0, [pc, #44]	@ (8000764 <HAL_I2C_MspInit+0xb8>)
 8000738:	f000 fe4a 	bl	80013d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 800073e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000740:	4a07      	ldr	r2, [pc, #28]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 8000742:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000746:	6593      	str	r3, [r2, #88]	@ 0x58
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <HAL_I2C_MspInit+0xb4>)
 800074a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800074c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000754:	bf00      	nop
 8000756:	37b0      	adds	r7, #176	@ 0xb0
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40005400 	.word	0x40005400
 8000760:	40021000 	.word	0x40021000
 8000764:	48000400 	.word	0x48000400

08000768 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af02      	add	r7, sp, #8
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	f043 030c 	orr.w	r3, r3, #12
 800077e:	b2da      	uxtb	r2, r3
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8000784:	2380      	movs	r3, #128	@ 0x80
 8000786:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	f043 0320 	orr.w	r3, r3, #32
 8000790:	b2db      	uxtb	r3, r3
 8000792:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8000794:	f107 0118 	add.w	r1, r7, #24
 8000798:	230a      	movs	r3, #10
 800079a:	2202      	movs	r2, #2
 800079c:	486c      	ldr	r0, [pc, #432]	@ (8000950 <lcd_init+0x1e8>)
 800079e:	f003 fa1b 	bl	8003bd8 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80007a2:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80007a6:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80007a8:	f107 0114 	add.w	r1, r7, #20
 80007ac:	230a      	movs	r3, #10
 80007ae:	2202      	movs	r2, #2
 80007b0:	4867      	ldr	r0, [pc, #412]	@ (8000950 <lcd_init+0x1e8>)
 80007b2:	f003 fa11 	bl	8003bd8 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	2205      	movs	r2, #5
 80007ba:	217c      	movs	r1, #124	@ 0x7c
 80007bc:	69f8      	ldr	r0, [r7, #28]
 80007be:	f001 fa73 	bl	8001ca8 <HAL_I2C_IsDeviceReady>
 80007c2:	4603      	mov	r3, r0
 80007c4:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80007c6:	f107 0113 	add.w	r1, r7, #19
 80007ca:	230a      	movs	r3, #10
 80007cc:	2201      	movs	r2, #1
 80007ce:	4860      	ldr	r0, [pc, #384]	@ (8000950 <lcd_init+0x1e8>)
 80007d0:	f003 fa02 	bl	8003bd8 <HAL_UART_Transmit>
	HAL_Delay(50);
 80007d4:	2032      	movs	r0, #50	@ 0x32
 80007d6:	f000 fcf1 	bl	80011bc <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80007da:	f107 0218 	add.w	r2, r7, #24
 80007de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	217c      	movs	r1, #124	@ 0x7c
 80007e8:	69f8      	ldr	r0, [r7, #28]
 80007ea:	f001 f84f 	bl	800188c <HAL_I2C_Master_Transmit>
 80007ee:	4603      	mov	r3, r0
 80007f0:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80007f2:	f107 0112 	add.w	r1, r7, #18
 80007f6:	230a      	movs	r3, #10
 80007f8:	2201      	movs	r2, #1
 80007fa:	4855      	ldr	r0, [pc, #340]	@ (8000950 <lcd_init+0x1e8>)
 80007fc:	f003 f9ec 	bl	8003bd8 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	@ 0x32
 8000802:	f000 fcdb 	bl	80011bc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000806:	f107 0218 	add.w	r2, r7, #24
 800080a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2302      	movs	r3, #2
 8000812:	217c      	movs	r1, #124	@ 0x7c
 8000814:	69f8      	ldr	r0, [r7, #28]
 8000816:	f001 f839 	bl	800188c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800081a:	2005      	movs	r0, #5
 800081c:	f000 fcce 	bl	80011bc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000820:	f107 0218 	add.w	r2, r7, #24
 8000824:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2302      	movs	r3, #2
 800082c:	217c      	movs	r1, #124	@ 0x7c
 800082e:	69f8      	ldr	r0, [r7, #28]
 8000830:	f001 f82c 	bl	800188c <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2204      	movs	r2, #4
 8000838:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	785b      	ldrb	r3, [r3, #1]
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	b2db      	uxtb	r3, r3
 8000844:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8000846:	f107 0218 	add.w	r2, r7, #24
 800084a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2302      	movs	r3, #2
 8000852:	217c      	movs	r1, #124	@ 0x7c
 8000854:	69f8      	ldr	r0, [r7, #28]
 8000856:	f001 f819 	bl	800188c <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 800085a:	2301      	movs	r3, #1
 800085c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800085e:	f107 0218 	add.w	r2, r7, #24
 8000862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2302      	movs	r3, #2
 800086a:	217c      	movs	r1, #124	@ 0x7c
 800086c:	69f8      	ldr	r0, [r7, #28]
 800086e:	f001 f80d 	bl	800188c <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000872:	2002      	movs	r0, #2
 8000874:	f000 fca2 	bl	80011bc <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2202      	movs	r2, #2
 800087c:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	789b      	ldrb	r3, [r3, #2]
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	b2db      	uxtb	r3, r3
 8000888:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800088a:	f107 0218 	add.w	r2, r7, #24
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2302      	movs	r3, #2
 8000896:	217c      	movs	r1, #124	@ 0x7c
 8000898:	69f8      	ldr	r0, [r7, #28]
 800089a:	f000 fff7 	bl	800188c <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 800089e:	2300      	movs	r3, #0
 80008a0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008a6:	f107 0210 	add.w	r2, r7, #16
 80008aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2302      	movs	r3, #2
 80008b2:	21c4      	movs	r1, #196	@ 0xc4
 80008b4:	69f8      	ldr	r0, [r7, #28]
 80008b6:	f000 ffe9 	bl	800188c <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80008ba:	2308      	movs	r3, #8
 80008bc:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80008be:	23ff      	movs	r3, #255	@ 0xff
 80008c0:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008c2:	f107 0210 	add.w	r2, r7, #16
 80008c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	21c4      	movs	r1, #196	@ 0xc4
 80008d0:	69f8      	ldr	r0, [r7, #28]
 80008d2:	f000 ffdb 	bl	800188c <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80008d6:	2301      	movs	r3, #1
 80008d8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80008da:	2320      	movs	r3, #32
 80008dc:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008de:	f107 0210 	add.w	r2, r7, #16
 80008e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2302      	movs	r3, #2
 80008ea:	21c4      	movs	r1, #196	@ 0xc4
 80008ec:	69f8      	ldr	r0, [r7, #28]
 80008ee:	f000 ffcd 	bl	800188c <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80008f2:	2304      	movs	r3, #4
 80008f4:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80008f6:	23ff      	movs	r3, #255	@ 0xff
 80008f8:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80008fa:	f107 020c 	add.w	r2, r7, #12
 80008fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2302      	movs	r3, #2
 8000906:	21c4      	movs	r1, #196	@ 0xc4
 8000908:	69f8      	ldr	r0, [r7, #28]
 800090a:	f000 ffbf 	bl	800188c <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 800090e:	2303      	movs	r3, #3
 8000910:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000912:	23ff      	movs	r3, #255	@ 0xff
 8000914:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000916:	f107 020c 	add.w	r2, r7, #12
 800091a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2302      	movs	r3, #2
 8000922:	21c4      	movs	r1, #196	@ 0xc4
 8000924:	69f8      	ldr	r0, [r7, #28]
 8000926:	f000 ffb1 	bl	800188c <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 800092a:	2302      	movs	r3, #2
 800092c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800092e:	23ff      	movs	r3, #255	@ 0xff
 8000930:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000932:	f107 020c 	add.w	r2, r7, #12
 8000936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2302      	movs	r3, #2
 800093e:	21c4      	movs	r1, #196	@ 0xc4
 8000940:	69f8      	ldr	r0, [r7, #28]
 8000942:	f000 ffa3 	bl	800188c <HAL_I2C_Master_Transmit>


}
 8000946:	bf00      	nop
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000e0 	.word	0x200000e0

08000954 <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	4808      	ldr	r0, [pc, #32]	@ (8000980 <clearlcd+0x2c>)
 800095e:	f000 f83c 	bl	80009da <lcd_position>
	lcd_print(&hi2c1,"                ");
 8000962:	4908      	ldr	r1, [pc, #32]	@ (8000984 <clearlcd+0x30>)
 8000964:	4806      	ldr	r0, [pc, #24]	@ (8000980 <clearlcd+0x2c>)
 8000966:	f000 f80f 	bl	8000988 <lcd_print>
	lcd_position(&hi2c1,0,1);
 800096a:	2201      	movs	r2, #1
 800096c:	2100      	movs	r1, #0
 800096e:	4804      	ldr	r0, [pc, #16]	@ (8000980 <clearlcd+0x2c>)
 8000970:	f000 f833 	bl	80009da <lcd_position>
	lcd_print(&hi2c1,"                ");
 8000974:	4903      	ldr	r1, [pc, #12]	@ (8000984 <clearlcd+0x30>)
 8000976:	4802      	ldr	r0, [pc, #8]	@ (8000980 <clearlcd+0x2c>)
 8000978:	f000 f806 	bl	8000988 <lcd_print>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2000007c 	.word	0x2000007c
 8000984:	08004fec 	.word	0x08004fec

08000988 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af02      	add	r7, sp, #8
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8000996:	2340      	movs	r3, #64	@ 0x40
 8000998:	733b      	strb	r3, [r7, #12]
    int i=0;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800099e:	e011      	b.n	80009c4 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80009aa:	f107 020c 	add.w	r2, r7, #12
 80009ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2302      	movs	r3, #2
 80009b6:	217c      	movs	r1, #124	@ 0x7c
 80009b8:	6938      	ldr	r0, [r7, #16]
 80009ba:	f000 ff67 	bl	800188c <HAL_I2C_Master_Transmit>
            i++;
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1e7      	bne.n	80009a0 <lcd_print+0x18>
   }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af02      	add	r7, sp, #8
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	70fb      	strb	r3, [r7, #3]
 80009e6:	4613      	mov	r3, r2
 80009e8:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80009ee:	78bb      	ldrb	r3, [r7, #2]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d104      	bne.n	80009fe <lcd_position+0x24>
    {
        col = col | 0x80;
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009fa:	70fb      	strb	r3, [r7, #3]
 80009fc:	e003      	b.n	8000a06 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 80009fe:	78fb      	ldrb	r3, [r7, #3]
 8000a00:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000a04:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000a0e:	f107 0208 	add.w	r2, r7, #8
 8000a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2302      	movs	r3, #2
 8000a1a:	217c      	movs	r1, #124	@ 0x7c
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f000 ff35 	bl	800188c <HAL_I2C_Master_Transmit>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
 8000a36:	460b      	mov	r3, r1
 8000a38:	71bb      	strb	r3, [r7, #6]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <reglagecouleur+0x74>)
 8000a40:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8000a42:	2304      	movs	r3, #4
 8000a44:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8000a4a:	f107 0210 	add.w	r2, r7, #16
 8000a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2302      	movs	r3, #2
 8000a56:	21c4      	movs	r1, #196	@ 0xc4
 8000a58:	6978      	ldr	r0, [r7, #20]
 8000a5a:	f000 ff17 	bl	800188c <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8000a66:	f107 020c 	add.w	r2, r7, #12
 8000a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2302      	movs	r3, #2
 8000a72:	21c4      	movs	r1, #196	@ 0xc4
 8000a74:	6978      	ldr	r0, [r7, #20]
 8000a76:	f000 ff09 	bl	800188c <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 8000a7e:	797b      	ldrb	r3, [r7, #5]
 8000a80:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 8000a82:	f107 0208 	add.w	r2, r7, #8
 8000a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	21c4      	movs	r1, #196	@ 0xc4
 8000a90:	6978      	ldr	r0, [r7, #20]
 8000a92:	f000 fefb 	bl	800188c <HAL_I2C_Master_Transmit>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000007c 	.word	0x2000007c

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b0a7      	sub	sp, #156	@ 0x9c
 8000aa8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aaa:	f000 fb0b 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aae:	f000 f95f 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab2:	f7ff fd55 	bl	8000560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ab6:	f000 fa4f 	bl	8000f58 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000aba:	f7ff fdb7 	bl	800062c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialisation de l'écran LCD
  lcd_init(&hi2c1, &lcd_config);
 8000abe:	499c      	ldr	r1, [pc, #624]	@ (8000d30 <main+0x28c>)
 8000ac0:	489c      	ldr	r0, [pc, #624]	@ (8000d34 <main+0x290>)
 8000ac2:	f7ff fe51 	bl	8000768 <lcd_init>

  // Exemple 1 : Affichage de texte simple
  lcd_position(&hi2c1, 0, 0);  // Positionnement du curseur (ligne 0, colonne 0)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	489a      	ldr	r0, [pc, #616]	@ (8000d34 <main+0x290>)
 8000acc:	f7ff ff85 	bl	80009da <lcd_position>
  lcd_print(&hi2c1, "BUREAU D'ETUDE!"); // Affichage du message "Hello, World!"
 8000ad0:	4999      	ldr	r1, [pc, #612]	@ (8000d38 <main+0x294>)
 8000ad2:	4898      	ldr	r0, [pc, #608]	@ (8000d34 <main+0x290>)
 8000ad4:	f7ff ff58 	bl	8000988 <lcd_print>

  // Exemple 2 : Affichage sur la deuxième ligne
  lcd_position(&hi2c1, 0, 1);  // Positionnement du curseur (ligne 1, colonne 0)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2100      	movs	r1, #0
 8000adc:	4895      	ldr	r0, [pc, #596]	@ (8000d34 <main+0x290>)
 8000ade:	f7ff ff7c 	bl	80009da <lcd_position>
  lcd_print(&hi2c1, "STM32");  // Affichage du message "STM32 + LCD"
 8000ae2:	4996      	ldr	r1, [pc, #600]	@ (8000d3c <main+0x298>)
 8000ae4:	4893      	ldr	r0, [pc, #588]	@ (8000d34 <main+0x290>)
 8000ae6:	f7ff ff4f 	bl	8000988 <lcd_print>

  // Exemple 3 : Changer la couleur du rétroéclairage
  reglagecouleur(255, 0, 0); // Rouge
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	20ff      	movs	r0, #255	@ 0xff
 8000af0:	f7ff ff9c 	bl	8000a2c <reglagecouleur>
  HAL_Delay(1000); // Attendre 1 seconde
 8000af4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000af8:	f000 fb60 	bl	80011bc <HAL_Delay>
  reglagecouleur(0, 255, 0); // Vert
 8000afc:	2200      	movs	r2, #0
 8000afe:	21ff      	movs	r1, #255	@ 0xff
 8000b00:	2000      	movs	r0, #0
 8000b02:	f7ff ff93 	bl	8000a2c <reglagecouleur>
  HAL_Delay(1000); // Attendre 1 seconde
 8000b06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b0a:	f000 fb57 	bl	80011bc <HAL_Delay>
  reglagecouleur(0, 0, 255); // Bleu
 8000b0e:	22ff      	movs	r2, #255	@ 0xff
 8000b10:	2100      	movs	r1, #0
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff ff8a 	bl	8000a2c <reglagecouleur>
  HAL_Delay(1000); // Attendre 1 seconde
 8000b18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b1c:	f000 fb4e 	bl	80011bc <HAL_Delay>
  //reglagecouleur(255, 255, 255); // Blanc

  // Exemple 4 : Effacer l'écran
  HAL_Delay(2000); // Attendre 2 secondes
 8000b20:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b24:	f000 fb4a 	bl	80011bc <HAL_Delay>
  clearlcd(); // Efface tout ce qui s'affiche
 8000b28:	f7ff ff14 	bl	8000954 <clearlcd>

  //Capteur

  HAL_Delay(2000); // Attendre 2 secondes
 8000b2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b30:	f000 fb44 	bl	80011bc <HAL_Delay>
  clearlcd(); // Efface tout ce qui s'affiche
 8000b34:	f7ff ff0e 	bl	8000954 <clearlcd>
  char buffer_temp[50];
  char buffer_humi[50];

  while (1) {
      // 1️⃣ Envoi de la commande de mesure
      if (HAL_I2C_Master_Transmit(&hi2c1, SHT31_ADDR, cmd, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2302      	movs	r3, #2
 8000b40:	4a7f      	ldr	r2, [pc, #508]	@ (8000d40 <main+0x29c>)
 8000b42:	2188      	movs	r1, #136	@ 0x88
 8000b44:	487b      	ldr	r0, [pc, #492]	@ (8000d34 <main+0x290>)
 8000b46:	f000 fea1 	bl	800188c <HAL_I2C_Master_Transmit>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00d      	beq.n	8000b6c <main+0xc8>
          lcd_position(&hi2c1, 0, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	4877      	ldr	r0, [pc, #476]	@ (8000d34 <main+0x290>)
 8000b56:	f7ff ff40 	bl	80009da <lcd_position>
          lcd_print(&hi2c1, "I2C TX Error");
 8000b5a:	497a      	ldr	r1, [pc, #488]	@ (8000d44 <main+0x2a0>)
 8000b5c:	4875      	ldr	r0, [pc, #468]	@ (8000d34 <main+0x290>)
 8000b5e:	f7ff ff13 	bl	8000988 <lcd_print>
          HAL_Delay(2000);
 8000b62:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b66:	f000 fb29 	bl	80011bc <HAL_Delay>
          continue;
 8000b6a:	e0df      	b.n	8000d2c <main+0x288>
      }

      HAL_Delay(100);
 8000b6c:	2064      	movs	r0, #100	@ 0x64
 8000b6e:	f000 fb25 	bl	80011bc <HAL_Delay>

      // 2️⃣ Réception des données
      if (HAL_I2C_Master_Receive(&hi2c1, SHT31_ADDR, data, 6, HAL_MAX_DELAY) != HAL_OK) {
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2306      	movs	r3, #6
 8000b7a:	4a73      	ldr	r2, [pc, #460]	@ (8000d48 <main+0x2a4>)
 8000b7c:	2188      	movs	r1, #136	@ 0x88
 8000b7e:	486d      	ldr	r0, [pc, #436]	@ (8000d34 <main+0x290>)
 8000b80:	f000 ff9c 	bl	8001abc <HAL_I2C_Master_Receive>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00d      	beq.n	8000ba6 <main+0x102>
          lcd_position(&hi2c1, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4869      	ldr	r0, [pc, #420]	@ (8000d34 <main+0x290>)
 8000b90:	f7ff ff23 	bl	80009da <lcd_position>
          lcd_print(&hi2c1, "I2C RX Error");
 8000b94:	496d      	ldr	r1, [pc, #436]	@ (8000d4c <main+0x2a8>)
 8000b96:	4867      	ldr	r0, [pc, #412]	@ (8000d34 <main+0x290>)
 8000b98:	f7ff fef6 	bl	8000988 <lcd_print>
          HAL_Delay(2000);
 8000b9c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ba0:	f000 fb0c 	bl	80011bc <HAL_Delay>
          continue;
 8000ba4:	e0c2      	b.n	8000d2c <main+0x288>
      }

      // 3️⃣ Vérification des données reçues
      if (data[0] == 0x00 && data[1] == 0x00 && data[3] == 0x00 && data[4] == 0x00) {
 8000ba6:	4b68      	ldr	r3, [pc, #416]	@ (8000d48 <main+0x2a4>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d119      	bne.n	8000be2 <main+0x13e>
 8000bae:	4b66      	ldr	r3, [pc, #408]	@ (8000d48 <main+0x2a4>)
 8000bb0:	785b      	ldrb	r3, [r3, #1]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d115      	bne.n	8000be2 <main+0x13e>
 8000bb6:	4b64      	ldr	r3, [pc, #400]	@ (8000d48 <main+0x2a4>)
 8000bb8:	78db      	ldrb	r3, [r3, #3]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d111      	bne.n	8000be2 <main+0x13e>
 8000bbe:	4b62      	ldr	r3, [pc, #392]	@ (8000d48 <main+0x2a4>)
 8000bc0:	791b      	ldrb	r3, [r3, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10d      	bne.n	8000be2 <main+0x13e>
          lcd_position(&hi2c1, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	485a      	ldr	r0, [pc, #360]	@ (8000d34 <main+0x290>)
 8000bcc:	f7ff ff05 	bl	80009da <lcd_position>
          lcd_print(&hi2c1, "Capteur NOK");
 8000bd0:	495f      	ldr	r1, [pc, #380]	@ (8000d50 <main+0x2ac>)
 8000bd2:	4858      	ldr	r0, [pc, #352]	@ (8000d34 <main+0x290>)
 8000bd4:	f7ff fed8 	bl	8000988 <lcd_print>
          HAL_Delay(2000);
 8000bd8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000bdc:	f000 faee 	bl	80011bc <HAL_Delay>
          continue;
 8000be0:	e0a4      	b.n	8000d2c <main+0x288>
      }

      // 4️⃣ Traitement des données reçues
      uint16_t ligne_temperature = (data[0] << 8) | data[1];
 8000be2:	4b59      	ldr	r3, [pc, #356]	@ (8000d48 <main+0x2a4>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	b21a      	sxth	r2, r3
 8000bea:	4b57      	ldr	r3, [pc, #348]	@ (8000d48 <main+0x2a4>)
 8000bec:	785b      	ldrb	r3, [r3, #1]
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
      uint16_t ligne_humidite = (data[3] << 8) | data[4];
 8000bf8:	4b53      	ldr	r3, [pc, #332]	@ (8000d48 <main+0x2a4>)
 8000bfa:	78db      	ldrb	r3, [r3, #3]
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	4b51      	ldr	r3, [pc, #324]	@ (8000d48 <main+0x2a4>)
 8000c02:	791b      	ldrb	r3, [r3, #4]
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c

      int temp_int = (-45 * 100 + (175 * (int)ligne_temperature) / 655);  // Multiplié par 100
 8000c0e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000c12:	22af      	movs	r2, #175	@ 0xaf
 8000c14:	fb02 f303 	mul.w	r3, r2, r3
 8000c18:	4a4e      	ldr	r2, [pc, #312]	@ (8000d54 <main+0x2b0>)
 8000c1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c1e:	1212      	asrs	r2, r2, #8
 8000c20:	17db      	asrs	r3, r3, #31
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8000c28:	3b14      	subs	r3, #20
 8000c2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      int humi_int = (100 * (int)ligne_humidite) / 655;                   // Multiplié par 100
 8000c2e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8000c32:	2264      	movs	r2, #100	@ 0x64
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	4a46      	ldr	r2, [pc, #280]	@ (8000d54 <main+0x2b0>)
 8000c3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3e:	1212      	asrs	r2, r2, #8
 8000c40:	17db      	asrs	r3, r3, #31
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      char buffer_temp[10];
      char buffer_humi[10];

      sprintf(buffer_temp, "%d.%d", temp_int / 100, temp_int % 100);
 8000c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c4c:	4a42      	ldr	r2, [pc, #264]	@ (8000d58 <main+0x2b4>)
 8000c4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c52:	1152      	asrs	r2, r2, #5
 8000c54:	17db      	asrs	r3, r3, #31
 8000c56:	1ad4      	subs	r4, r2, r3
 8000c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c5c:	4a3e      	ldr	r2, [pc, #248]	@ (8000d58 <main+0x2b4>)
 8000c5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c62:	1151      	asrs	r1, r2, #5
 8000c64:	17da      	asrs	r2, r3, #31
 8000c66:	1a8a      	subs	r2, r1, r2
 8000c68:	2164      	movs	r1, #100	@ 0x64
 8000c6a:	fb01 f202 	mul.w	r2, r1, r2
 8000c6e:	1a9a      	subs	r2, r3, r2
 8000c70:	f107 0010 	add.w	r0, r7, #16
 8000c74:	4613      	mov	r3, r2
 8000c76:	4622      	mov	r2, r4
 8000c78:	4938      	ldr	r1, [pc, #224]	@ (8000d5c <main+0x2b8>)
 8000c7a:	f003 fd0b 	bl	8004694 <siprintf>
      sprintf(buffer_humi, "%d.%d", humi_int / 100, humi_int % 100);
 8000c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c82:	4a35      	ldr	r2, [pc, #212]	@ (8000d58 <main+0x2b4>)
 8000c84:	fb82 1203 	smull	r1, r2, r2, r3
 8000c88:	1152      	asrs	r2, r2, #5
 8000c8a:	17db      	asrs	r3, r3, #31
 8000c8c:	1ad4      	subs	r4, r2, r3
 8000c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c92:	4a31      	ldr	r2, [pc, #196]	@ (8000d58 <main+0x2b4>)
 8000c94:	fb82 1203 	smull	r1, r2, r2, r3
 8000c98:	1151      	asrs	r1, r2, #5
 8000c9a:	17da      	asrs	r2, r3, #31
 8000c9c:	1a8a      	subs	r2, r1, r2
 8000c9e:	2164      	movs	r1, #100	@ 0x64
 8000ca0:	fb01 f202 	mul.w	r2, r1, r2
 8000ca4:	1a9a      	subs	r2, r3, r2
 8000ca6:	1d38      	adds	r0, r7, #4
 8000ca8:	4613      	mov	r3, r2
 8000caa:	4622      	mov	r2, r4
 8000cac:	492b      	ldr	r1, [pc, #172]	@ (8000d5c <main+0x2b8>)
 8000cae:	f003 fcf1 	bl	8004694 <siprintf>

      // 5️⃣ Affichage sur LCD
      lcd_position(&hi2c1, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	481f      	ldr	r0, [pc, #124]	@ (8000d34 <main+0x290>)
 8000cb8:	f7ff fe8f 	bl	80009da <lcd_position>
      lcd_print(&hi2c1, "TEMP: ");
 8000cbc:	4928      	ldr	r1, [pc, #160]	@ (8000d60 <main+0x2bc>)
 8000cbe:	481d      	ldr	r0, [pc, #116]	@ (8000d34 <main+0x290>)
 8000cc0:	f7ff fe62 	bl	8000988 <lcd_print>

      lcd_position(&hi2c1, 6, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2106      	movs	r1, #6
 8000cc8:	481a      	ldr	r0, [pc, #104]	@ (8000d34 <main+0x290>)
 8000cca:	f7ff fe86 	bl	80009da <lcd_position>
      lcd_print(&hi2c1, buffer_temp);
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4817      	ldr	r0, [pc, #92]	@ (8000d34 <main+0x290>)
 8000cd6:	f7ff fe57 	bl	8000988 <lcd_print>

      lcd_position(&hi2c1, 12, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	210c      	movs	r1, #12
 8000cde:	4815      	ldr	r0, [pc, #84]	@ (8000d34 <main+0x290>)
 8000ce0:	f7ff fe7b 	bl	80009da <lcd_position>
      lcd_print(&hi2c1, "C");
 8000ce4:	491f      	ldr	r1, [pc, #124]	@ (8000d64 <main+0x2c0>)
 8000ce6:	4813      	ldr	r0, [pc, #76]	@ (8000d34 <main+0x290>)
 8000ce8:	f7ff fe4e 	bl	8000988 <lcd_print>

      lcd_position(&hi2c1, 0, 1);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4810      	ldr	r0, [pc, #64]	@ (8000d34 <main+0x290>)
 8000cf2:	f7ff fe72 	bl	80009da <lcd_position>
      lcd_print(&hi2c1, "HUMI:");
 8000cf6:	491c      	ldr	r1, [pc, #112]	@ (8000d68 <main+0x2c4>)
 8000cf8:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <main+0x290>)
 8000cfa:	f7ff fe45 	bl	8000988 <lcd_print>

      lcd_position(&hi2c1, 6, 1);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2106      	movs	r1, #6
 8000d02:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <main+0x290>)
 8000d04:	f7ff fe69 	bl	80009da <lcd_position>
      lcd_print(&hi2c1, buffer_humi);
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <main+0x290>)
 8000d0e:	f7ff fe3b 	bl	8000988 <lcd_print>

      lcd_position(&hi2c1, 12, 1);
 8000d12:	2201      	movs	r2, #1
 8000d14:	210c      	movs	r1, #12
 8000d16:	4807      	ldr	r0, [pc, #28]	@ (8000d34 <main+0x290>)
 8000d18:	f7ff fe5f 	bl	80009da <lcd_position>
      lcd_print(&hi2c1, "%");
 8000d1c:	4913      	ldr	r1, [pc, #76]	@ (8000d6c <main+0x2c8>)
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <main+0x290>)
 8000d20:	f7ff fe32 	bl	8000988 <lcd_print>

      HAL_Delay(3000);
 8000d24:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000d28:	f000 fa48 	bl	80011bc <HAL_Delay>
  while (1) {
 8000d2c:	e704      	b.n	8000b38 <main+0x94>
 8000d2e:	bf00      	nop
 8000d30:	200000d8 	.word	0x200000d8
 8000d34:	2000007c 	.word	0x2000007c
 8000d38:	08005000 	.word	0x08005000
 8000d3c:	08005010 	.word	0x08005010
 8000d40:	20000000 	.word	0x20000000
 8000d44:	08005018 	.word	0x08005018
 8000d48:	200000d0 	.word	0x200000d0
 8000d4c:	08005028 	.word	0x08005028
 8000d50:	08005038 	.word	0x08005038
 8000d54:	640e11fb 	.word	0x640e11fb
 8000d58:	51eb851f 	.word	0x51eb851f
 8000d5c:	08005044 	.word	0x08005044
 8000d60:	0800504c 	.word	0x0800504c
 8000d64:	08005054 	.word	0x08005054
 8000d68:	08005058 	.word	0x08005058
 8000d6c:	08005060 	.word	0x08005060

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b096      	sub	sp, #88	@ 0x58
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	2244      	movs	r2, #68	@ 0x44
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fca8 	bl	80046d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d92:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d96:	f001 fbbf 	bl	8002518 <HAL_PWREx_ControlVoltageScaling>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000da0:	f000 f837 	bl	8000e12 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da4:	2302      	movs	r3, #2
 8000da6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dae:	2310      	movs	r3, #16
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db2:	2302      	movs	r3, #2
 8000db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db6:	2302      	movs	r3, #2
 8000db8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 fbf6 	bl	80025c4 <HAL_RCC_OscConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dde:	f000 f818 	bl	8000e12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de2:	230f      	movs	r3, #15
 8000de4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de6:	2303      	movs	r3, #3
 8000de8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	2104      	movs	r1, #4
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 ffbe 	bl	8002d7c <HAL_RCC_ClockConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e06:	f000 f804 	bl	8000e12 <Error_Handler>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3758      	adds	r7, #88	@ 0x58
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e16:	b672      	cpsid	i
}
 8000e18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1a:	bf00      	nop
 8000e1c:	e7fd      	b.n	8000e1a <Error_Handler+0x8>
	...

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e42:	4a08      	ldr	r2, [pc, #32]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebe:	f000 f95d 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f003 fbf4 	bl	80046e4 <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20018000 	.word	0x20018000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	200000dc 	.word	0x200000dc
 8000f30:	200002b8 	.word	0x200002b8

08000f34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f5e:	4a15      	ldr	r2, [pc, #84]	@ (8000fb4 <MX_USART2_UART_Init+0x5c>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f9c:	f002 fdce 	bl	8003b3c <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fa6:	f7ff ff34 	bl	8000e12 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000e0 	.word	0x200000e0
 8000fb4:	40004400 	.word	0x40004400

08000fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0ac      	sub	sp, #176	@ 0xb0
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2288      	movs	r2, #136	@ 0x88
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 fb7b 	bl	80046d4 <memset>
  if(uartHandle->Instance==USART2)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a21      	ldr	r2, [pc, #132]	@ (8001068 <HAL_UART_MspInit+0xb0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d13b      	bne.n	8001060 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 f8e5 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001000:	f7ff ff07 	bl	8000e12 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001004:	4b19      	ldr	r3, [pc, #100]	@ (800106c <HAL_UART_MspInit+0xb4>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001008:	4a18      	ldr	r2, [pc, #96]	@ (800106c <HAL_UART_MspInit+0xb4>)
 800100a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001010:	4b16      	ldr	r3, [pc, #88]	@ (800106c <HAL_UART_MspInit+0xb4>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <HAL_UART_MspInit+0xb4>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	4a12      	ldr	r2, [pc, #72]	@ (800106c <HAL_UART_MspInit+0xb4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001028:	4b10      	ldr	r3, [pc, #64]	@ (800106c <HAL_UART_MspInit+0xb4>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001034:	230c      	movs	r3, #12
 8001036:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800104c:	2307      	movs	r3, #7
 800104e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105c:	f000 f9b8 	bl	80013d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001060:	bf00      	nop
 8001062:	37b0      	adds	r7, #176	@ 0xb0
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40004400 	.word	0x40004400
 800106c:	40021000 	.word	0x40021000

08001070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001074:	f7ff ff5e 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	@ (80010ac <LoopForever+0x6>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	@ (80010b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <LoopForever+0xe>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	@ (80010bc <LoopForever+0x16>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109e:	f003 fb27 	bl	80046f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010a2:	f7ff fcff 	bl	8000aa4 <main>

080010a6 <LoopForever>:

LoopForever:
    b LoopForever
 80010a6:	e7fe      	b.n	80010a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010b4:	080050f0 	.word	0x080050f0
  ldr r2, =_sbss
 80010b8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010bc:	200002b4 	.word	0x200002b4

080010c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC1_2_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <HAL_Init+0x3c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001100 <HAL_Init+0x3c>)
 80010d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010da:	2003      	movs	r0, #3
 80010dc:	f000 f944 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e0:	2000      	movs	r0, #0
 80010e2:	f000 f80f 	bl	8001104 <HAL_InitTick>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	e001      	b.n	80010f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f2:	f7ff fe95 	bl	8000e20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40022000 	.word	0x40022000

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <HAL_InitTick+0x6c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d023      	beq.n	8001160 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_InitTick+0x70>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_InitTick+0x6c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f941 	bl	80013b6 <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d809      	bhi.n	8001154 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f919 	bl	800137e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114c:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <HAL_InitTick+0x74>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e007      	b.n	8001164 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e004      	b.n	8001164 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e001      	b.n	8001164 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000000c 	.word	0x2000000c
 8001174:	20000004 	.word	0x20000004
 8001178:	20000008 	.word	0x20000008

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000000c 	.word	0x2000000c
 80011a0:	20000168 	.word	0x20000168

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	@ (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000168 	.word	0x20000168

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000000c 	.word	0x2000000c

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	@ 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff8e 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff47 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff5c 	bl	800124c <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff8e 	bl	80012bc <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5d 	bl	8001268 <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffb0 	bl	8001324 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013de:	e17f      	b.n	80016e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8171 	beq.w	80016da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d005      	beq.n	8001410 <HAL_GPIO_Init+0x40>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d130      	bne.n	8001472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001446:	2201      	movs	r2, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 0201 	and.w	r2, r3, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b03      	cmp	r3, #3
 800147c:	d118      	bne.n	80014b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001484:	2201      	movs	r2, #1
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	f003 0201 	and.w	r2, r3, #1
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d017      	beq.n	80014ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d123      	bne.n	8001540 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	08da      	lsrs	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3208      	adds	r2, #8
 8001500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	08da      	lsrs	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3208      	adds	r2, #8
 800153a:	6939      	ldr	r1, [r7, #16]
 800153c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80ac 	beq.w	80016da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	4b5f      	ldr	r3, [pc, #380]	@ (8001700 <HAL_GPIO_Init+0x330>)
 8001584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001586:	4a5e      	ldr	r2, [pc, #376]	@ (8001700 <HAL_GPIO_Init+0x330>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6613      	str	r3, [r2, #96]	@ 0x60
 800158e:	4b5c      	ldr	r3, [pc, #368]	@ (8001700 <HAL_GPIO_Init+0x330>)
 8001590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800159a:	4a5a      	ldr	r2, [pc, #360]	@ (8001704 <HAL_GPIO_Init+0x334>)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015c4:	d025      	beq.n	8001612 <HAL_GPIO_Init+0x242>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001708 <HAL_GPIO_Init+0x338>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d01f      	beq.n	800160e <HAL_GPIO_Init+0x23e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4e      	ldr	r2, [pc, #312]	@ (800170c <HAL_GPIO_Init+0x33c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x23a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001710 <HAL_GPIO_Init+0x340>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x236>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001714 <HAL_GPIO_Init+0x344>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x232>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001718 <HAL_GPIO_Init+0x348>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x22e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4a      	ldr	r2, [pc, #296]	@ (800171c <HAL_GPIO_Init+0x34c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x22a>
 80015f6:	2306      	movs	r3, #6
 80015f8:	e00c      	b.n	8001614 <HAL_GPIO_Init+0x244>
 80015fa:	2307      	movs	r3, #7
 80015fc:	e00a      	b.n	8001614 <HAL_GPIO_Init+0x244>
 80015fe:	2305      	movs	r3, #5
 8001600:	e008      	b.n	8001614 <HAL_GPIO_Init+0x244>
 8001602:	2304      	movs	r3, #4
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x244>
 8001606:	2303      	movs	r3, #3
 8001608:	e004      	b.n	8001614 <HAL_GPIO_Init+0x244>
 800160a:	2302      	movs	r3, #2
 800160c:	e002      	b.n	8001614 <HAL_GPIO_Init+0x244>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_GPIO_Init+0x244>
 8001612:	2300      	movs	r3, #0
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	f002 0203 	and.w	r2, r2, #3
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	4093      	lsls	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001624:	4937      	ldr	r1, [pc, #220]	@ (8001704 <HAL_GPIO_Init+0x334>)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3302      	adds	r3, #2
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001632:	4b3b      	ldr	r3, [pc, #236]	@ (8001720 <HAL_GPIO_Init+0x350>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001656:	4a32      	ldr	r2, [pc, #200]	@ (8001720 <HAL_GPIO_Init+0x350>)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800165c:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <HAL_GPIO_Init+0x350>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001680:	4a27      	ldr	r2, [pc, #156]	@ (8001720 <HAL_GPIO_Init+0x350>)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001686:	4b26      	ldr	r3, [pc, #152]	@ (8001720 <HAL_GPIO_Init+0x350>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <HAL_GPIO_Init+0x350>)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <HAL_GPIO_Init+0x350>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016d4:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <HAL_GPIO_Init+0x350>)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3301      	adds	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f47f ae78 	bne.w	80013e0 <HAL_GPIO_Init+0x10>
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000
 8001708:	48000400 	.word	0x48000400
 800170c:	48000800 	.word	0x48000800
 8001710:	48000c00 	.word	0x48000c00
 8001714:	48001000 	.word	0x48001000
 8001718:	48001400 	.word	0x48001400
 800171c:	48001800 	.word	0x48001800
 8001720:	40010400 	.word	0x40010400

08001724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001740:	e002      	b.n	8001748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e08d      	b.n	8001882 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d106      	bne.n	8001780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7fe ff96 	bl	80006ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2224      	movs	r2, #36	@ 0x24
 8001784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0201 	bic.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	e006      	b.n	80017dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80017da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d108      	bne.n	80017f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	e007      	b.n	8001806 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001804:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001818:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001828:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69d9      	ldr	r1, [r3, #28]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2220      	movs	r2, #32
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af02      	add	r7, sp, #8
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	461a      	mov	r2, r3
 8001898:	460b      	mov	r3, r1
 800189a:	817b      	strh	r3, [r7, #10]
 800189c:	4613      	mov	r3, r2
 800189e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	f040 80fd 	bne.w	8001aa8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_I2C_Master_Transmit+0x30>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e0f6      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x21e>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018c4:	f7ff fc6e 	bl	80011a4 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2319      	movs	r3, #25
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 faf6 	bl	8001ec8 <I2C_WaitOnFlagUntilTimeout>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0e1      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2221      	movs	r2, #33	@ 0x21
 80018ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2210      	movs	r2, #16
 80018f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	893a      	ldrh	r2, [r7, #8]
 8001906:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	2bff      	cmp	r3, #255	@ 0xff
 8001916:	d906      	bls.n	8001926 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	22ff      	movs	r2, #255	@ 0xff
 800191c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800191e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e007      	b.n	8001936 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001930:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001934:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800193a:	2b00      	cmp	r3, #0
 800193c:	d024      	beq.n	8001988 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	781a      	ldrb	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001958:	b29b      	uxth	r3, r3
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001966:	3b01      	subs	r3, #1
 8001968:	b29a      	uxth	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001972:	b2db      	uxtb	r3, r3
 8001974:	3301      	adds	r3, #1
 8001976:	b2da      	uxtb	r2, r3
 8001978:	8979      	ldrh	r1, [r7, #10]
 800197a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab4 <HAL_I2C_Master_Transmit+0x228>)
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 fcf1 	bl	8002368 <I2C_TransferConfig>
 8001986:	e066      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800198c:	b2da      	uxtb	r2, r3
 800198e:	8979      	ldrh	r1, [r7, #10]
 8001990:	4b48      	ldr	r3, [pc, #288]	@ (8001ab4 <HAL_I2C_Master_Transmit+0x228>)
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 fce6 	bl	8002368 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800199c:	e05b      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	6a39      	ldr	r1, [r7, #32]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fae9 	bl	8001f7a <I2C_WaitOnTXISFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e07b      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b6:	781a      	ldrb	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d034      	beq.n	8001a56 <HAL_I2C_Master_Transmit+0x1ca>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d130      	bne.n	8001a56 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	2200      	movs	r2, #0
 80019fc:	2180      	movs	r1, #128	@ 0x80
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fa62 	bl	8001ec8 <I2C_WaitOnFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e04d      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	2bff      	cmp	r3, #255	@ 0xff
 8001a16:	d90e      	bls.n	8001a36 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	22ff      	movs	r2, #255	@ 0xff
 8001a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	8979      	ldrh	r1, [r7, #10]
 8001a26:	2300      	movs	r3, #0
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fc9a 	bl	8002368 <I2C_TransferConfig>
 8001a34:	e00f      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	8979      	ldrh	r1, [r7, #10]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 fc89 	bl	8002368 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d19e      	bne.n	800199e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	6a39      	ldr	r1, [r7, #32]
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 facf 	bl	8002008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e01a      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6859      	ldr	r1, [r3, #4]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <HAL_I2C_Master_Transmit+0x22c>)
 8001a88:	400b      	ands	r3, r1
 8001a8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e000      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001aa8:	2302      	movs	r3, #2
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	80002000 	.word	0x80002000
 8001ab8:	fe00e800 	.word	0xfe00e800

08001abc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	460b      	mov	r3, r1
 8001aca:	817b      	strh	r3, [r7, #10]
 8001acc:	4613      	mov	r3, r2
 8001ace:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	f040 80db 	bne.w	8001c94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_I2C_Master_Receive+0x30>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e0d4      	b.n	8001c96 <HAL_I2C_Master_Receive+0x1da>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001af4:	f7ff fb56 	bl	80011a4 <HAL_GetTick>
 8001af8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2319      	movs	r3, #25
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f9de 	bl	8001ec8 <I2C_WaitOnFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0bf      	b.n	8001c96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2222      	movs	r2, #34	@ 0x22
 8001b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2210      	movs	r2, #16
 8001b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	893a      	ldrh	r2, [r7, #8]
 8001b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2bff      	cmp	r3, #255	@ 0xff
 8001b46:	d90e      	bls.n	8001b66 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	8979      	ldrh	r1, [r7, #10]
 8001b56:	4b52      	ldr	r3, [pc, #328]	@ (8001ca0 <HAL_I2C_Master_Receive+0x1e4>)
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 fc02 	bl	8002368 <I2C_TransferConfig>
 8001b64:	e06d      	b.n	8001c42 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	8979      	ldrh	r1, [r7, #10]
 8001b78:	4b49      	ldr	r3, [pc, #292]	@ (8001ca0 <HAL_I2C_Master_Receive+0x1e4>)
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 fbf1 	bl	8002368 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001b86:	e05c      	b.n	8001c42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	6a39      	ldr	r1, [r7, #32]
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fa7f 	bl	8002090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e07c      	b.n	8001c96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d034      	beq.n	8001c42 <HAL_I2C_Master_Receive+0x186>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d130      	bne.n	8001c42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	2200      	movs	r2, #0
 8001be8:	2180      	movs	r1, #128	@ 0x80
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f96c 	bl	8001ec8 <I2C_WaitOnFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e04d      	b.n	8001c96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2bff      	cmp	r3, #255	@ 0xff
 8001c02:	d90e      	bls.n	8001c22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	22ff      	movs	r2, #255	@ 0xff
 8001c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	8979      	ldrh	r1, [r7, #10]
 8001c12:	2300      	movs	r3, #0
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 fba4 	bl	8002368 <I2C_TransferConfig>
 8001c20:	e00f      	b.n	8001c42 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	8979      	ldrh	r1, [r7, #10]
 8001c34:	2300      	movs	r3, #0
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 fb93 	bl	8002368 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d19d      	bne.n	8001b88 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	6a39      	ldr	r1, [r7, #32]
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 f9d9 	bl	8002008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e01a      	b.n	8001c96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2220      	movs	r2, #32
 8001c66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6859      	ldr	r1, [r3, #4]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <HAL_I2C_Master_Receive+0x1e8>)
 8001c74:	400b      	ands	r3, r1
 8001c76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e000      	b.n	8001c96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
  }
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	80002400 	.word	0x80002400
 8001ca4:	fe00e800 	.word	0xfe00e800

08001ca8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	f040 80d6 	bne.w	8001e76 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cd8:	d101      	bne.n	8001cde <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e0cc      	b.n	8001e78 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_I2C_IsDeviceReady+0x44>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e0c5      	b.n	8001e78 <HAL_I2C_IsDeviceReady+0x1d0>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2224      	movs	r2, #36	@ 0x24
 8001cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d107      	bne.n	8001d1a <HAL_I2C_IsDeviceReady+0x72>
 8001d0a:	897b      	ldrh	r3, [r7, #10]
 8001d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d18:	e006      	b.n	8001d28 <HAL_I2C_IsDeviceReady+0x80>
 8001d1a:	897b      	ldrh	r3, [r7, #10]
 8001d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d24:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001d2e:	f7ff fa39 	bl	80011a4 <HAL_GetTick>
 8001d32:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	bf0c      	ite	eq
 8001d42:	2301      	moveq	r3, #1
 8001d44:	2300      	movne	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b10      	cmp	r3, #16
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d60:	e034      	b.n	8001dcc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d01a      	beq.n	8001da0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d6a:	f7ff fa1b 	bl	80011a4 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d302      	bcc.n	8001d80 <HAL_I2C_IsDeviceReady+0xd8>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10f      	bne.n	8001da0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8c:	f043 0220 	orr.w	r2, r3, #32
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e06b      	b.n	8001e78 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	bf0c      	ite	eq
 8001dae:	2301      	moveq	r3, #1
 8001db0:	2300      	movne	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b10      	cmp	r3, #16
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001dcc:	7ffb      	ldrb	r3, [r7, #31]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <HAL_I2C_IsDeviceReady+0x130>
 8001dd2:	7fbb      	ldrb	r3, [r7, #30]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0c4      	beq.n	8001d62 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d01a      	beq.n	8001e1c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2200      	movs	r2, #0
 8001dee:	2120      	movs	r1, #32
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f869 	bl	8001ec8 <I2C_WaitOnFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e03b      	b.n	8001e78 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2220      	movs	r2, #32
 8001e06:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e02d      	b.n	8001e78 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	2120      	movs	r1, #32
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f84e 	bl	8001ec8 <I2C_WaitOnFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e020      	b.n	8001e78 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2210      	movs	r2, #16
 8001e3c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2220      	movs	r2, #32
 8001e44:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f63f af56 	bhi.w	8001d02 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f043 0220 	orr.w	r2, r3, #32
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001e76:	2302      	movs	r3, #2
  }
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d103      	bne.n	8001e9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d007      	beq.n	8001ebc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	619a      	str	r2, [r3, #24]
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ed8:	e03b      	b.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	6839      	ldr	r1, [r7, #0]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f962 	bl	80021a8 <I2C_IsErrorOccurred>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e041      	b.n	8001f72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d02d      	beq.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef6:	f7ff f955 	bl	80011a4 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d302      	bcc.n	8001f0c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d122      	bne.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	4013      	ands	r3, r2
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d113      	bne.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	f043 0220 	orr.w	r2, r3, #32
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00f      	b.n	8001f72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699a      	ldr	r2, [r3, #24]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	bf0c      	ite	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	2300      	movne	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d0b4      	beq.n	8001eda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f86:	e033      	b.n	8001ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f90b 	bl	80021a8 <I2C_IsErrorOccurred>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e031      	b.n	8002000 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d025      	beq.n	8001ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa4:	f7ff f8fe 	bl	80011a4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d302      	bcc.n	8001fba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d11a      	bne.n	8001ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d013      	beq.n	8001ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e007      	b.n	8002000 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d1c4      	bne.n	8001f88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002014:	e02f      	b.n	8002076 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f8c4 	bl	80021a8 <I2C_IsErrorOccurred>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e02d      	b.n	8002086 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202a:	f7ff f8bb 	bl	80011a4 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	429a      	cmp	r2, r3
 8002038:	d302      	bcc.n	8002040 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d11a      	bne.n	8002076 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b20      	cmp	r3, #32
 800204c:	d013      	beq.n	8002076 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	f043 0220 	orr.w	r2, r3, #32
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e007      	b.n	8002086 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b20      	cmp	r3, #32
 8002082:	d1c8      	bne.n	8002016 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80020a0:	e071      	b.n	8002186 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f87e 	bl	80021a8 <I2C_IsErrorOccurred>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d13b      	bne.n	800213c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d138      	bne.n	800213c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d105      	bne.n	80020e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d121      	bne.n	8002136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2210      	movs	r2, #16
 80020f8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2204      	movs	r2, #4
 80020fe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2220      	movs	r2, #32
 8002106:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6859      	ldr	r1, [r3, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002114:	400b      	ands	r3, r1
 8002116:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	75fb      	strb	r3, [r7, #23]
 8002134:	e002      	b.n	800213c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800213c:	f7ff f832 	bl	80011a4 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	429a      	cmp	r2, r3
 800214a:	d302      	bcc.n	8002152 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d119      	bne.n	8002186 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d116      	bne.n	8002186 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b04      	cmp	r3, #4
 8002164:	d00f      	beq.n	8002186 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	f043 0220 	orr.w	r2, r3, #32
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b04      	cmp	r3, #4
 8002192:	d002      	beq.n	800219a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d083      	beq.n	80020a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800219a:	7dfb      	ldrb	r3, [r7, #23]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	fe00e800 	.word	0xfe00e800

080021a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	@ 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d068      	beq.n	80022a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2210      	movs	r2, #16
 80021da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021dc:	e049      	b.n	8002272 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d045      	beq.n	8002272 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021e6:	f7fe ffdd 	bl	80011a4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d302      	bcc.n	80021fc <I2C_IsErrorOccurred+0x54>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d13a      	bne.n	8002272 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002206:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800220e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800221a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800221e:	d121      	bne.n	8002264 <I2C_IsErrorOccurred+0xbc>
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002226:	d01d      	beq.n	8002264 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	2b20      	cmp	r3, #32
 800222c:	d01a      	beq.n	8002264 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800223c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800223e:	f7fe ffb1 	bl	80011a4 <HAL_GetTick>
 8002242:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002244:	e00e      	b.n	8002264 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002246:	f7fe ffad 	bl	80011a4 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b19      	cmp	r3, #25
 8002252:	d907      	bls.n	8002264 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	f043 0320 	orr.w	r3, r3, #32
 800225a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002262:	e006      	b.n	8002272 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b20      	cmp	r3, #32
 8002270:	d1e9      	bne.n	8002246 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b20      	cmp	r3, #32
 800227e:	d003      	beq.n	8002288 <I2C_IsErrorOccurred+0xe0>
 8002280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0aa      	beq.n	80021de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800228c:	2b00      	cmp	r3, #0
 800228e:	d103      	bne.n	8002298 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2220      	movs	r2, #32
 8002296:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00b      	beq.n	80022d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00b      	beq.n	8002314 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800230c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01c      	beq.n	8002356 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f7ff fdaf 	bl	8001e80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <I2C_IsErrorOccurred+0x1bc>)
 800232e:	400b      	ands	r3, r1
 8002330:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	431a      	orrs	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002356:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800235a:	4618      	mov	r0, r3
 800235c:	3728      	adds	r7, #40	@ 0x28
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	fe00e800 	.word	0xfe00e800

08002368 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	460b      	mov	r3, r1
 8002374:	817b      	strh	r3, [r7, #10]
 8002376:	4613      	mov	r3, r2
 8002378:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800237a:	897b      	ldrh	r3, [r7, #10]
 800237c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002380:	7a7b      	ldrb	r3, [r7, #9]
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002388:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	4313      	orrs	r3, r2
 8002392:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002396:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	0d5b      	lsrs	r3, r3, #21
 80023a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <I2C_TransferConfig+0x60>)
 80023a8:	430b      	orrs	r3, r1
 80023aa:	43db      	mvns	r3, r3
 80023ac:	ea02 0103 	and.w	r1, r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023ba:	bf00      	nop
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	03ff63ff 	.word	0x03ff63ff

080023cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d138      	bne.n	8002454 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e032      	b.n	8002456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2224      	movs	r2, #36	@ 0x24
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800241e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6819      	ldr	r1, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e000      	b.n	8002456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002454:	2302      	movs	r3, #2
  }
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b20      	cmp	r3, #32
 8002476:	d139      	bne.n	80024ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002482:	2302      	movs	r3, #2
 8002484:	e033      	b.n	80024ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2224      	movs	r2, #36	@ 0x24
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e000      	b.n	80024ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002500:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <HAL_PWREx_GetVoltageRange+0x18>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40007000 	.word	0x40007000

08002518 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002526:	d130      	bne.n	800258a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002528:	4b23      	ldr	r3, [pc, #140]	@ (80025b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002534:	d038      	beq.n	80025a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002536:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800253e:	4a1e      	ldr	r2, [pc, #120]	@ (80025b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002540:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002544:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002546:	4b1d      	ldr	r3, [pc, #116]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2232      	movs	r2, #50	@ 0x32
 800254c:	fb02 f303 	mul.w	r3, r2, r3
 8002550:	4a1b      	ldr	r2, [pc, #108]	@ (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0c9b      	lsrs	r3, r3, #18
 8002558:	3301      	adds	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800255c:	e002      	b.n	8002564 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3b01      	subs	r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002570:	d102      	bne.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f2      	bne.n	800255e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002578:	4b0f      	ldr	r3, [pc, #60]	@ (80025b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002584:	d110      	bne.n	80025a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e00f      	b.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800258a:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002596:	d007      	beq.n	80025a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002598:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025a0:	4a05      	ldr	r2, [pc, #20]	@ (80025b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40007000 	.word	0x40007000
 80025bc:	20000004 	.word	0x20000004
 80025c0:	431bde83 	.word	0x431bde83

080025c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e3ca      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d6:	4b97      	ldr	r3, [pc, #604]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e0:	4b94      	ldr	r3, [pc, #592]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80e4 	beq.w	80027c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_RCC_OscConfig+0x4a>
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b0c      	cmp	r3, #12
 8002602:	f040 808b 	bne.w	800271c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b01      	cmp	r3, #1
 800260a:	f040 8087 	bne.w	800271c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800260e:	4b89      	ldr	r3, [pc, #548]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x62>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e3a2      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1a      	ldr	r2, [r3, #32]
 800262a:	4b82      	ldr	r3, [pc, #520]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <HAL_RCC_OscConfig+0x7c>
 8002636:	4b7f      	ldr	r3, [pc, #508]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800263e:	e005      	b.n	800264c <HAL_RCC_OscConfig+0x88>
 8002640:	4b7c      	ldr	r3, [pc, #496]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800264c:	4293      	cmp	r3, r2
 800264e:	d223      	bcs.n	8002698 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fd55 	bl	8003104 <RCC_SetFlashLatencyFromMSIRange>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e383      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002664:	4b73      	ldr	r3, [pc, #460]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a72      	ldr	r2, [pc, #456]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800266a:	f043 0308 	orr.w	r3, r3, #8
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b70      	ldr	r3, [pc, #448]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	496d      	ldr	r1, [pc, #436]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002682:	4b6c      	ldr	r3, [pc, #432]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	4968      	ldr	r1, [pc, #416]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
 8002696:	e025      	b.n	80026e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002698:	4b66      	ldr	r3, [pc, #408]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a65      	ldr	r2, [pc, #404]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800269e:	f043 0308 	orr.w	r3, r3, #8
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b63      	ldr	r3, [pc, #396]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4960      	ldr	r1, [pc, #384]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	495b      	ldr	r1, [pc, #364]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 fd15 	bl	8003104 <RCC_SetFlashLatencyFromMSIRange>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e343      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026e4:	f000 fc4a 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b52      	ldr	r3, [pc, #328]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	4950      	ldr	r1, [pc, #320]	@ (8002838 <HAL_RCC_OscConfig+0x274>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002700:	4a4e      	ldr	r2, [pc, #312]	@ (800283c <HAL_RCC_OscConfig+0x278>)
 8002702:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002704:	4b4e      	ldr	r3, [pc, #312]	@ (8002840 <HAL_RCC_OscConfig+0x27c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fcfb 	bl	8001104 <HAL_InitTick>
 800270e:	4603      	mov	r3, r0
 8002710:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d052      	beq.n	80027be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	e327      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d032      	beq.n	800278a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002724:	4b43      	ldr	r3, [pc, #268]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a42      	ldr	r2, [pc, #264]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002730:	f7fe fd38 	bl	80011a4 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002738:	f7fe fd34 	bl	80011a4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e310      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800274a:	4b3a      	ldr	r3, [pc, #232]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002756:	4b37      	ldr	r3, [pc, #220]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a36      	ldr	r2, [pc, #216]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4b34      	ldr	r3, [pc, #208]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4931      	ldr	r1, [pc, #196]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002774:	4b2f      	ldr	r3, [pc, #188]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	492c      	ldr	r1, [pc, #176]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
 8002788:	e01a      	b.n	80027c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800278a:	4b2a      	ldr	r3, [pc, #168]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a29      	ldr	r2, [pc, #164]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002796:	f7fe fd05 	bl	80011a4 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800279e:	f7fe fd01 	bl	80011a4 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e2dd      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027b0:	4b20      	ldr	r3, [pc, #128]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0x1da>
 80027bc:	e000      	b.n	80027c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d074      	beq.n	80028b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x21a>
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b0c      	cmp	r3, #12
 80027d6:	d10e      	bne.n	80027f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d10b      	bne.n	80027f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d064      	beq.n	80028b4 <HAL_RCC_OscConfig+0x2f0>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d160      	bne.n	80028b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e2ba      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x24a>
 8002800:	4b0c      	ldr	r3, [pc, #48]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0b      	ldr	r2, [pc, #44]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	e026      	b.n	800285c <HAL_RCC_OscConfig+0x298>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002816:	d115      	bne.n	8002844 <HAL_RCC_OscConfig+0x280>
 8002818:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a05      	ldr	r2, [pc, #20]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800281e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b03      	ldr	r3, [pc, #12]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a02      	ldr	r2, [pc, #8]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800282a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	e014      	b.n	800285c <HAL_RCC_OscConfig+0x298>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	08005064 	.word	0x08005064
 800283c:	20000004 	.word	0x20000004
 8002840:	20000008 	.word	0x20000008
 8002844:	4ba0      	ldr	r3, [pc, #640]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a9f      	ldr	r2, [pc, #636]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 800284a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b9d      	ldr	r3, [pc, #628]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a9c      	ldr	r2, [pc, #624]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800285a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d013      	beq.n	800288c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fc9e 	bl	80011a4 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286c:	f7fe fc9a 	bl	80011a4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	@ 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e276      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800287e:	4b92      	ldr	r3, [pc, #584]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x2a8>
 800288a:	e014      	b.n	80028b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe fc8a 	bl	80011a4 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7fe fc86 	bl	80011a4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	@ 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e262      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028a6:	4b88      	ldr	r3, [pc, #544]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x2d0>
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d060      	beq.n	8002984 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_OscConfig+0x310>
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	d119      	bne.n	8002902 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d116      	bne.n	8002902 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d4:	4b7c      	ldr	r3, [pc, #496]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_OscConfig+0x328>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e23f      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ec:	4b76      	ldr	r3, [pc, #472]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	4973      	ldr	r1, [pc, #460]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002900:	e040      	b.n	8002984 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d023      	beq.n	8002952 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800290a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7fe fc45 	bl	80011a4 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291e:	f7fe fc41 	bl	80011a4 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e21d      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002930:	4b65      	ldr	r3, [pc, #404]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4b62      	ldr	r3, [pc, #392]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	495f      	ldr	r1, [pc, #380]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
 8002950:	e018      	b.n	8002984 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002952:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a5c      	ldr	r2, [pc, #368]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800295c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295e:	f7fe fc21 	bl	80011a4 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002966:	f7fe fc1d 	bl	80011a4 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e1f9      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002978:	4b53      	ldr	r3, [pc, #332]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f0      	bne.n	8002966 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d03c      	beq.n	8002a0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01c      	beq.n	80029d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002998:	4b4b      	ldr	r3, [pc, #300]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 800299a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299e:	4a4a      	ldr	r2, [pc, #296]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fe fbfc 	bl	80011a4 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b0:	f7fe fbf8 	bl	80011a4 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e1d4      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c2:	4b41      	ldr	r3, [pc, #260]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 80029c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ef      	beq.n	80029b0 <HAL_RCC_OscConfig+0x3ec>
 80029d0:	e01b      	b.n	8002a0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 80029d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d8:	4a3b      	ldr	r2, [pc, #236]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7fe fbdf 	bl	80011a4 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ea:	f7fe fbdb 	bl	80011a4 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e1b7      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029fc:	4b32      	ldr	r3, [pc, #200]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 80029fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1ef      	bne.n	80029ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80a6 	beq.w	8002b64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10d      	bne.n	8002a44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a28:	4b27      	ldr	r3, [pc, #156]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2c:	4a26      	ldr	r2, [pc, #152]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a34:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a40:	2301      	movs	r3, #1
 8002a42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a44:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <HAL_RCC_OscConfig+0x508>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d118      	bne.n	8002a82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a50:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <HAL_RCC_OscConfig+0x508>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1d      	ldr	r2, [pc, #116]	@ (8002acc <HAL_RCC_OscConfig+0x508>)
 8002a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5c:	f7fe fba2 	bl	80011a4 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a64:	f7fe fb9e 	bl	80011a4 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e17a      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a76:	4b15      	ldr	r3, [pc, #84]	@ (8002acc <HAL_RCC_OscConfig+0x508>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d108      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4d8>
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a90:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a9a:	e029      	b.n	8002af0 <HAL_RCC_OscConfig+0x52c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d115      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x50c>
 8002aa4:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aaa:	4a07      	ldr	r2, [pc, #28]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ab4:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aba:	4a03      	ldr	r2, [pc, #12]	@ (8002ac8 <HAL_RCC_OscConfig+0x504>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ac4:	e014      	b.n	8002af0 <HAL_RCC_OscConfig+0x52c>
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad6:	4a9b      	ldr	r2, [pc, #620]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ae0:	4b98      	ldr	r3, [pc, #608]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae6:	4a97      	ldr	r2, [pc, #604]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002ae8:	f023 0304 	bic.w	r3, r3, #4
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d016      	beq.n	8002b26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7fe fb54 	bl	80011a4 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b00:	f7fe fb50 	bl	80011a4 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e12a      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b16:	4b8b      	ldr	r3, [pc, #556]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ed      	beq.n	8002b00 <HAL_RCC_OscConfig+0x53c>
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7fe fb3d 	bl	80011a4 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fb39 	bl	80011a4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e113      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b44:	4b7f      	ldr	r3, [pc, #508]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ed      	bne.n	8002b2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b52:	7ffb      	ldrb	r3, [r7, #31]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b58:	4b7a      	ldr	r3, [pc, #488]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5c:	4a79      	ldr	r2, [pc, #484]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80fe 	beq.w	8002d6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	f040 80d0 	bne.w	8002d18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b78:	4b72      	ldr	r3, [pc, #456]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d130      	bne.n	8002bee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	3b01      	subs	r3, #1
 8002b98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d127      	bne.n	8002bee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d11f      	bne.n	8002bee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bb8:	2a07      	cmp	r2, #7
 8002bba:	bf14      	ite	ne
 8002bbc:	2201      	movne	r2, #1
 8002bbe:	2200      	moveq	r2, #0
 8002bc0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d113      	bne.n	8002bee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d06e      	beq.n	8002ccc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	d069      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bf4:	4b53      	ldr	r3, [pc, #332]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c00:	4b50      	ldr	r3, [pc, #320]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0ad      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c10:	4b4c      	ldr	r3, [pc, #304]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a4b      	ldr	r2, [pc, #300]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002c16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c1c:	f7fe fac2 	bl	80011a4 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c24:	f7fe fabe 	bl	80011a4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e09a      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c36:	4b43      	ldr	r3, [pc, #268]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c42:	4b40      	ldr	r3, [pc, #256]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	4b40      	ldr	r3, [pc, #256]	@ (8002d48 <HAL_RCC_OscConfig+0x784>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c52:	3a01      	subs	r2, #1
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	4311      	orrs	r1, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c5c:	0212      	lsls	r2, r2, #8
 8002c5e:	4311      	orrs	r1, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c64:	0852      	lsrs	r2, r2, #1
 8002c66:	3a01      	subs	r2, #1
 8002c68:	0552      	lsls	r2, r2, #21
 8002c6a:	4311      	orrs	r1, r2
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c70:	0852      	lsrs	r2, r2, #1
 8002c72:	3a01      	subs	r2, #1
 8002c74:	0652      	lsls	r2, r2, #25
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c7c:	0912      	lsrs	r2, r2, #4
 8002c7e:	0452      	lsls	r2, r2, #17
 8002c80:	430a      	orrs	r2, r1
 8002c82:	4930      	ldr	r1, [pc, #192]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c88:	4b2e      	ldr	r3, [pc, #184]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c94:	4b2b      	ldr	r3, [pc, #172]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4a2a      	ldr	r2, [pc, #168]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca0:	f7fe fa80 	bl	80011a4 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe fa7c 	bl	80011a4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e058      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cba:	4b22      	ldr	r3, [pc, #136]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cc6:	e050      	b.n	8002d6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e04f      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d148      	bne.n	8002d6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a19      	ldr	r2, [pc, #100]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ce2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce4:	4b17      	ldr	r3, [pc, #92]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4a16      	ldr	r2, [pc, #88]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cf0:	f7fe fa58 	bl	80011a4 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe fa54 	bl	80011a4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e030      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x734>
 8002d16:	e028      	b.n	8002d6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2b0c      	cmp	r3, #12
 8002d1c:	d023      	beq.n	8002d66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a08      	ldr	r2, [pc, #32]	@ (8002d44 <HAL_RCC_OscConfig+0x780>)
 8002d24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fa3b 	bl	80011a4 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d30:	e00c      	b.n	8002d4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fe fa37 	bl	80011a4 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d905      	bls.n	8002d4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e013      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4c:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <HAL_RCC_OscConfig+0x7b0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1ec      	bne.n	8002d32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d58:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <HAL_RCC_OscConfig+0x7b0>)
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	4905      	ldr	r1, [pc, #20]	@ (8002d74 <HAL_RCC_OscConfig+0x7b0>)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_RCC_OscConfig+0x7b4>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	60cb      	str	r3, [r1, #12]
 8002d64:	e001      	b.n	8002d6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	feeefffc 	.word	0xfeeefffc

08002d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0e7      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	4b75      	ldr	r3, [pc, #468]	@ (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d910      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b72      	ldr	r3, [pc, #456]	@ (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 0207 	bic.w	r2, r3, #7
 8002da6:	4970      	ldr	r1, [pc, #448]	@ (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b6e      	ldr	r3, [pc, #440]	@ (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0cf      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d010      	beq.n	8002dee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	4b66      	ldr	r3, [pc, #408]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d908      	bls.n	8002dee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b63      	ldr	r3, [pc, #396]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4960      	ldr	r1, [pc, #384]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d04c      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e02:	4b5a      	ldr	r3, [pc, #360]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d121      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0a6      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1a:	4b54      	ldr	r3, [pc, #336]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d115      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e09a      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e32:	4b4e      	ldr	r3, [pc, #312]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e08e      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e42:	4b4a      	ldr	r3, [pc, #296]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e086      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e52:	4b46      	ldr	r3, [pc, #280]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f023 0203 	bic.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4943      	ldr	r1, [pc, #268]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e64:	f7fe f99e 	bl	80011a4 <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6c:	f7fe f99a 	bl	80011a4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e06e      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	4b3a      	ldr	r3, [pc, #232]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 020c 	and.w	r2, r3, #12
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d1eb      	bne.n	8002e6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	4b31      	ldr	r3, [pc, #196]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d208      	bcs.n	8002ec2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	492b      	ldr	r1, [pc, #172]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec2:	4b29      	ldr	r3, [pc, #164]	@ (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d210      	bcs.n	8002ef2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed0:	4b25      	ldr	r3, [pc, #148]	@ (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 0207 	bic.w	r2, r3, #7
 8002ed8:	4923      	ldr	r1, [pc, #140]	@ (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee0:	4b21      	ldr	r3, [pc, #132]	@ (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e036      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efe:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4918      	ldr	r1, [pc, #96]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1c:	4b13      	ldr	r3, [pc, #76]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4910      	ldr	r1, [pc, #64]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f30:	f000 f824 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	490b      	ldr	r1, [pc, #44]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f4>)
 8002f42:	5ccb      	ldrb	r3, [r1, r3]
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4c:	4a09      	ldr	r2, [pc, #36]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f8>)
 8002f4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f50:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <HAL_RCC_ClockConfig+0x1fc>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe f8d5 	bl	8001104 <HAL_InitTick>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	08005064 	.word	0x08005064
 8002f74:	20000004 	.word	0x20000004
 8002f78:	20000008 	.word	0x20000008

08002f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	@ 0x24
 8002f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f94:	4b3b      	ldr	r3, [pc, #236]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d121      	bne.n	8002fee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d11e      	bne.n	8002fee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fb0:	4b34      	ldr	r3, [pc, #208]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fbc:	4b31      	ldr	r3, [pc, #196]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e005      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d102      	bne.n	8002ffa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ff4:	4b25      	ldr	r3, [pc, #148]	@ (800308c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	e004      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003000:	4b23      	ldr	r3, [pc, #140]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x114>)
 8003002:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d134      	bne.n	8003074 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800300a:	4b1e      	ldr	r3, [pc, #120]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d003      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0xa6>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d003      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0xac>
 8003020:	e005      	b.n	800302e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003022:	4b1a      	ldr	r3, [pc, #104]	@ (800308c <HAL_RCC_GetSysClockFreq+0x110>)
 8003024:	617b      	str	r3, [r7, #20]
      break;
 8003026:	e005      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003028:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x114>)
 800302a:	617b      	str	r3, [r7, #20]
      break;
 800302c:	e002      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	617b      	str	r3, [r7, #20]
      break;
 8003032:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003034:	4b13      	ldr	r3, [pc, #76]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	3301      	adds	r3, #1
 8003040:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003042:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	fb03 f202 	mul.w	r2, r3, r2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800305a:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	0e5b      	lsrs	r3, r3, #25
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	3301      	adds	r3, #1
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003074:	69bb      	ldr	r3, [r7, #24]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	@ 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	0800507c 	.word	0x0800507c
 800308c:	00f42400 	.word	0x00f42400
 8003090:	007a1200 	.word	0x007a1200

08003094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003098:	4b03      	ldr	r3, [pc, #12]	@ (80030a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000004 	.word	0x20000004

080030ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030b0:	f7ff fff0 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b06      	ldr	r3, [pc, #24]	@ (80030d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4904      	ldr	r1, [pc, #16]	@ (80030d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08005074 	.word	0x08005074

080030d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030dc:	f7ff ffda 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0adb      	lsrs	r3, r3, #11
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4904      	ldr	r1, [pc, #16]	@ (8003100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	08005074 	.word	0x08005074

08003104 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003110:	4b2a      	ldr	r3, [pc, #168]	@ (80031bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800311c:	f7ff f9ee 	bl	80024fc <HAL_PWREx_GetVoltageRange>
 8003120:	6178      	str	r0, [r7, #20]
 8003122:	e014      	b.n	800314e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003124:	4b25      	ldr	r3, [pc, #148]	@ (80031bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003128:	4a24      	ldr	r2, [pc, #144]	@ (80031bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003130:	4b22      	ldr	r3, [pc, #136]	@ (80031bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800313c:	f7ff f9de 	bl	80024fc <HAL_PWREx_GetVoltageRange>
 8003140:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003142:	4b1e      	ldr	r3, [pc, #120]	@ (80031bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003146:	4a1d      	ldr	r2, [pc, #116]	@ (80031bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800314c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003154:	d10b      	bne.n	800316e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b80      	cmp	r3, #128	@ 0x80
 800315a:	d919      	bls.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003160:	d902      	bls.n	8003168 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003162:	2302      	movs	r3, #2
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	e013      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003168:	2301      	movs	r3, #1
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	e010      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b80      	cmp	r3, #128	@ 0x80
 8003172:	d902      	bls.n	800317a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003174:	2303      	movs	r3, #3
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	e00a      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b80      	cmp	r3, #128	@ 0x80
 800317e:	d102      	bne.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003180:	2302      	movs	r3, #2
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	e004      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b70      	cmp	r3, #112	@ 0x70
 800318a:	d101      	bne.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800318c:	2301      	movs	r3, #1
 800318e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003190:	4b0b      	ldr	r3, [pc, #44]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 0207 	bic.w	r2, r3, #7
 8003198:	4909      	ldr	r1, [pc, #36]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031a0:	4b07      	ldr	r3, [pc, #28]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d001      	beq.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40022000 	.word	0x40022000

080031c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031cc:	2300      	movs	r3, #0
 80031ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d0:	2300      	movs	r3, #0
 80031d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d041      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031e8:	d02a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031ee:	d824      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031f4:	d008      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031fa:	d81e      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003200:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003204:	d010      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003206:	e018      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003208:	4b86      	ldr	r3, [pc, #536]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4a85      	ldr	r2, [pc, #532]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003212:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003214:	e015      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fabb 	bl	8003798 <RCCEx_PLLSAI1_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003226:	e00c      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3320      	adds	r3, #32
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fba6 	bl	8003980 <RCCEx_PLLSAI2_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003238:	e003      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	74fb      	strb	r3, [r7, #19]
      break;
 800323e:	e000      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003248:	4b76      	ldr	r3, [pc, #472]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003256:	4973      	ldr	r1, [pc, #460]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800325e:	e001      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d041      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003274:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003278:	d02a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800327a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800327e:	d824      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003280:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003284:	d008      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800328a:	d81e      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003294:	d010      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003296:	e018      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003298:	4b62      	ldr	r3, [pc, #392]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4a61      	ldr	r2, [pc, #388]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032a4:	e015      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3304      	adds	r3, #4
 80032aa:	2100      	movs	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fa73 	bl	8003798 <RCCEx_PLLSAI1_Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032b6:	e00c      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3320      	adds	r3, #32
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fb5e 	bl	8003980 <RCCEx_PLLSAI2_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c8:	e003      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	74fb      	strb	r3, [r7, #19]
      break;
 80032ce:	e000      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032d8:	4b52      	ldr	r3, [pc, #328]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032e6:	494f      	ldr	r1, [pc, #316]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032ee:	e001      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80a0 	beq.w	8003442 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003306:	4b47      	ldr	r3, [pc, #284]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00d      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331c:	4b41      	ldr	r3, [pc, #260]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003320:	4a40      	ldr	r2, [pc, #256]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003326:	6593      	str	r3, [r2, #88]	@ 0x58
 8003328:	4b3e      	ldr	r3, [pc, #248]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003334:	2301      	movs	r3, #1
 8003336:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003338:	4b3b      	ldr	r3, [pc, #236]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a3a      	ldr	r2, [pc, #232]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800333e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003342:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003344:	f7fd ff2e 	bl	80011a4 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800334a:	e009      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334c:	f7fd ff2a 	bl	80011a4 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d902      	bls.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	74fb      	strb	r3, [r7, #19]
        break;
 800335e:	e005      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003360:	4b31      	ldr	r3, [pc, #196]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0ef      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d15c      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003372:	4b2c      	ldr	r3, [pc, #176]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003378:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01f      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	429a      	cmp	r2, r3
 800338e:	d019      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003390:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800339c:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a2:	4a20      	ldr	r2, [pc, #128]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033bc:	4a19      	ldr	r2, [pc, #100]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d016      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fd fee9 	bl	80011a4 <HAL_GetTick>
 80033d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d4:	e00b      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fd fee5 	bl	80011a4 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d902      	bls.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	74fb      	strb	r3, [r7, #19]
            break;
 80033ec:	e006      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ec      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10c      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003402:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003408:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003412:	4904      	ldr	r1, [pc, #16]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800341a:	e009      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	74bb      	strb	r3, [r7, #18]
 8003420:	e006      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003430:	7c7b      	ldrb	r3, [r7, #17]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d105      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4b9e      	ldr	r3, [pc, #632]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343a:	4a9d      	ldr	r2, [pc, #628]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003440:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800344e:	4b98      	ldr	r3, [pc, #608]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003454:	f023 0203 	bic.w	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345c:	4994      	ldr	r1, [pc, #592]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003470:	4b8f      	ldr	r3, [pc, #572]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003476:	f023 020c 	bic.w	r2, r3, #12
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347e:	498c      	ldr	r1, [pc, #560]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003492:	4b87      	ldr	r3, [pc, #540]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003498:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	4983      	ldr	r1, [pc, #524]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034b4:	4b7e      	ldr	r3, [pc, #504]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	497b      	ldr	r1, [pc, #492]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034d6:	4b76      	ldr	r3, [pc, #472]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e4:	4972      	ldr	r1, [pc, #456]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034f8:	4b6d      	ldr	r3, [pc, #436]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	496a      	ldr	r1, [pc, #424]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800351a:	4b65      	ldr	r3, [pc, #404]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003520:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	4961      	ldr	r1, [pc, #388]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800353c:	4b5c      	ldr	r3, [pc, #368]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003542:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354a:	4959      	ldr	r1, [pc, #356]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800355e:	4b54      	ldr	r3, [pc, #336]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003564:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356c:	4950      	ldr	r1, [pc, #320]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003580:	4b4b      	ldr	r3, [pc, #300]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003586:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358e:	4948      	ldr	r1, [pc, #288]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035a2:	4b43      	ldr	r3, [pc, #268]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	493f      	ldr	r1, [pc, #252]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d028      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c4:	4b3a      	ldr	r3, [pc, #232]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035d2:	4937      	ldr	r1, [pc, #220]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035e2:	d106      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e4:	4b32      	ldr	r3, [pc, #200]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a31      	ldr	r2, [pc, #196]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ee:	60d3      	str	r3, [r2, #12]
 80035f0:	e011      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035fa:	d10c      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3304      	adds	r3, #4
 8003600:	2101      	movs	r1, #1
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f8c8 	bl	8003798 <RCCEx_PLLSAI1_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d028      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003622:	4b23      	ldr	r3, [pc, #140]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003628:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003630:	491f      	ldr	r1, [pc, #124]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003640:	d106      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003642:	4b1b      	ldr	r3, [pc, #108]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4a1a      	ldr	r2, [pc, #104]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800364c:	60d3      	str	r3, [r2, #12]
 800364e:	e011      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003658:	d10c      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3304      	adds	r3, #4
 800365e:	2101      	movs	r1, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f899 	bl	8003798 <RCCEx_PLLSAI1_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d02b      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003680:	4b0b      	ldr	r3, [pc, #44]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003686:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800368e:	4908      	ldr	r1, [pc, #32]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800369a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800369e:	d109      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a0:	4b03      	ldr	r3, [pc, #12]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a02      	ldr	r2, [pc, #8]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036aa:	60d3      	str	r3, [r2, #12]
 80036ac:	e014      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2101      	movs	r1, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f867 	bl	8003798 <RCCEx_PLLSAI1_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ce:	7cfb      	ldrb	r3, [r7, #19]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036d4:	7cfb      	ldrb	r3, [r7, #19]
 80036d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d02f      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036f2:	4928      	ldr	r1, [pc, #160]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003702:	d10d      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	2102      	movs	r1, #2
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f844 	bl	8003798 <RCCEx_PLLSAI1_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d014      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	74bb      	strb	r3, [r7, #18]
 800371e:	e011      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003728:	d10c      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3320      	adds	r3, #32
 800372e:	2102      	movs	r1, #2
 8003730:	4618      	mov	r0, r3
 8003732:	f000 f925 	bl	8003980 <RCCEx_PLLSAI2_Config>
 8003736:	4603      	mov	r3, r0
 8003738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800373a:	7cfb      	ldrb	r3, [r7, #19]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003750:	4b10      	ldr	r3, [pc, #64]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003756:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800375e:	490d      	ldr	r1, [pc, #52]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003772:	4b08      	ldr	r3, [pc, #32]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003778:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003782:	4904      	ldr	r1, [pc, #16]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800378a:	7cbb      	ldrb	r3, [r7, #18]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000

08003798 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037a6:	4b75      	ldr	r3, [pc, #468]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d018      	beq.n	80037e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037b2:	4b72      	ldr	r3, [pc, #456]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0203 	and.w	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d10d      	bne.n	80037de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
       ||
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037ca:	4b6c      	ldr	r3, [pc, #432]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
       ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d047      	beq.n	800386e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
 80037e2:	e044      	b.n	800386e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d018      	beq.n	800381e <RCCEx_PLLSAI1_Config+0x86>
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d825      	bhi.n	800383c <RCCEx_PLLSAI1_Config+0xa4>
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d002      	beq.n	80037fa <RCCEx_PLLSAI1_Config+0x62>
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d009      	beq.n	800380c <RCCEx_PLLSAI1_Config+0x74>
 80037f8:	e020      	b.n	800383c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037fa:	4b60      	ldr	r3, [pc, #384]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11d      	bne.n	8003842 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380a:	e01a      	b.n	8003842 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800380c:	4b5b      	ldr	r3, [pc, #364]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003814:	2b00      	cmp	r3, #0
 8003816:	d116      	bne.n	8003846 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381c:	e013      	b.n	8003846 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800381e:	4b57      	ldr	r3, [pc, #348]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10f      	bne.n	800384a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800382a:	4b54      	ldr	r3, [pc, #336]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800383a:	e006      	b.n	800384a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      break;
 8003840:	e004      	b.n	800384c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003842:	bf00      	nop
 8003844:	e002      	b.n	800384c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800384a:	bf00      	nop
    }

    if(status == HAL_OK)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10d      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003852:	4b4a      	ldr	r3, [pc, #296]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	430b      	orrs	r3, r1
 8003868:	4944      	ldr	r1, [pc, #272]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d17d      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003874:	4b41      	ldr	r3, [pc, #260]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a40      	ldr	r2, [pc, #256]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800387a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800387e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003880:	f7fd fc90 	bl	80011a4 <HAL_GetTick>
 8003884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003886:	e009      	b.n	800389c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003888:	f7fd fc8c 	bl	80011a4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d902      	bls.n	800389c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	73fb      	strb	r3, [r7, #15]
        break;
 800389a:	e005      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800389c:	4b37      	ldr	r3, [pc, #220]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ef      	bne.n	8003888 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d160      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d111      	bne.n	80038d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038b4:	4b31      	ldr	r3, [pc, #196]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6892      	ldr	r2, [r2, #8]
 80038c4:	0211      	lsls	r1, r2, #8
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68d2      	ldr	r2, [r2, #12]
 80038ca:	0912      	lsrs	r2, r2, #4
 80038cc:	0452      	lsls	r2, r2, #17
 80038ce:	430a      	orrs	r2, r1
 80038d0:	492a      	ldr	r1, [pc, #168]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	610b      	str	r3, [r1, #16]
 80038d6:	e027      	b.n	8003928 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d112      	bne.n	8003904 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038de:	4b27      	ldr	r3, [pc, #156]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80038e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6892      	ldr	r2, [r2, #8]
 80038ee:	0211      	lsls	r1, r2, #8
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6912      	ldr	r2, [r2, #16]
 80038f4:	0852      	lsrs	r2, r2, #1
 80038f6:	3a01      	subs	r2, #1
 80038f8:	0552      	lsls	r2, r2, #21
 80038fa:	430a      	orrs	r2, r1
 80038fc:	491f      	ldr	r1, [pc, #124]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	610b      	str	r3, [r1, #16]
 8003902:	e011      	b.n	8003928 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003904:	4b1d      	ldr	r3, [pc, #116]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800390c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6892      	ldr	r2, [r2, #8]
 8003914:	0211      	lsls	r1, r2, #8
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6952      	ldr	r2, [r2, #20]
 800391a:	0852      	lsrs	r2, r2, #1
 800391c:	3a01      	subs	r2, #1
 800391e:	0652      	lsls	r2, r2, #25
 8003920:	430a      	orrs	r2, r1
 8003922:	4916      	ldr	r1, [pc, #88]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003928:	4b14      	ldr	r3, [pc, #80]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a13      	ldr	r2, [pc, #76]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003932:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fd fc36 	bl	80011a4 <HAL_GetTick>
 8003938:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800393a:	e009      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800393c:	f7fd fc32 	bl	80011a4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d902      	bls.n	8003950 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	73fb      	strb	r3, [r7, #15]
          break;
 800394e:	e005      	b.n	800395c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003950:	4b0a      	ldr	r3, [pc, #40]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ef      	beq.n	800393c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003962:	4b06      	ldr	r3, [pc, #24]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	4904      	ldr	r1, [pc, #16]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000

08003980 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800398e:	4b6a      	ldr	r3, [pc, #424]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800399a:	4b67      	ldr	r3, [pc, #412]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0203 	and.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d10d      	bne.n	80039c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
       ||
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039b2:	4b61      	ldr	r3, [pc, #388]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
       ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d047      	beq.n	8003a56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	e044      	b.n	8003a56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d018      	beq.n	8003a06 <RCCEx_PLLSAI2_Config+0x86>
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d825      	bhi.n	8003a24 <RCCEx_PLLSAI2_Config+0xa4>
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d002      	beq.n	80039e2 <RCCEx_PLLSAI2_Config+0x62>
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d009      	beq.n	80039f4 <RCCEx_PLLSAI2_Config+0x74>
 80039e0:	e020      	b.n	8003a24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039e2:	4b55      	ldr	r3, [pc, #340]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d11d      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f2:	e01a      	b.n	8003a2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039f4:	4b50      	ldr	r3, [pc, #320]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d116      	bne.n	8003a2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a04:	e013      	b.n	8003a2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a06:	4b4c      	ldr	r3, [pc, #304]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10f      	bne.n	8003a32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a12:	4b49      	ldr	r3, [pc, #292]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a22:	e006      	b.n	8003a32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      break;
 8003a28:	e004      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e002      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e000      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a32:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10d      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6819      	ldr	r1, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	4939      	ldr	r1, [pc, #228]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d167      	bne.n	8003b2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a5c:	4b36      	ldr	r3, [pc, #216]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a35      	ldr	r2, [pc, #212]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a68:	f7fd fb9c 	bl	80011a4 <HAL_GetTick>
 8003a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a6e:	e009      	b.n	8003a84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a70:	f7fd fb98 	bl	80011a4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d902      	bls.n	8003a84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	73fb      	strb	r3, [r7, #15]
        break;
 8003a82:	e005      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a84:	4b2c      	ldr	r3, [pc, #176]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ef      	bne.n	8003a70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d14a      	bne.n	8003b2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d111      	bne.n	8003ac0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a9c:	4b26      	ldr	r3, [pc, #152]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6892      	ldr	r2, [r2, #8]
 8003aac:	0211      	lsls	r1, r2, #8
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68d2      	ldr	r2, [r2, #12]
 8003ab2:	0912      	lsrs	r2, r2, #4
 8003ab4:	0452      	lsls	r2, r2, #17
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	491f      	ldr	r1, [pc, #124]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	614b      	str	r3, [r1, #20]
 8003abe:	e011      	b.n	8003ae4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ac8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6892      	ldr	r2, [r2, #8]
 8003ad0:	0211      	lsls	r1, r2, #8
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6912      	ldr	r2, [r2, #16]
 8003ad6:	0852      	lsrs	r2, r2, #1
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	0652      	lsls	r2, r2, #25
 8003adc:	430a      	orrs	r2, r1
 8003ade:	4916      	ldr	r1, [pc, #88]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ae4:	4b14      	ldr	r3, [pc, #80]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a13      	ldr	r2, [pc, #76]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fd fb58 	bl	80011a4 <HAL_GetTick>
 8003af4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003af6:	e009      	b.n	8003b0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003af8:	f7fd fb54 	bl	80011a4 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d902      	bls.n	8003b0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	73fb      	strb	r3, [r7, #15]
          break;
 8003b0a:	e005      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ef      	beq.n	8003af8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	4904      	ldr	r1, [pc, #16]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000

08003b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e040      	b.n	8003bd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fd fa2a 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2224      	movs	r2, #36	@ 0x24
 8003b68:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fb6a 	bl	800425c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f8af 	bl	8003cec <UART_SetConfig>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e01b      	b.n	8003bd0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ba6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fbe9 	bl	80043a0 <UART_CheckIdleState>
 8003bce:	4603      	mov	r3, r0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	@ 0x28
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d177      	bne.n	8003ce0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_UART_Transmit+0x24>
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e070      	b.n	8003ce2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2221      	movs	r2, #33	@ 0x21
 8003c0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c0e:	f7fd fac9 	bl	80011a4 <HAL_GetTick>
 8003c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	88fa      	ldrh	r2, [r7, #6]
 8003c18:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c2c:	d108      	bne.n	8003c40 <HAL_UART_Transmit+0x68>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d104      	bne.n	8003c40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	e003      	b.n	8003c48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c48:	e02f      	b.n	8003caa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2200      	movs	r2, #0
 8003c52:	2180      	movs	r1, #128	@ 0x80
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fc4b 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d004      	beq.n	8003c6a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e03b      	b.n	8003ce2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	881a      	ldrh	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c7c:	b292      	uxth	r2, r2
 8003c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	3302      	adds	r3, #2
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	e007      	b.n	8003c98 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	781a      	ldrb	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1c9      	bne.n	8003c4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2140      	movs	r1, #64	@ 0x40
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fc15 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e005      	b.n	8003ce2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf0:	b08a      	sub	sp, #40	@ 0x28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4ba4      	ldr	r3, [pc, #656]	@ (8003fac <UART_SetConfig+0x2c0>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a99      	ldr	r2, [pc, #612]	@ (8003fb0 <UART_SetConfig+0x2c4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d004      	beq.n	8003d58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d54:	4313      	orrs	r3, r2
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a90      	ldr	r2, [pc, #576]	@ (8003fb4 <UART_SetConfig+0x2c8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d126      	bne.n	8003dc4 <UART_SetConfig+0xd8>
 8003d76:	4b90      	ldr	r3, [pc, #576]	@ (8003fb8 <UART_SetConfig+0x2cc>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d81b      	bhi.n	8003dbc <UART_SetConfig+0xd0>
 8003d84:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <UART_SetConfig+0xa0>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003dad 	.word	0x08003dad
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003db5 	.word	0x08003db5
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da2:	e116      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003da4:	2302      	movs	r3, #2
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003daa:	e112      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003dac:	2304      	movs	r3, #4
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db2:	e10e      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003db4:	2308      	movs	r3, #8
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dba:	e10a      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc2:	e106      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a7c      	ldr	r2, [pc, #496]	@ (8003fbc <UART_SetConfig+0x2d0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d138      	bne.n	8003e40 <UART_SetConfig+0x154>
 8003dce:	4b7a      	ldr	r3, [pc, #488]	@ (8003fb8 <UART_SetConfig+0x2cc>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	d82d      	bhi.n	8003e38 <UART_SetConfig+0x14c>
 8003ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8003de4 <UART_SetConfig+0xf8>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003e39 	.word	0x08003e39
 8003dec:	08003e39 	.word	0x08003e39
 8003df0:	08003e39 	.word	0x08003e39
 8003df4:	08003e29 	.word	0x08003e29
 8003df8:	08003e39 	.word	0x08003e39
 8003dfc:	08003e39 	.word	0x08003e39
 8003e00:	08003e39 	.word	0x08003e39
 8003e04:	08003e21 	.word	0x08003e21
 8003e08:	08003e39 	.word	0x08003e39
 8003e0c:	08003e39 	.word	0x08003e39
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e31 	.word	0x08003e31
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1e:	e0d8      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e20:	2302      	movs	r3, #2
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e26:	e0d4      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2e:	e0d0      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e30:	2308      	movs	r3, #8
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e36:	e0cc      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e38:	2310      	movs	r3, #16
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e3e:	e0c8      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a5e      	ldr	r2, [pc, #376]	@ (8003fc0 <UART_SetConfig+0x2d4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d125      	bne.n	8003e96 <UART_SetConfig+0x1aa>
 8003e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8003fb8 <UART_SetConfig+0x2cc>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e54:	2b30      	cmp	r3, #48	@ 0x30
 8003e56:	d016      	beq.n	8003e86 <UART_SetConfig+0x19a>
 8003e58:	2b30      	cmp	r3, #48	@ 0x30
 8003e5a:	d818      	bhi.n	8003e8e <UART_SetConfig+0x1a2>
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d00a      	beq.n	8003e76 <UART_SetConfig+0x18a>
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d814      	bhi.n	8003e8e <UART_SetConfig+0x1a2>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <UART_SetConfig+0x182>
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d008      	beq.n	8003e7e <UART_SetConfig+0x192>
 8003e6c:	e00f      	b.n	8003e8e <UART_SetConfig+0x1a2>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e74:	e0ad      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e76:	2302      	movs	r3, #2
 8003e78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7c:	e0a9      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e7e:	2304      	movs	r3, #4
 8003e80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e84:	e0a5      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e86:	2308      	movs	r3, #8
 8003e88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8c:	e0a1      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e8e:	2310      	movs	r3, #16
 8003e90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e94:	e09d      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a4a      	ldr	r2, [pc, #296]	@ (8003fc4 <UART_SetConfig+0x2d8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d125      	bne.n	8003eec <UART_SetConfig+0x200>
 8003ea0:	4b45      	ldr	r3, [pc, #276]	@ (8003fb8 <UART_SetConfig+0x2cc>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003eaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003eac:	d016      	beq.n	8003edc <UART_SetConfig+0x1f0>
 8003eae:	2bc0      	cmp	r3, #192	@ 0xc0
 8003eb0:	d818      	bhi.n	8003ee4 <UART_SetConfig+0x1f8>
 8003eb2:	2b80      	cmp	r3, #128	@ 0x80
 8003eb4:	d00a      	beq.n	8003ecc <UART_SetConfig+0x1e0>
 8003eb6:	2b80      	cmp	r3, #128	@ 0x80
 8003eb8:	d814      	bhi.n	8003ee4 <UART_SetConfig+0x1f8>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <UART_SetConfig+0x1d8>
 8003ebe:	2b40      	cmp	r3, #64	@ 0x40
 8003ec0:	d008      	beq.n	8003ed4 <UART_SetConfig+0x1e8>
 8003ec2:	e00f      	b.n	8003ee4 <UART_SetConfig+0x1f8>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eca:	e082      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed2:	e07e      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eda:	e07a      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003edc:	2308      	movs	r3, #8
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee2:	e076      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eea:	e072      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a35      	ldr	r2, [pc, #212]	@ (8003fc8 <UART_SetConfig+0x2dc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d12a      	bne.n	8003f4c <UART_SetConfig+0x260>
 8003ef6:	4b30      	ldr	r3, [pc, #192]	@ (8003fb8 <UART_SetConfig+0x2cc>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f04:	d01a      	beq.n	8003f3c <UART_SetConfig+0x250>
 8003f06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f0a:	d81b      	bhi.n	8003f44 <UART_SetConfig+0x258>
 8003f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f10:	d00c      	beq.n	8003f2c <UART_SetConfig+0x240>
 8003f12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f16:	d815      	bhi.n	8003f44 <UART_SetConfig+0x258>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <UART_SetConfig+0x238>
 8003f1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f20:	d008      	beq.n	8003f34 <UART_SetConfig+0x248>
 8003f22:	e00f      	b.n	8003f44 <UART_SetConfig+0x258>
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2a:	e052      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f32:	e04e      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f34:	2304      	movs	r3, #4
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3a:	e04a      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f42:	e046      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f4a:	e042      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a17      	ldr	r2, [pc, #92]	@ (8003fb0 <UART_SetConfig+0x2c4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d13a      	bne.n	8003fcc <UART_SetConfig+0x2e0>
 8003f56:	4b18      	ldr	r3, [pc, #96]	@ (8003fb8 <UART_SetConfig+0x2cc>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f64:	d01a      	beq.n	8003f9c <UART_SetConfig+0x2b0>
 8003f66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f6a:	d81b      	bhi.n	8003fa4 <UART_SetConfig+0x2b8>
 8003f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f70:	d00c      	beq.n	8003f8c <UART_SetConfig+0x2a0>
 8003f72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f76:	d815      	bhi.n	8003fa4 <UART_SetConfig+0x2b8>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <UART_SetConfig+0x298>
 8003f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f80:	d008      	beq.n	8003f94 <UART_SetConfig+0x2a8>
 8003f82:	e00f      	b.n	8003fa4 <UART_SetConfig+0x2b8>
 8003f84:	2300      	movs	r3, #0
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f8a:	e022      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f92:	e01e      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f94:	2304      	movs	r3, #4
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9a:	e01a      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa2:	e016      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003faa:	e012      	b.n	8003fd2 <UART_SetConfig+0x2e6>
 8003fac:	efff69f3 	.word	0xefff69f3
 8003fb0:	40008000 	.word	0x40008000
 8003fb4:	40013800 	.word	0x40013800
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40004400 	.word	0x40004400
 8003fc0:	40004800 	.word	0x40004800
 8003fc4:	40004c00 	.word	0x40004c00
 8003fc8:	40005000 	.word	0x40005000
 8003fcc:	2310      	movs	r3, #16
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a9f      	ldr	r2, [pc, #636]	@ (8004254 <UART_SetConfig+0x568>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d17a      	bne.n	80040d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d824      	bhi.n	800402e <UART_SetConfig+0x342>
 8003fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <UART_SetConfig+0x300>)
 8003fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fea:	bf00      	nop
 8003fec:	08004011 	.word	0x08004011
 8003ff0:	0800402f 	.word	0x0800402f
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	0800402f 	.word	0x0800402f
 8003ffc:	0800401f 	.word	0x0800401f
 8004000:	0800402f 	.word	0x0800402f
 8004004:	0800402f 	.word	0x0800402f
 8004008:	0800402f 	.word	0x0800402f
 800400c:	08004027 	.word	0x08004027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004010:	f7ff f84c 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8004014:	61f8      	str	r0, [r7, #28]
        break;
 8004016:	e010      	b.n	800403a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004018:	4b8f      	ldr	r3, [pc, #572]	@ (8004258 <UART_SetConfig+0x56c>)
 800401a:	61fb      	str	r3, [r7, #28]
        break;
 800401c:	e00d      	b.n	800403a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401e:	f7fe ffad 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8004022:	61f8      	str	r0, [r7, #28]
        break;
 8004024:	e009      	b.n	800403a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800402a:	61fb      	str	r3, [r7, #28]
        break;
 800402c:	e005      	b.n	800403a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004038:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80fb 	beq.w	8004238 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4413      	add	r3, r2
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	429a      	cmp	r2, r3
 8004050:	d305      	bcc.n	800405e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	429a      	cmp	r2, r3
 800405c:	d903      	bls.n	8004066 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004064:	e0e8      	b.n	8004238 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2200      	movs	r2, #0
 800406a:	461c      	mov	r4, r3
 800406c:	4615      	mov	r5, r2
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	022b      	lsls	r3, r5, #8
 8004078:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800407c:	0222      	lsls	r2, r4, #8
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	6849      	ldr	r1, [r1, #4]
 8004082:	0849      	lsrs	r1, r1, #1
 8004084:	2000      	movs	r0, #0
 8004086:	4688      	mov	r8, r1
 8004088:	4681      	mov	r9, r0
 800408a:	eb12 0a08 	adds.w	sl, r2, r8
 800408e:	eb43 0b09 	adc.w	fp, r3, r9
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	603b      	str	r3, [r7, #0]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040a0:	4650      	mov	r0, sl
 80040a2:	4659      	mov	r1, fp
 80040a4:	f7fc f8e4 	bl	8000270 <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4613      	mov	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040b6:	d308      	bcc.n	80040ca <UART_SetConfig+0x3de>
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040be:	d204      	bcs.n	80040ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	60da      	str	r2, [r3, #12]
 80040c8:	e0b6      	b.n	8004238 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040d0:	e0b2      	b.n	8004238 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040da:	d15e      	bne.n	800419a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80040dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d828      	bhi.n	8004136 <UART_SetConfig+0x44a>
 80040e4:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <UART_SetConfig+0x400>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004121 	.word	0x08004121
 80040f8:	08004137 	.word	0x08004137
 80040fc:	08004127 	.word	0x08004127
 8004100:	08004137 	.word	0x08004137
 8004104:	08004137 	.word	0x08004137
 8004108:	08004137 	.word	0x08004137
 800410c:	0800412f 	.word	0x0800412f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe ffcc 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8004114:	61f8      	str	r0, [r7, #28]
        break;
 8004116:	e014      	b.n	8004142 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7fe ffde 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 800411c:	61f8      	str	r0, [r7, #28]
        break;
 800411e:	e010      	b.n	8004142 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004120:	4b4d      	ldr	r3, [pc, #308]	@ (8004258 <UART_SetConfig+0x56c>)
 8004122:	61fb      	str	r3, [r7, #28]
        break;
 8004124:	e00d      	b.n	8004142 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004126:	f7fe ff29 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 800412a:	61f8      	str	r0, [r7, #28]
        break;
 800412c:	e009      	b.n	8004142 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004132:	61fb      	str	r3, [r7, #28]
        break;
 8004134:	e005      	b.n	8004142 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004140:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d077      	beq.n	8004238 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	005a      	lsls	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	441a      	add	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	fbb2 f3f3 	udiv	r3, r2, r3
 800415c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b0f      	cmp	r3, #15
 8004162:	d916      	bls.n	8004192 <UART_SetConfig+0x4a6>
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416a:	d212      	bcs.n	8004192 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f023 030f 	bic.w	r3, r3, #15
 8004174:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	b29b      	uxth	r3, r3
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	b29a      	uxth	r2, r3
 8004182:	8afb      	ldrh	r3, [r7, #22]
 8004184:	4313      	orrs	r3, r2
 8004186:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	8afa      	ldrh	r2, [r7, #22]
 800418e:	60da      	str	r2, [r3, #12]
 8004190:	e052      	b.n	8004238 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004198:	e04e      	b.n	8004238 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800419a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d827      	bhi.n	80041f2 <UART_SetConfig+0x506>
 80041a2:	a201      	add	r2, pc, #4	@ (adr r2, 80041a8 <UART_SetConfig+0x4bc>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041d5 	.word	0x080041d5
 80041b0:	080041dd 	.word	0x080041dd
 80041b4:	080041f3 	.word	0x080041f3
 80041b8:	080041e3 	.word	0x080041e3
 80041bc:	080041f3 	.word	0x080041f3
 80041c0:	080041f3 	.word	0x080041f3
 80041c4:	080041f3 	.word	0x080041f3
 80041c8:	080041eb 	.word	0x080041eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041cc:	f7fe ff6e 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 80041d0:	61f8      	str	r0, [r7, #28]
        break;
 80041d2:	e014      	b.n	80041fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d4:	f7fe ff80 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 80041d8:	61f8      	str	r0, [r7, #28]
        break;
 80041da:	e010      	b.n	80041fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004258 <UART_SetConfig+0x56c>)
 80041de:	61fb      	str	r3, [r7, #28]
        break;
 80041e0:	e00d      	b.n	80041fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041e2:	f7fe fecb 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 80041e6:	61f8      	str	r0, [r7, #28]
        break;
 80041e8:	e009      	b.n	80041fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ee:	61fb      	str	r3, [r7, #28]
        break;
 80041f0:	e005      	b.n	80041fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80041fc:	bf00      	nop
    }

    if (pclk != 0U)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d019      	beq.n	8004238 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	085a      	lsrs	r2, r3, #1
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	441a      	add	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	fbb2 f3f3 	udiv	r3, r2, r3
 8004216:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b0f      	cmp	r3, #15
 800421c:	d909      	bls.n	8004232 <UART_SetConfig+0x546>
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004224:	d205      	bcs.n	8004232 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60da      	str	r2, [r3, #12]
 8004230:	e002      	b.n	8004238 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004244:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004248:	4618      	mov	r0, r3
 800424a:	3728      	adds	r7, #40	@ 0x28
 800424c:	46bd      	mov	sp, r7
 800424e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004252:	bf00      	nop
 8004254:	40008000 	.word	0x40008000
 8004258:	00f42400 	.word	0x00f42400

0800425c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01a      	beq.n	8004372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800435a:	d10a      	bne.n	8004372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	605a      	str	r2, [r3, #4]
  }
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b098      	sub	sp, #96	@ 0x60
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043b0:	f7fc fef8 	bl	80011a4 <HAL_GetTick>
 80043b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d12e      	bne.n	8004422 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043cc:	2200      	movs	r2, #0
 80043ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f88c 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d021      	beq.n	8004422 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004402:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800440a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e6      	bne.n	80043de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e062      	b.n	80044e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b04      	cmp	r3, #4
 800442e:	d149      	bne.n	80044c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004430:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004438:	2200      	movs	r2, #0
 800443a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f856 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d03c      	beq.n	80044c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	623b      	str	r3, [r7, #32]
   return(result);
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800445e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004468:	633b      	str	r3, [r7, #48]	@ 0x30
 800446a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800446e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3308      	adds	r3, #8
 8004482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	60fb      	str	r3, [r7, #12]
   return(result);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800449c:	61fa      	str	r2, [r7, #28]
 800449e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	69b9      	ldr	r1, [r7, #24]
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	617b      	str	r3, [r7, #20]
   return(result);
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e5      	bne.n	800447c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e011      	b.n	80044e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3758      	adds	r7, #88	@ 0x58
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004500:	e04f      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d04b      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fc fe4b 	bl	80011a4 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <UART_WaitOnFlagUntilTimeout+0x30>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e04e      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d037      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b80      	cmp	r3, #128	@ 0x80
 8004536:	d034      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b40      	cmp	r3, #64	@ 0x40
 800453c:	d031      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b08      	cmp	r3, #8
 800454a:	d110      	bne.n	800456e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2208      	movs	r2, #8
 8004552:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f838 	bl	80045ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2208      	movs	r2, #8
 800455e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e029      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800457c:	d111      	bne.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f81e 	bl	80045ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e00f      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d0a0      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b095      	sub	sp, #84	@ 0x54
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e6      	bne.n	80045d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	61fb      	str	r3, [r7, #28]
   return(result);
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004624:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004626:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800462a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e5      	bne.n	8004604 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463c:	2b01      	cmp	r3, #1
 800463e:	d118      	bne.n	8004672 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	60bb      	str	r3, [r7, #8]
   return(result);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f023 0310 	bic.w	r3, r3, #16
 8004654:	647b      	str	r3, [r7, #68]	@ 0x44
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6979      	ldr	r1, [r7, #20]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	613b      	str	r3, [r7, #16]
   return(result);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e6      	bne.n	8004640 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004686:	bf00      	nop
 8004688:	3754      	adds	r7, #84	@ 0x54
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <siprintf>:
 8004694:	b40e      	push	{r1, r2, r3}
 8004696:	b500      	push	{lr}
 8004698:	b09c      	sub	sp, #112	@ 0x70
 800469a:	ab1d      	add	r3, sp, #116	@ 0x74
 800469c:	9002      	str	r0, [sp, #8]
 800469e:	9006      	str	r0, [sp, #24]
 80046a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046a4:	4809      	ldr	r0, [pc, #36]	@ (80046cc <siprintf+0x38>)
 80046a6:	9107      	str	r1, [sp, #28]
 80046a8:	9104      	str	r1, [sp, #16]
 80046aa:	4909      	ldr	r1, [pc, #36]	@ (80046d0 <siprintf+0x3c>)
 80046ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b0:	9105      	str	r1, [sp, #20]
 80046b2:	6800      	ldr	r0, [r0, #0]
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	a902      	add	r1, sp, #8
 80046b8:	f000 f994 	bl	80049e4 <_svfiprintf_r>
 80046bc:	9b02      	ldr	r3, [sp, #8]
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	b01c      	add	sp, #112	@ 0x70
 80046c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80046c8:	b003      	add	sp, #12
 80046ca:	4770      	bx	lr
 80046cc:	20000010 	.word	0x20000010
 80046d0:	ffff0208 	.word	0xffff0208

080046d4 <memset>:
 80046d4:	4402      	add	r2, r0
 80046d6:	4603      	mov	r3, r0
 80046d8:	4293      	cmp	r3, r2
 80046da:	d100      	bne.n	80046de <memset+0xa>
 80046dc:	4770      	bx	lr
 80046de:	f803 1b01 	strb.w	r1, [r3], #1
 80046e2:	e7f9      	b.n	80046d8 <memset+0x4>

080046e4 <__errno>:
 80046e4:	4b01      	ldr	r3, [pc, #4]	@ (80046ec <__errno+0x8>)
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000010 	.word	0x20000010

080046f0 <__libc_init_array>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004728 <__libc_init_array+0x38>)
 80046f4:	4c0d      	ldr	r4, [pc, #52]	@ (800472c <__libc_init_array+0x3c>)
 80046f6:	1b64      	subs	r4, r4, r5
 80046f8:	10a4      	asrs	r4, r4, #2
 80046fa:	2600      	movs	r6, #0
 80046fc:	42a6      	cmp	r6, r4
 80046fe:	d109      	bne.n	8004714 <__libc_init_array+0x24>
 8004700:	4d0b      	ldr	r5, [pc, #44]	@ (8004730 <__libc_init_array+0x40>)
 8004702:	4c0c      	ldr	r4, [pc, #48]	@ (8004734 <__libc_init_array+0x44>)
 8004704:	f000 fc66 	bl	8004fd4 <_init>
 8004708:	1b64      	subs	r4, r4, r5
 800470a:	10a4      	asrs	r4, r4, #2
 800470c:	2600      	movs	r6, #0
 800470e:	42a6      	cmp	r6, r4
 8004710:	d105      	bne.n	800471e <__libc_init_array+0x2e>
 8004712:	bd70      	pop	{r4, r5, r6, pc}
 8004714:	f855 3b04 	ldr.w	r3, [r5], #4
 8004718:	4798      	blx	r3
 800471a:	3601      	adds	r6, #1
 800471c:	e7ee      	b.n	80046fc <__libc_init_array+0xc>
 800471e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004722:	4798      	blx	r3
 8004724:	3601      	adds	r6, #1
 8004726:	e7f2      	b.n	800470e <__libc_init_array+0x1e>
 8004728:	080050e8 	.word	0x080050e8
 800472c:	080050e8 	.word	0x080050e8
 8004730:	080050e8 	.word	0x080050e8
 8004734:	080050ec 	.word	0x080050ec

08004738 <__retarget_lock_acquire_recursive>:
 8004738:	4770      	bx	lr

0800473a <__retarget_lock_release_recursive>:
 800473a:	4770      	bx	lr

0800473c <_free_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4605      	mov	r5, r0
 8004740:	2900      	cmp	r1, #0
 8004742:	d041      	beq.n	80047c8 <_free_r+0x8c>
 8004744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004748:	1f0c      	subs	r4, r1, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfb8      	it	lt
 800474e:	18e4      	addlt	r4, r4, r3
 8004750:	f000 f8e0 	bl	8004914 <__malloc_lock>
 8004754:	4a1d      	ldr	r2, [pc, #116]	@ (80047cc <_free_r+0x90>)
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	b933      	cbnz	r3, 8004768 <_free_r+0x2c>
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	6014      	str	r4, [r2, #0]
 800475e:	4628      	mov	r0, r5
 8004760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004764:	f000 b8dc 	b.w	8004920 <__malloc_unlock>
 8004768:	42a3      	cmp	r3, r4
 800476a:	d908      	bls.n	800477e <_free_r+0x42>
 800476c:	6820      	ldr	r0, [r4, #0]
 800476e:	1821      	adds	r1, r4, r0
 8004770:	428b      	cmp	r3, r1
 8004772:	bf01      	itttt	eq
 8004774:	6819      	ldreq	r1, [r3, #0]
 8004776:	685b      	ldreq	r3, [r3, #4]
 8004778:	1809      	addeq	r1, r1, r0
 800477a:	6021      	streq	r1, [r4, #0]
 800477c:	e7ed      	b.n	800475a <_free_r+0x1e>
 800477e:	461a      	mov	r2, r3
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b10b      	cbz	r3, 8004788 <_free_r+0x4c>
 8004784:	42a3      	cmp	r3, r4
 8004786:	d9fa      	bls.n	800477e <_free_r+0x42>
 8004788:	6811      	ldr	r1, [r2, #0]
 800478a:	1850      	adds	r0, r2, r1
 800478c:	42a0      	cmp	r0, r4
 800478e:	d10b      	bne.n	80047a8 <_free_r+0x6c>
 8004790:	6820      	ldr	r0, [r4, #0]
 8004792:	4401      	add	r1, r0
 8004794:	1850      	adds	r0, r2, r1
 8004796:	4283      	cmp	r3, r0
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	d1e0      	bne.n	800475e <_free_r+0x22>
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	6053      	str	r3, [r2, #4]
 80047a2:	4408      	add	r0, r1
 80047a4:	6010      	str	r0, [r2, #0]
 80047a6:	e7da      	b.n	800475e <_free_r+0x22>
 80047a8:	d902      	bls.n	80047b0 <_free_r+0x74>
 80047aa:	230c      	movs	r3, #12
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	e7d6      	b.n	800475e <_free_r+0x22>
 80047b0:	6820      	ldr	r0, [r4, #0]
 80047b2:	1821      	adds	r1, r4, r0
 80047b4:	428b      	cmp	r3, r1
 80047b6:	bf04      	itt	eq
 80047b8:	6819      	ldreq	r1, [r3, #0]
 80047ba:	685b      	ldreq	r3, [r3, #4]
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	bf04      	itt	eq
 80047c0:	1809      	addeq	r1, r1, r0
 80047c2:	6021      	streq	r1, [r4, #0]
 80047c4:	6054      	str	r4, [r2, #4]
 80047c6:	e7ca      	b.n	800475e <_free_r+0x22>
 80047c8:	bd38      	pop	{r3, r4, r5, pc}
 80047ca:	bf00      	nop
 80047cc:	200002b0 	.word	0x200002b0

080047d0 <sbrk_aligned>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	4e0f      	ldr	r6, [pc, #60]	@ (8004810 <sbrk_aligned+0x40>)
 80047d4:	460c      	mov	r4, r1
 80047d6:	6831      	ldr	r1, [r6, #0]
 80047d8:	4605      	mov	r5, r0
 80047da:	b911      	cbnz	r1, 80047e2 <sbrk_aligned+0x12>
 80047dc:	f000 fba6 	bl	8004f2c <_sbrk_r>
 80047e0:	6030      	str	r0, [r6, #0]
 80047e2:	4621      	mov	r1, r4
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 fba1 	bl	8004f2c <_sbrk_r>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	d103      	bne.n	80047f6 <sbrk_aligned+0x26>
 80047ee:	f04f 34ff 	mov.w	r4, #4294967295
 80047f2:	4620      	mov	r0, r4
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
 80047f6:	1cc4      	adds	r4, r0, #3
 80047f8:	f024 0403 	bic.w	r4, r4, #3
 80047fc:	42a0      	cmp	r0, r4
 80047fe:	d0f8      	beq.n	80047f2 <sbrk_aligned+0x22>
 8004800:	1a21      	subs	r1, r4, r0
 8004802:	4628      	mov	r0, r5
 8004804:	f000 fb92 	bl	8004f2c <_sbrk_r>
 8004808:	3001      	adds	r0, #1
 800480a:	d1f2      	bne.n	80047f2 <sbrk_aligned+0x22>
 800480c:	e7ef      	b.n	80047ee <sbrk_aligned+0x1e>
 800480e:	bf00      	nop
 8004810:	200002ac 	.word	0x200002ac

08004814 <_malloc_r>:
 8004814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004818:	1ccd      	adds	r5, r1, #3
 800481a:	f025 0503 	bic.w	r5, r5, #3
 800481e:	3508      	adds	r5, #8
 8004820:	2d0c      	cmp	r5, #12
 8004822:	bf38      	it	cc
 8004824:	250c      	movcc	r5, #12
 8004826:	2d00      	cmp	r5, #0
 8004828:	4606      	mov	r6, r0
 800482a:	db01      	blt.n	8004830 <_malloc_r+0x1c>
 800482c:	42a9      	cmp	r1, r5
 800482e:	d904      	bls.n	800483a <_malloc_r+0x26>
 8004830:	230c      	movs	r3, #12
 8004832:	6033      	str	r3, [r6, #0]
 8004834:	2000      	movs	r0, #0
 8004836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800483a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004910 <_malloc_r+0xfc>
 800483e:	f000 f869 	bl	8004914 <__malloc_lock>
 8004842:	f8d8 3000 	ldr.w	r3, [r8]
 8004846:	461c      	mov	r4, r3
 8004848:	bb44      	cbnz	r4, 800489c <_malloc_r+0x88>
 800484a:	4629      	mov	r1, r5
 800484c:	4630      	mov	r0, r6
 800484e:	f7ff ffbf 	bl	80047d0 <sbrk_aligned>
 8004852:	1c43      	adds	r3, r0, #1
 8004854:	4604      	mov	r4, r0
 8004856:	d158      	bne.n	800490a <_malloc_r+0xf6>
 8004858:	f8d8 4000 	ldr.w	r4, [r8]
 800485c:	4627      	mov	r7, r4
 800485e:	2f00      	cmp	r7, #0
 8004860:	d143      	bne.n	80048ea <_malloc_r+0xd6>
 8004862:	2c00      	cmp	r4, #0
 8004864:	d04b      	beq.n	80048fe <_malloc_r+0xea>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	4639      	mov	r1, r7
 800486a:	4630      	mov	r0, r6
 800486c:	eb04 0903 	add.w	r9, r4, r3
 8004870:	f000 fb5c 	bl	8004f2c <_sbrk_r>
 8004874:	4581      	cmp	r9, r0
 8004876:	d142      	bne.n	80048fe <_malloc_r+0xea>
 8004878:	6821      	ldr	r1, [r4, #0]
 800487a:	1a6d      	subs	r5, r5, r1
 800487c:	4629      	mov	r1, r5
 800487e:	4630      	mov	r0, r6
 8004880:	f7ff ffa6 	bl	80047d0 <sbrk_aligned>
 8004884:	3001      	adds	r0, #1
 8004886:	d03a      	beq.n	80048fe <_malloc_r+0xea>
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	442b      	add	r3, r5
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	f8d8 3000 	ldr.w	r3, [r8]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	bb62      	cbnz	r2, 80048f0 <_malloc_r+0xdc>
 8004896:	f8c8 7000 	str.w	r7, [r8]
 800489a:	e00f      	b.n	80048bc <_malloc_r+0xa8>
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	1b52      	subs	r2, r2, r5
 80048a0:	d420      	bmi.n	80048e4 <_malloc_r+0xd0>
 80048a2:	2a0b      	cmp	r2, #11
 80048a4:	d917      	bls.n	80048d6 <_malloc_r+0xc2>
 80048a6:	1961      	adds	r1, r4, r5
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	6025      	str	r5, [r4, #0]
 80048ac:	bf18      	it	ne
 80048ae:	6059      	strne	r1, [r3, #4]
 80048b0:	6863      	ldr	r3, [r4, #4]
 80048b2:	bf08      	it	eq
 80048b4:	f8c8 1000 	streq.w	r1, [r8]
 80048b8:	5162      	str	r2, [r4, r5]
 80048ba:	604b      	str	r3, [r1, #4]
 80048bc:	4630      	mov	r0, r6
 80048be:	f000 f82f 	bl	8004920 <__malloc_unlock>
 80048c2:	f104 000b 	add.w	r0, r4, #11
 80048c6:	1d23      	adds	r3, r4, #4
 80048c8:	f020 0007 	bic.w	r0, r0, #7
 80048cc:	1ac2      	subs	r2, r0, r3
 80048ce:	bf1c      	itt	ne
 80048d0:	1a1b      	subne	r3, r3, r0
 80048d2:	50a3      	strne	r3, [r4, r2]
 80048d4:	e7af      	b.n	8004836 <_malloc_r+0x22>
 80048d6:	6862      	ldr	r2, [r4, #4]
 80048d8:	42a3      	cmp	r3, r4
 80048da:	bf0c      	ite	eq
 80048dc:	f8c8 2000 	streq.w	r2, [r8]
 80048e0:	605a      	strne	r2, [r3, #4]
 80048e2:	e7eb      	b.n	80048bc <_malloc_r+0xa8>
 80048e4:	4623      	mov	r3, r4
 80048e6:	6864      	ldr	r4, [r4, #4]
 80048e8:	e7ae      	b.n	8004848 <_malloc_r+0x34>
 80048ea:	463c      	mov	r4, r7
 80048ec:	687f      	ldr	r7, [r7, #4]
 80048ee:	e7b6      	b.n	800485e <_malloc_r+0x4a>
 80048f0:	461a      	mov	r2, r3
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	d1fb      	bne.n	80048f0 <_malloc_r+0xdc>
 80048f8:	2300      	movs	r3, #0
 80048fa:	6053      	str	r3, [r2, #4]
 80048fc:	e7de      	b.n	80048bc <_malloc_r+0xa8>
 80048fe:	230c      	movs	r3, #12
 8004900:	6033      	str	r3, [r6, #0]
 8004902:	4630      	mov	r0, r6
 8004904:	f000 f80c 	bl	8004920 <__malloc_unlock>
 8004908:	e794      	b.n	8004834 <_malloc_r+0x20>
 800490a:	6005      	str	r5, [r0, #0]
 800490c:	e7d6      	b.n	80048bc <_malloc_r+0xa8>
 800490e:	bf00      	nop
 8004910:	200002b0 	.word	0x200002b0

08004914 <__malloc_lock>:
 8004914:	4801      	ldr	r0, [pc, #4]	@ (800491c <__malloc_lock+0x8>)
 8004916:	f7ff bf0f 	b.w	8004738 <__retarget_lock_acquire_recursive>
 800491a:	bf00      	nop
 800491c:	200002a8 	.word	0x200002a8

08004920 <__malloc_unlock>:
 8004920:	4801      	ldr	r0, [pc, #4]	@ (8004928 <__malloc_unlock+0x8>)
 8004922:	f7ff bf0a 	b.w	800473a <__retarget_lock_release_recursive>
 8004926:	bf00      	nop
 8004928:	200002a8 	.word	0x200002a8

0800492c <__ssputs_r>:
 800492c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	688e      	ldr	r6, [r1, #8]
 8004932:	461f      	mov	r7, r3
 8004934:	42be      	cmp	r6, r7
 8004936:	680b      	ldr	r3, [r1, #0]
 8004938:	4682      	mov	sl, r0
 800493a:	460c      	mov	r4, r1
 800493c:	4690      	mov	r8, r2
 800493e:	d82d      	bhi.n	800499c <__ssputs_r+0x70>
 8004940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004948:	d026      	beq.n	8004998 <__ssputs_r+0x6c>
 800494a:	6965      	ldr	r5, [r4, #20]
 800494c:	6909      	ldr	r1, [r1, #16]
 800494e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004952:	eba3 0901 	sub.w	r9, r3, r1
 8004956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800495a:	1c7b      	adds	r3, r7, #1
 800495c:	444b      	add	r3, r9
 800495e:	106d      	asrs	r5, r5, #1
 8004960:	429d      	cmp	r5, r3
 8004962:	bf38      	it	cc
 8004964:	461d      	movcc	r5, r3
 8004966:	0553      	lsls	r3, r2, #21
 8004968:	d527      	bpl.n	80049ba <__ssputs_r+0x8e>
 800496a:	4629      	mov	r1, r5
 800496c:	f7ff ff52 	bl	8004814 <_malloc_r>
 8004970:	4606      	mov	r6, r0
 8004972:	b360      	cbz	r0, 80049ce <__ssputs_r+0xa2>
 8004974:	6921      	ldr	r1, [r4, #16]
 8004976:	464a      	mov	r2, r9
 8004978:	f000 fae8 	bl	8004f4c <memcpy>
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004986:	81a3      	strh	r3, [r4, #12]
 8004988:	6126      	str	r6, [r4, #16]
 800498a:	6165      	str	r5, [r4, #20]
 800498c:	444e      	add	r6, r9
 800498e:	eba5 0509 	sub.w	r5, r5, r9
 8004992:	6026      	str	r6, [r4, #0]
 8004994:	60a5      	str	r5, [r4, #8]
 8004996:	463e      	mov	r6, r7
 8004998:	42be      	cmp	r6, r7
 800499a:	d900      	bls.n	800499e <__ssputs_r+0x72>
 800499c:	463e      	mov	r6, r7
 800499e:	6820      	ldr	r0, [r4, #0]
 80049a0:	4632      	mov	r2, r6
 80049a2:	4641      	mov	r1, r8
 80049a4:	f000 faa8 	bl	8004ef8 <memmove>
 80049a8:	68a3      	ldr	r3, [r4, #8]
 80049aa:	1b9b      	subs	r3, r3, r6
 80049ac:	60a3      	str	r3, [r4, #8]
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	4433      	add	r3, r6
 80049b2:	6023      	str	r3, [r4, #0]
 80049b4:	2000      	movs	r0, #0
 80049b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ba:	462a      	mov	r2, r5
 80049bc:	f000 fad4 	bl	8004f68 <_realloc_r>
 80049c0:	4606      	mov	r6, r0
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d1e0      	bne.n	8004988 <__ssputs_r+0x5c>
 80049c6:	6921      	ldr	r1, [r4, #16]
 80049c8:	4650      	mov	r0, sl
 80049ca:	f7ff feb7 	bl	800473c <_free_r>
 80049ce:	230c      	movs	r3, #12
 80049d0:	f8ca 3000 	str.w	r3, [sl]
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049da:	81a3      	strh	r3, [r4, #12]
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295
 80049e0:	e7e9      	b.n	80049b6 <__ssputs_r+0x8a>
	...

080049e4 <_svfiprintf_r>:
 80049e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e8:	4698      	mov	r8, r3
 80049ea:	898b      	ldrh	r3, [r1, #12]
 80049ec:	061b      	lsls	r3, r3, #24
 80049ee:	b09d      	sub	sp, #116	@ 0x74
 80049f0:	4607      	mov	r7, r0
 80049f2:	460d      	mov	r5, r1
 80049f4:	4614      	mov	r4, r2
 80049f6:	d510      	bpl.n	8004a1a <_svfiprintf_r+0x36>
 80049f8:	690b      	ldr	r3, [r1, #16]
 80049fa:	b973      	cbnz	r3, 8004a1a <_svfiprintf_r+0x36>
 80049fc:	2140      	movs	r1, #64	@ 0x40
 80049fe:	f7ff ff09 	bl	8004814 <_malloc_r>
 8004a02:	6028      	str	r0, [r5, #0]
 8004a04:	6128      	str	r0, [r5, #16]
 8004a06:	b930      	cbnz	r0, 8004a16 <_svfiprintf_r+0x32>
 8004a08:	230c      	movs	r3, #12
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a10:	b01d      	add	sp, #116	@ 0x74
 8004a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a16:	2340      	movs	r3, #64	@ 0x40
 8004a18:	616b      	str	r3, [r5, #20]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a1e:	2320      	movs	r3, #32
 8004a20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a28:	2330      	movs	r3, #48	@ 0x30
 8004a2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004bc8 <_svfiprintf_r+0x1e4>
 8004a2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a32:	f04f 0901 	mov.w	r9, #1
 8004a36:	4623      	mov	r3, r4
 8004a38:	469a      	mov	sl, r3
 8004a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a3e:	b10a      	cbz	r2, 8004a44 <_svfiprintf_r+0x60>
 8004a40:	2a25      	cmp	r2, #37	@ 0x25
 8004a42:	d1f9      	bne.n	8004a38 <_svfiprintf_r+0x54>
 8004a44:	ebba 0b04 	subs.w	fp, sl, r4
 8004a48:	d00b      	beq.n	8004a62 <_svfiprintf_r+0x7e>
 8004a4a:	465b      	mov	r3, fp
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4638      	mov	r0, r7
 8004a52:	f7ff ff6b 	bl	800492c <__ssputs_r>
 8004a56:	3001      	adds	r0, #1
 8004a58:	f000 80a7 	beq.w	8004baa <_svfiprintf_r+0x1c6>
 8004a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a5e:	445a      	add	r2, fp
 8004a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a62:	f89a 3000 	ldrb.w	r3, [sl]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 809f 	beq.w	8004baa <_svfiprintf_r+0x1c6>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a76:	f10a 0a01 	add.w	sl, sl, #1
 8004a7a:	9304      	str	r3, [sp, #16]
 8004a7c:	9307      	str	r3, [sp, #28]
 8004a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a84:	4654      	mov	r4, sl
 8004a86:	2205      	movs	r2, #5
 8004a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a8c:	484e      	ldr	r0, [pc, #312]	@ (8004bc8 <_svfiprintf_r+0x1e4>)
 8004a8e:	f7fb fb9f 	bl	80001d0 <memchr>
 8004a92:	9a04      	ldr	r2, [sp, #16]
 8004a94:	b9d8      	cbnz	r0, 8004ace <_svfiprintf_r+0xea>
 8004a96:	06d0      	lsls	r0, r2, #27
 8004a98:	bf44      	itt	mi
 8004a9a:	2320      	movmi	r3, #32
 8004a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004aa0:	0711      	lsls	r1, r2, #28
 8004aa2:	bf44      	itt	mi
 8004aa4:	232b      	movmi	r3, #43	@ 0x2b
 8004aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8004aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ab0:	d015      	beq.n	8004ade <_svfiprintf_r+0xfa>
 8004ab2:	9a07      	ldr	r2, [sp, #28]
 8004ab4:	4654      	mov	r4, sl
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f04f 0c0a 	mov.w	ip, #10
 8004abc:	4621      	mov	r1, r4
 8004abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ac2:	3b30      	subs	r3, #48	@ 0x30
 8004ac4:	2b09      	cmp	r3, #9
 8004ac6:	d94b      	bls.n	8004b60 <_svfiprintf_r+0x17c>
 8004ac8:	b1b0      	cbz	r0, 8004af8 <_svfiprintf_r+0x114>
 8004aca:	9207      	str	r2, [sp, #28]
 8004acc:	e014      	b.n	8004af8 <_svfiprintf_r+0x114>
 8004ace:	eba0 0308 	sub.w	r3, r0, r8
 8004ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	9304      	str	r3, [sp, #16]
 8004ada:	46a2      	mov	sl, r4
 8004adc:	e7d2      	b.n	8004a84 <_svfiprintf_r+0xa0>
 8004ade:	9b03      	ldr	r3, [sp, #12]
 8004ae0:	1d19      	adds	r1, r3, #4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	9103      	str	r1, [sp, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bfbb      	ittet	lt
 8004aea:	425b      	neglt	r3, r3
 8004aec:	f042 0202 	orrlt.w	r2, r2, #2
 8004af0:	9307      	strge	r3, [sp, #28]
 8004af2:	9307      	strlt	r3, [sp, #28]
 8004af4:	bfb8      	it	lt
 8004af6:	9204      	strlt	r2, [sp, #16]
 8004af8:	7823      	ldrb	r3, [r4, #0]
 8004afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8004afc:	d10a      	bne.n	8004b14 <_svfiprintf_r+0x130>
 8004afe:	7863      	ldrb	r3, [r4, #1]
 8004b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b02:	d132      	bne.n	8004b6a <_svfiprintf_r+0x186>
 8004b04:	9b03      	ldr	r3, [sp, #12]
 8004b06:	1d1a      	adds	r2, r3, #4
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	9203      	str	r2, [sp, #12]
 8004b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b10:	3402      	adds	r4, #2
 8004b12:	9305      	str	r3, [sp, #20]
 8004b14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004bd8 <_svfiprintf_r+0x1f4>
 8004b18:	7821      	ldrb	r1, [r4, #0]
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	4650      	mov	r0, sl
 8004b1e:	f7fb fb57 	bl	80001d0 <memchr>
 8004b22:	b138      	cbz	r0, 8004b34 <_svfiprintf_r+0x150>
 8004b24:	9b04      	ldr	r3, [sp, #16]
 8004b26:	eba0 000a 	sub.w	r0, r0, sl
 8004b2a:	2240      	movs	r2, #64	@ 0x40
 8004b2c:	4082      	lsls	r2, r0
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	3401      	adds	r4, #1
 8004b32:	9304      	str	r3, [sp, #16]
 8004b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b38:	4824      	ldr	r0, [pc, #144]	@ (8004bcc <_svfiprintf_r+0x1e8>)
 8004b3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b3e:	2206      	movs	r2, #6
 8004b40:	f7fb fb46 	bl	80001d0 <memchr>
 8004b44:	2800      	cmp	r0, #0
 8004b46:	d036      	beq.n	8004bb6 <_svfiprintf_r+0x1d2>
 8004b48:	4b21      	ldr	r3, [pc, #132]	@ (8004bd0 <_svfiprintf_r+0x1ec>)
 8004b4a:	bb1b      	cbnz	r3, 8004b94 <_svfiprintf_r+0x1b0>
 8004b4c:	9b03      	ldr	r3, [sp, #12]
 8004b4e:	3307      	adds	r3, #7
 8004b50:	f023 0307 	bic.w	r3, r3, #7
 8004b54:	3308      	adds	r3, #8
 8004b56:	9303      	str	r3, [sp, #12]
 8004b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b5a:	4433      	add	r3, r6
 8004b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b5e:	e76a      	b.n	8004a36 <_svfiprintf_r+0x52>
 8004b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b64:	460c      	mov	r4, r1
 8004b66:	2001      	movs	r0, #1
 8004b68:	e7a8      	b.n	8004abc <_svfiprintf_r+0xd8>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	3401      	adds	r4, #1
 8004b6e:	9305      	str	r3, [sp, #20]
 8004b70:	4619      	mov	r1, r3
 8004b72:	f04f 0c0a 	mov.w	ip, #10
 8004b76:	4620      	mov	r0, r4
 8004b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b7c:	3a30      	subs	r2, #48	@ 0x30
 8004b7e:	2a09      	cmp	r2, #9
 8004b80:	d903      	bls.n	8004b8a <_svfiprintf_r+0x1a6>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0c6      	beq.n	8004b14 <_svfiprintf_r+0x130>
 8004b86:	9105      	str	r1, [sp, #20]
 8004b88:	e7c4      	b.n	8004b14 <_svfiprintf_r+0x130>
 8004b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b8e:	4604      	mov	r4, r0
 8004b90:	2301      	movs	r3, #1
 8004b92:	e7f0      	b.n	8004b76 <_svfiprintf_r+0x192>
 8004b94:	ab03      	add	r3, sp, #12
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	462a      	mov	r2, r5
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd4 <_svfiprintf_r+0x1f0>)
 8004b9c:	a904      	add	r1, sp, #16
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f3af 8000 	nop.w
 8004ba4:	1c42      	adds	r2, r0, #1
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	d1d6      	bne.n	8004b58 <_svfiprintf_r+0x174>
 8004baa:	89ab      	ldrh	r3, [r5, #12]
 8004bac:	065b      	lsls	r3, r3, #25
 8004bae:	f53f af2d 	bmi.w	8004a0c <_svfiprintf_r+0x28>
 8004bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bb4:	e72c      	b.n	8004a10 <_svfiprintf_r+0x2c>
 8004bb6:	ab03      	add	r3, sp, #12
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	462a      	mov	r2, r5
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <_svfiprintf_r+0x1f0>)
 8004bbe:	a904      	add	r1, sp, #16
 8004bc0:	4638      	mov	r0, r7
 8004bc2:	f000 f879 	bl	8004cb8 <_printf_i>
 8004bc6:	e7ed      	b.n	8004ba4 <_svfiprintf_r+0x1c0>
 8004bc8:	080050ac 	.word	0x080050ac
 8004bcc:	080050b6 	.word	0x080050b6
 8004bd0:	00000000 	.word	0x00000000
 8004bd4:	0800492d 	.word	0x0800492d
 8004bd8:	080050b2 	.word	0x080050b2

08004bdc <_printf_common>:
 8004bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be0:	4616      	mov	r6, r2
 8004be2:	4698      	mov	r8, r3
 8004be4:	688a      	ldr	r2, [r1, #8]
 8004be6:	690b      	ldr	r3, [r1, #16]
 8004be8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bec:	4293      	cmp	r3, r2
 8004bee:	bfb8      	it	lt
 8004bf0:	4613      	movlt	r3, r2
 8004bf2:	6033      	str	r3, [r6, #0]
 8004bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	b10a      	cbz	r2, 8004c02 <_printf_common+0x26>
 8004bfe:	3301      	adds	r3, #1
 8004c00:	6033      	str	r3, [r6, #0]
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	0699      	lsls	r1, r3, #26
 8004c06:	bf42      	ittt	mi
 8004c08:	6833      	ldrmi	r3, [r6, #0]
 8004c0a:	3302      	addmi	r3, #2
 8004c0c:	6033      	strmi	r3, [r6, #0]
 8004c0e:	6825      	ldr	r5, [r4, #0]
 8004c10:	f015 0506 	ands.w	r5, r5, #6
 8004c14:	d106      	bne.n	8004c24 <_printf_common+0x48>
 8004c16:	f104 0a19 	add.w	sl, r4, #25
 8004c1a:	68e3      	ldr	r3, [r4, #12]
 8004c1c:	6832      	ldr	r2, [r6, #0]
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	42ab      	cmp	r3, r5
 8004c22:	dc26      	bgt.n	8004c72 <_printf_common+0x96>
 8004c24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c28:	6822      	ldr	r2, [r4, #0]
 8004c2a:	3b00      	subs	r3, #0
 8004c2c:	bf18      	it	ne
 8004c2e:	2301      	movne	r3, #1
 8004c30:	0692      	lsls	r2, r2, #26
 8004c32:	d42b      	bmi.n	8004c8c <_printf_common+0xb0>
 8004c34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c38:	4641      	mov	r1, r8
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	47c8      	blx	r9
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d01e      	beq.n	8004c80 <_printf_common+0xa4>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	6922      	ldr	r2, [r4, #16]
 8004c46:	f003 0306 	and.w	r3, r3, #6
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	bf02      	ittt	eq
 8004c4e:	68e5      	ldreq	r5, [r4, #12]
 8004c50:	6833      	ldreq	r3, [r6, #0]
 8004c52:	1aed      	subeq	r5, r5, r3
 8004c54:	68a3      	ldr	r3, [r4, #8]
 8004c56:	bf0c      	ite	eq
 8004c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c5c:	2500      	movne	r5, #0
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	bfc4      	itt	gt
 8004c62:	1a9b      	subgt	r3, r3, r2
 8004c64:	18ed      	addgt	r5, r5, r3
 8004c66:	2600      	movs	r6, #0
 8004c68:	341a      	adds	r4, #26
 8004c6a:	42b5      	cmp	r5, r6
 8004c6c:	d11a      	bne.n	8004ca4 <_printf_common+0xc8>
 8004c6e:	2000      	movs	r0, #0
 8004c70:	e008      	b.n	8004c84 <_printf_common+0xa8>
 8004c72:	2301      	movs	r3, #1
 8004c74:	4652      	mov	r2, sl
 8004c76:	4641      	mov	r1, r8
 8004c78:	4638      	mov	r0, r7
 8004c7a:	47c8      	blx	r9
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d103      	bne.n	8004c88 <_printf_common+0xac>
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c88:	3501      	adds	r5, #1
 8004c8a:	e7c6      	b.n	8004c1a <_printf_common+0x3e>
 8004c8c:	18e1      	adds	r1, r4, r3
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	2030      	movs	r0, #48	@ 0x30
 8004c92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c96:	4422      	add	r2, r4
 8004c98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	e7c7      	b.n	8004c34 <_printf_common+0x58>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	4622      	mov	r2, r4
 8004ca8:	4641      	mov	r1, r8
 8004caa:	4638      	mov	r0, r7
 8004cac:	47c8      	blx	r9
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d0e6      	beq.n	8004c80 <_printf_common+0xa4>
 8004cb2:	3601      	adds	r6, #1
 8004cb4:	e7d9      	b.n	8004c6a <_printf_common+0x8e>
	...

08004cb8 <_printf_i>:
 8004cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cbc:	7e0f      	ldrb	r7, [r1, #24]
 8004cbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004cc0:	2f78      	cmp	r7, #120	@ 0x78
 8004cc2:	4691      	mov	r9, r2
 8004cc4:	4680      	mov	r8, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	469a      	mov	sl, r3
 8004cca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cce:	d807      	bhi.n	8004ce0 <_printf_i+0x28>
 8004cd0:	2f62      	cmp	r7, #98	@ 0x62
 8004cd2:	d80a      	bhi.n	8004cea <_printf_i+0x32>
 8004cd4:	2f00      	cmp	r7, #0
 8004cd6:	f000 80d2 	beq.w	8004e7e <_printf_i+0x1c6>
 8004cda:	2f58      	cmp	r7, #88	@ 0x58
 8004cdc:	f000 80b9 	beq.w	8004e52 <_printf_i+0x19a>
 8004ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ce4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ce8:	e03a      	b.n	8004d60 <_printf_i+0xa8>
 8004cea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cee:	2b15      	cmp	r3, #21
 8004cf0:	d8f6      	bhi.n	8004ce0 <_printf_i+0x28>
 8004cf2:	a101      	add	r1, pc, #4	@ (adr r1, 8004cf8 <_printf_i+0x40>)
 8004cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cf8:	08004d51 	.word	0x08004d51
 8004cfc:	08004d65 	.word	0x08004d65
 8004d00:	08004ce1 	.word	0x08004ce1
 8004d04:	08004ce1 	.word	0x08004ce1
 8004d08:	08004ce1 	.word	0x08004ce1
 8004d0c:	08004ce1 	.word	0x08004ce1
 8004d10:	08004d65 	.word	0x08004d65
 8004d14:	08004ce1 	.word	0x08004ce1
 8004d18:	08004ce1 	.word	0x08004ce1
 8004d1c:	08004ce1 	.word	0x08004ce1
 8004d20:	08004ce1 	.word	0x08004ce1
 8004d24:	08004e65 	.word	0x08004e65
 8004d28:	08004d8f 	.word	0x08004d8f
 8004d2c:	08004e1f 	.word	0x08004e1f
 8004d30:	08004ce1 	.word	0x08004ce1
 8004d34:	08004ce1 	.word	0x08004ce1
 8004d38:	08004e87 	.word	0x08004e87
 8004d3c:	08004ce1 	.word	0x08004ce1
 8004d40:	08004d8f 	.word	0x08004d8f
 8004d44:	08004ce1 	.word	0x08004ce1
 8004d48:	08004ce1 	.word	0x08004ce1
 8004d4c:	08004e27 	.word	0x08004e27
 8004d50:	6833      	ldr	r3, [r6, #0]
 8004d52:	1d1a      	adds	r2, r3, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6032      	str	r2, [r6, #0]
 8004d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d60:	2301      	movs	r3, #1
 8004d62:	e09d      	b.n	8004ea0 <_printf_i+0x1e8>
 8004d64:	6833      	ldr	r3, [r6, #0]
 8004d66:	6820      	ldr	r0, [r4, #0]
 8004d68:	1d19      	adds	r1, r3, #4
 8004d6a:	6031      	str	r1, [r6, #0]
 8004d6c:	0606      	lsls	r6, r0, #24
 8004d6e:	d501      	bpl.n	8004d74 <_printf_i+0xbc>
 8004d70:	681d      	ldr	r5, [r3, #0]
 8004d72:	e003      	b.n	8004d7c <_printf_i+0xc4>
 8004d74:	0645      	lsls	r5, r0, #25
 8004d76:	d5fb      	bpl.n	8004d70 <_printf_i+0xb8>
 8004d78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d7c:	2d00      	cmp	r5, #0
 8004d7e:	da03      	bge.n	8004d88 <_printf_i+0xd0>
 8004d80:	232d      	movs	r3, #45	@ 0x2d
 8004d82:	426d      	negs	r5, r5
 8004d84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d88:	4859      	ldr	r0, [pc, #356]	@ (8004ef0 <_printf_i+0x238>)
 8004d8a:	230a      	movs	r3, #10
 8004d8c:	e011      	b.n	8004db2 <_printf_i+0xfa>
 8004d8e:	6821      	ldr	r1, [r4, #0]
 8004d90:	6833      	ldr	r3, [r6, #0]
 8004d92:	0608      	lsls	r0, r1, #24
 8004d94:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d98:	d402      	bmi.n	8004da0 <_printf_i+0xe8>
 8004d9a:	0649      	lsls	r1, r1, #25
 8004d9c:	bf48      	it	mi
 8004d9e:	b2ad      	uxthmi	r5, r5
 8004da0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004da2:	4853      	ldr	r0, [pc, #332]	@ (8004ef0 <_printf_i+0x238>)
 8004da4:	6033      	str	r3, [r6, #0]
 8004da6:	bf14      	ite	ne
 8004da8:	230a      	movne	r3, #10
 8004daa:	2308      	moveq	r3, #8
 8004dac:	2100      	movs	r1, #0
 8004dae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004db2:	6866      	ldr	r6, [r4, #4]
 8004db4:	60a6      	str	r6, [r4, #8]
 8004db6:	2e00      	cmp	r6, #0
 8004db8:	bfa2      	ittt	ge
 8004dba:	6821      	ldrge	r1, [r4, #0]
 8004dbc:	f021 0104 	bicge.w	r1, r1, #4
 8004dc0:	6021      	strge	r1, [r4, #0]
 8004dc2:	b90d      	cbnz	r5, 8004dc8 <_printf_i+0x110>
 8004dc4:	2e00      	cmp	r6, #0
 8004dc6:	d04b      	beq.n	8004e60 <_printf_i+0x1a8>
 8004dc8:	4616      	mov	r6, r2
 8004dca:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dce:	fb03 5711 	mls	r7, r3, r1, r5
 8004dd2:	5dc7      	ldrb	r7, [r0, r7]
 8004dd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dd8:	462f      	mov	r7, r5
 8004dda:	42bb      	cmp	r3, r7
 8004ddc:	460d      	mov	r5, r1
 8004dde:	d9f4      	bls.n	8004dca <_printf_i+0x112>
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d10b      	bne.n	8004dfc <_printf_i+0x144>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	07df      	lsls	r7, r3, #31
 8004de8:	d508      	bpl.n	8004dfc <_printf_i+0x144>
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	6861      	ldr	r1, [r4, #4]
 8004dee:	4299      	cmp	r1, r3
 8004df0:	bfde      	ittt	le
 8004df2:	2330      	movle	r3, #48	@ 0x30
 8004df4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004df8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dfc:	1b92      	subs	r2, r2, r6
 8004dfe:	6122      	str	r2, [r4, #16]
 8004e00:	f8cd a000 	str.w	sl, [sp]
 8004e04:	464b      	mov	r3, r9
 8004e06:	aa03      	add	r2, sp, #12
 8004e08:	4621      	mov	r1, r4
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	f7ff fee6 	bl	8004bdc <_printf_common>
 8004e10:	3001      	adds	r0, #1
 8004e12:	d14a      	bne.n	8004eaa <_printf_i+0x1f2>
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
 8004e18:	b004      	add	sp, #16
 8004e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	f043 0320 	orr.w	r3, r3, #32
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	4833      	ldr	r0, [pc, #204]	@ (8004ef4 <_printf_i+0x23c>)
 8004e28:	2778      	movs	r7, #120	@ 0x78
 8004e2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	6831      	ldr	r1, [r6, #0]
 8004e32:	061f      	lsls	r7, r3, #24
 8004e34:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e38:	d402      	bmi.n	8004e40 <_printf_i+0x188>
 8004e3a:	065f      	lsls	r7, r3, #25
 8004e3c:	bf48      	it	mi
 8004e3e:	b2ad      	uxthmi	r5, r5
 8004e40:	6031      	str	r1, [r6, #0]
 8004e42:	07d9      	lsls	r1, r3, #31
 8004e44:	bf44      	itt	mi
 8004e46:	f043 0320 	orrmi.w	r3, r3, #32
 8004e4a:	6023      	strmi	r3, [r4, #0]
 8004e4c:	b11d      	cbz	r5, 8004e56 <_printf_i+0x19e>
 8004e4e:	2310      	movs	r3, #16
 8004e50:	e7ac      	b.n	8004dac <_printf_i+0xf4>
 8004e52:	4827      	ldr	r0, [pc, #156]	@ (8004ef0 <_printf_i+0x238>)
 8004e54:	e7e9      	b.n	8004e2a <_printf_i+0x172>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	f023 0320 	bic.w	r3, r3, #32
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	e7f6      	b.n	8004e4e <_printf_i+0x196>
 8004e60:	4616      	mov	r6, r2
 8004e62:	e7bd      	b.n	8004de0 <_printf_i+0x128>
 8004e64:	6833      	ldr	r3, [r6, #0]
 8004e66:	6825      	ldr	r5, [r4, #0]
 8004e68:	6961      	ldr	r1, [r4, #20]
 8004e6a:	1d18      	adds	r0, r3, #4
 8004e6c:	6030      	str	r0, [r6, #0]
 8004e6e:	062e      	lsls	r6, r5, #24
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	d501      	bpl.n	8004e78 <_printf_i+0x1c0>
 8004e74:	6019      	str	r1, [r3, #0]
 8004e76:	e002      	b.n	8004e7e <_printf_i+0x1c6>
 8004e78:	0668      	lsls	r0, r5, #25
 8004e7a:	d5fb      	bpl.n	8004e74 <_printf_i+0x1bc>
 8004e7c:	8019      	strh	r1, [r3, #0]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	6123      	str	r3, [r4, #16]
 8004e82:	4616      	mov	r6, r2
 8004e84:	e7bc      	b.n	8004e00 <_printf_i+0x148>
 8004e86:	6833      	ldr	r3, [r6, #0]
 8004e88:	1d1a      	adds	r2, r3, #4
 8004e8a:	6032      	str	r2, [r6, #0]
 8004e8c:	681e      	ldr	r6, [r3, #0]
 8004e8e:	6862      	ldr	r2, [r4, #4]
 8004e90:	2100      	movs	r1, #0
 8004e92:	4630      	mov	r0, r6
 8004e94:	f7fb f99c 	bl	80001d0 <memchr>
 8004e98:	b108      	cbz	r0, 8004e9e <_printf_i+0x1e6>
 8004e9a:	1b80      	subs	r0, r0, r6
 8004e9c:	6060      	str	r0, [r4, #4]
 8004e9e:	6863      	ldr	r3, [r4, #4]
 8004ea0:	6123      	str	r3, [r4, #16]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ea8:	e7aa      	b.n	8004e00 <_printf_i+0x148>
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	4632      	mov	r2, r6
 8004eae:	4649      	mov	r1, r9
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	47d0      	blx	sl
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d0ad      	beq.n	8004e14 <_printf_i+0x15c>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	079b      	lsls	r3, r3, #30
 8004ebc:	d413      	bmi.n	8004ee6 <_printf_i+0x22e>
 8004ebe:	68e0      	ldr	r0, [r4, #12]
 8004ec0:	9b03      	ldr	r3, [sp, #12]
 8004ec2:	4298      	cmp	r0, r3
 8004ec4:	bfb8      	it	lt
 8004ec6:	4618      	movlt	r0, r3
 8004ec8:	e7a6      	b.n	8004e18 <_printf_i+0x160>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4632      	mov	r2, r6
 8004ece:	4649      	mov	r1, r9
 8004ed0:	4640      	mov	r0, r8
 8004ed2:	47d0      	blx	sl
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d09d      	beq.n	8004e14 <_printf_i+0x15c>
 8004ed8:	3501      	adds	r5, #1
 8004eda:	68e3      	ldr	r3, [r4, #12]
 8004edc:	9903      	ldr	r1, [sp, #12]
 8004ede:	1a5b      	subs	r3, r3, r1
 8004ee0:	42ab      	cmp	r3, r5
 8004ee2:	dcf2      	bgt.n	8004eca <_printf_i+0x212>
 8004ee4:	e7eb      	b.n	8004ebe <_printf_i+0x206>
 8004ee6:	2500      	movs	r5, #0
 8004ee8:	f104 0619 	add.w	r6, r4, #25
 8004eec:	e7f5      	b.n	8004eda <_printf_i+0x222>
 8004eee:	bf00      	nop
 8004ef0:	080050bd 	.word	0x080050bd
 8004ef4:	080050ce 	.word	0x080050ce

08004ef8 <memmove>:
 8004ef8:	4288      	cmp	r0, r1
 8004efa:	b510      	push	{r4, lr}
 8004efc:	eb01 0402 	add.w	r4, r1, r2
 8004f00:	d902      	bls.n	8004f08 <memmove+0x10>
 8004f02:	4284      	cmp	r4, r0
 8004f04:	4623      	mov	r3, r4
 8004f06:	d807      	bhi.n	8004f18 <memmove+0x20>
 8004f08:	1e43      	subs	r3, r0, #1
 8004f0a:	42a1      	cmp	r1, r4
 8004f0c:	d008      	beq.n	8004f20 <memmove+0x28>
 8004f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f16:	e7f8      	b.n	8004f0a <memmove+0x12>
 8004f18:	4402      	add	r2, r0
 8004f1a:	4601      	mov	r1, r0
 8004f1c:	428a      	cmp	r2, r1
 8004f1e:	d100      	bne.n	8004f22 <memmove+0x2a>
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f2a:	e7f7      	b.n	8004f1c <memmove+0x24>

08004f2c <_sbrk_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4d06      	ldr	r5, [pc, #24]	@ (8004f48 <_sbrk_r+0x1c>)
 8004f30:	2300      	movs	r3, #0
 8004f32:	4604      	mov	r4, r0
 8004f34:	4608      	mov	r0, r1
 8004f36:	602b      	str	r3, [r5, #0]
 8004f38:	f7fb ffc6 	bl	8000ec8 <_sbrk>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d102      	bne.n	8004f46 <_sbrk_r+0x1a>
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	b103      	cbz	r3, 8004f46 <_sbrk_r+0x1a>
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	200002a4 	.word	0x200002a4

08004f4c <memcpy>:
 8004f4c:	440a      	add	r2, r1
 8004f4e:	4291      	cmp	r1, r2
 8004f50:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f54:	d100      	bne.n	8004f58 <memcpy+0xc>
 8004f56:	4770      	bx	lr
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f62:	4291      	cmp	r1, r2
 8004f64:	d1f9      	bne.n	8004f5a <memcpy+0xe>
 8004f66:	bd10      	pop	{r4, pc}

08004f68 <_realloc_r>:
 8004f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6c:	4680      	mov	r8, r0
 8004f6e:	4615      	mov	r5, r2
 8004f70:	460c      	mov	r4, r1
 8004f72:	b921      	cbnz	r1, 8004f7e <_realloc_r+0x16>
 8004f74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f78:	4611      	mov	r1, r2
 8004f7a:	f7ff bc4b 	b.w	8004814 <_malloc_r>
 8004f7e:	b92a      	cbnz	r2, 8004f8c <_realloc_r+0x24>
 8004f80:	f7ff fbdc 	bl	800473c <_free_r>
 8004f84:	2400      	movs	r4, #0
 8004f86:	4620      	mov	r0, r4
 8004f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f8c:	f000 f81a 	bl	8004fc4 <_malloc_usable_size_r>
 8004f90:	4285      	cmp	r5, r0
 8004f92:	4606      	mov	r6, r0
 8004f94:	d802      	bhi.n	8004f9c <_realloc_r+0x34>
 8004f96:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f9a:	d8f4      	bhi.n	8004f86 <_realloc_r+0x1e>
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	4640      	mov	r0, r8
 8004fa0:	f7ff fc38 	bl	8004814 <_malloc_r>
 8004fa4:	4607      	mov	r7, r0
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d0ec      	beq.n	8004f84 <_realloc_r+0x1c>
 8004faa:	42b5      	cmp	r5, r6
 8004fac:	462a      	mov	r2, r5
 8004fae:	4621      	mov	r1, r4
 8004fb0:	bf28      	it	cs
 8004fb2:	4632      	movcs	r2, r6
 8004fb4:	f7ff ffca 	bl	8004f4c <memcpy>
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4640      	mov	r0, r8
 8004fbc:	f7ff fbbe 	bl	800473c <_free_r>
 8004fc0:	463c      	mov	r4, r7
 8004fc2:	e7e0      	b.n	8004f86 <_realloc_r+0x1e>

08004fc4 <_malloc_usable_size_r>:
 8004fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc8:	1f18      	subs	r0, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bfbc      	itt	lt
 8004fce:	580b      	ldrlt	r3, [r1, r0]
 8004fd0:	18c0      	addlt	r0, r0, r3
 8004fd2:	4770      	bx	lr

08004fd4 <_init>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr

08004fe0 <_fini>:
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	bf00      	nop
 8004fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe6:	bc08      	pop	{r3}
 8004fe8:	469e      	mov	lr, r3
 8004fea:	4770      	bx	lr
