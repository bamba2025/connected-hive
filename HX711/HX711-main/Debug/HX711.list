
HX711.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004d44  08004d44  00005d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e0c  08004e0c  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004e0c  08004e0c  00005e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e14  08004e14  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e14  08004e14  00005e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e18  08004e18  00005e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  08004e84  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004e84  000062c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010578  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026af  00000000  00000000  00016610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00018cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c20  00000000  00000000  00019c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281c8  00000000  00000000  0001a890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013970  00000000  00000000  00042a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4292  00000000  00000000  000563c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a65a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c4  00000000  00000000  0014a6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0014ef64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d2c 	.word	0x08004d2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004d2c 	.word	0x08004d2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b44      	ldr	r3, [pc, #272]	@ (8000698 <MX_GPIO_Init+0x128>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	4a43      	ldr	r2, [pc, #268]	@ (8000698 <MX_GPIO_Init+0x128>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000592:	4b41      	ldr	r3, [pc, #260]	@ (8000698 <MX_GPIO_Init+0x128>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	4b3e      	ldr	r3, [pc, #248]	@ (8000698 <MX_GPIO_Init+0x128>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a2:	4a3d      	ldr	r2, [pc, #244]	@ (8000698 <MX_GPIO_Init+0x128>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000698 <MX_GPIO_Init+0x128>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b38      	ldr	r3, [pc, #224]	@ (8000698 <MX_GPIO_Init+0x128>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	4a37      	ldr	r2, [pc, #220]	@ (8000698 <MX_GPIO_Init+0x128>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c2:	4b35      	ldr	r3, [pc, #212]	@ (8000698 <MX_GPIO_Init+0x128>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b32      	ldr	r3, [pc, #200]	@ (8000698 <MX_GPIO_Init+0x128>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a31      	ldr	r2, [pc, #196]	@ (8000698 <MX_GPIO_Init+0x128>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b2f      	ldr	r3, [pc, #188]	@ (8000698 <MX_GPIO_Init+0x128>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCK_hx711_GPIO_Port, SCK_hx711_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2102      	movs	r1, #2
 80005ea:	482c      	ldr	r0, [pc, #176]	@ (800069c <MX_GPIO_Init+0x12c>)
 80005ec:	f000 ff58 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2120      	movs	r1, #32
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f8:	f000 ff52 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2110      	movs	r1, #16
 8000600:	4827      	ldr	r0, [pc, #156]	@ (80006a0 <MX_GPIO_Init+0x130>)
 8000602:	f000 ff4d 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000606:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800060c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	481f      	ldr	r0, [pc, #124]	@ (800069c <MX_GPIO_Init+0x12c>)
 800061e:	f000 fd7d 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : DT_hx7111_Pin */
  GPIO_InitStruct.Pin = DT_hx7111_Pin;
 8000622:	2301      	movs	r3, #1
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062a:	2301      	movs	r3, #1
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DT_hx7111_GPIO_Port, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	4819      	ldr	r0, [pc, #100]	@ (800069c <MX_GPIO_Init+0x12c>)
 8000636:	f000 fd71 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : SCK_hx711_Pin */
  GPIO_InitStruct.Pin = SCK_hx711_Pin;
 800063a:	2302      	movs	r3, #2
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000646:	2301      	movs	r3, #1
 8000648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SCK_hx711_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	4812      	ldr	r0, [pc, #72]	@ (800069c <MX_GPIO_Init+0x12c>)
 8000652:	f000 fd63 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000656:	2320      	movs	r3, #32
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000670:	f000 fd54 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000674:	2310      	movs	r3, #16
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_GPIO_Init+0x130>)
 800068c:	f000 fd46 	bl	800111c <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3728      	adds	r7, #40	@ 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	48000800 	.word	0x48000800
 80006a0:	48000400 	.word	0x48000400

080006a4 <HX711_Init>:

#define HX711_DELAY_US 1  // Délai entre les impulsions SCK (microsecondes)

// **Initialisation du HX711**
void HX711_Init(HX711 *hx, GPIO_TypeDef* dout_GPIO, uint16_t dout_Pin,
                GPIO_TypeDef* sck_GPIO, uint16_t sck_Pin) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4613      	mov	r3, r2
 80006b2:	80fb      	strh	r3, [r7, #6]
    hx->dout_GPIO = dout_GPIO;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	601a      	str	r2, [r3, #0]
    hx->dout_Pin = dout_Pin;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	809a      	strh	r2, [r3, #4]
    hx->sck_GPIO = sck_GPIO;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	609a      	str	r2, [r3, #8]
    hx->sck_Pin = sck_Pin;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	8b3a      	ldrh	r2, [r7, #24]
 80006ca:	819a      	strh	r2, [r3, #12]
    hx->offset = 0;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
    hx->scale = 209.28; //209.28
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4a06      	ldr	r2, [pc, #24]	@ (80006f0 <HX711_Init+0x4c>)
 80006d6:	615a      	str	r2, [r3, #20]

    // Mise à l'état bas de SCK
    HAL_GPIO_WritePin(hx->sck_GPIO, hx->sck_Pin, GPIO_PIN_RESET);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	6898      	ldr	r0, [r3, #8]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	899b      	ldrh	r3, [r3, #12]
 80006e0:	2200      	movs	r2, #0
 80006e2:	4619      	mov	r1, r3
 80006e4:	f000 fedc 	bl	80014a0 <HAL_GPIO_WritePin>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	435147ae 	.word	0x435147ae

080006f4 <HX711_Read>:

// **Lecture des données sur 24 bits**
int32_t HX711_Read(HX711 *hx) {
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
    uint32_t data = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]

    // Attente que le HX711 soit prêt (niveau bas sur DT)
    while (HAL_GPIO_ReadPin(hx->dout_GPIO, hx->dout_Pin));
 8000700:	bf00      	nop
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	889b      	ldrh	r3, [r3, #4]
 800070a:	4619      	mov	r1, r3
 800070c:	4610      	mov	r0, r2
 800070e:	f000 feaf 	bl	8001470 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f4      	bne.n	8000702 <HX711_Read+0xe>

    // Lecture des données sur 24 bits
    for (uint8_t i = 0; i < 24; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	72fb      	strb	r3, [r7, #11]
 800071c:	e025      	b.n	800076a <HX711_Read+0x76>
        HAL_GPIO_WritePin(hx->sck_GPIO, hx->sck_Pin, GPIO_PIN_SET);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6898      	ldr	r0, [r3, #8]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	899b      	ldrh	r3, [r3, #12]
 8000726:	2201      	movs	r2, #1
 8000728:	4619      	mov	r1, r3
 800072a:	f000 feb9 	bl	80014a0 <HAL_GPIO_WritePin>
        delay_us(HX711_DELAY_US);
 800072e:	2001      	movs	r0, #1
 8000730:	f000 fa8c 	bl	8000c4c <delay_us>
        data = (data << 1) | HAL_GPIO_ReadPin(hx->dout_GPIO, hx->dout_Pin);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	005c      	lsls	r4, r3, #1
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	889b      	ldrh	r3, [r3, #4]
 8000740:	4619      	mov	r1, r3
 8000742:	4610      	mov	r0, r2
 8000744:	f000 fe94 	bl	8001470 <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	4323      	orrs	r3, r4
 800074c:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(hx->sck_GPIO, hx->sck_Pin, GPIO_PIN_RESET);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6898      	ldr	r0, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	899b      	ldrh	r3, [r3, #12]
 8000756:	2200      	movs	r2, #0
 8000758:	4619      	mov	r1, r3
 800075a:	f000 fea1 	bl	80014a0 <HAL_GPIO_WritePin>
        delay_us(HX711_DELAY_US);
 800075e:	2001      	movs	r0, #1
 8000760:	f000 fa74 	bl	8000c4c <delay_us>
    for (uint8_t i = 0; i < 24; i++) {
 8000764:	7afb      	ldrb	r3, [r7, #11]
 8000766:	3301      	adds	r3, #1
 8000768:	72fb      	strb	r3, [r7, #11]
 800076a:	7afb      	ldrb	r3, [r7, #11]
 800076c:	2b17      	cmp	r3, #23
 800076e:	d9d6      	bls.n	800071e <HX711_Read+0x2a>
    }
    // Envoi d'une impulsion supplémentaire, sélection du canal A, gain 128
    HAL_GPIO_WritePin(hx->sck_GPIO, hx->sck_Pin, GPIO_PIN_SET);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6898      	ldr	r0, [r3, #8]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	2201      	movs	r2, #1
 800077a:	4619      	mov	r1, r3
 800077c:	f000 fe90 	bl	80014a0 <HAL_GPIO_WritePin>
    delay_us(HX711_DELAY_US);
 8000780:	2001      	movs	r0, #1
 8000782:	f000 fa63 	bl	8000c4c <delay_us>
    HAL_GPIO_WritePin(hx->sck_GPIO, hx->sck_Pin, GPIO_PIN_RESET);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6898      	ldr	r0, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	899b      	ldrh	r3, [r3, #12]
 800078e:	2200      	movs	r2, #0
 8000790:	4619      	mov	r1, r3
 8000792:	f000 fe85 	bl	80014a0 <HAL_GPIO_WritePin>
    delay_us(HX711_DELAY_US);
 8000796:	2001      	movs	r0, #1
 8000798:	f000 fa58 	bl	8000c4c <delay_us>

    // Conversion en complément à deux (nombre signé)
    if (data & 0x800000) {
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <HX711_Read+0xba>
        data |= 0xFF000000;  // Extension du bit de signe
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80007ac:	60fb      	str	r3, [r7, #12]
    }

    return (int32_t)data;
 80007ae:	68fb      	ldr	r3, [r7, #12]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd90      	pop	{r4, r7, pc}

080007b8 <HX711_GetWeight>:

// **Obtention du poids**
int32_t HX711_GetWeight(HX711 *hx) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
    return (HX711_Read(hx) - hx->offset) / hx->scale;
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff97 	bl	80006f4 <HX711_Read>
 80007c6:	4602      	mov	r2, r0
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	ee07 3a90 	vmov	s15, r3
 80007d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80007dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007e4:	ee17 3a90 	vmov	r3, s15
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <HX711_Tare>:

// **Tarage**
void HX711_Tare(HX711 *hx, uint8_t times) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
    int32_t sum = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < times; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	72fb      	strb	r3, [r7, #11]
 8000804:	e009      	b.n	800081a <HX711_Tare+0x2a>
        sum += HX711_Read(hx);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ff74 	bl	80006f4 <HX711_Read>
 800080c:	4602      	mov	r2, r0
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	4413      	add	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < times; i++) {
 8000814:	7afb      	ldrb	r3, [r7, #11]
 8000816:	3301      	adds	r3, #1
 8000818:	72fb      	strb	r3, [r7, #11]
 800081a:	7afa      	ldrb	r2, [r7, #11]
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	429a      	cmp	r2, r3
 8000820:	d3f1      	bcc.n	8000806 <HX711_Tare+0x16>
    }
    hx->offset = sum / times;
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	fb92 f2f3 	sdiv	r2, r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	611a      	str	r2, [r3, #16]
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b090      	sub	sp, #64	@ 0x40
 800083c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083e:	f000 fae7 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000842:	f000 f83d 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000846:	f7ff fe93 	bl	8000570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800084a:	f000 fa2b 	bl	8000ca4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800084e:	f000 f97b 	bl	8000b48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  US_Init();
 8000852:	f000 f9e5 	bl	8000c20 <US_Init>
  printf("USART2 Initialisé ! Prêt à communiquer avec PuTTY...\r\n");
 8000856:	4815      	ldr	r0, [pc, #84]	@ (80008ac <main+0x74>)
 8000858:	f003 fb70 	bl	8003f3c <puts>
  HX711_Init(&hx711, GPIOC, GPIO_PIN_0, GPIOC, GPIO_PIN_1);
 800085c:	2302      	movs	r3, #2
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <main+0x78>)
 8000862:	2201      	movs	r2, #1
 8000864:	4912      	ldr	r1, [pc, #72]	@ (80008b0 <main+0x78>)
 8000866:	4813      	ldr	r0, [pc, #76]	@ (80008b4 <main+0x7c>)
 8000868:	f7ff ff1c 	bl	80006a4 <HX711_Init>
  HX711_Tare(&hx711, 10);  //HX711_Tare
 800086c:	210a      	movs	r1, #10
 800086e:	4811      	ldr	r0, [pc, #68]	@ (80008b4 <main+0x7c>)
 8000870:	f7ff ffbe 	bl	80007f0 <HX711_Tare>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int32_t weight = HX711_GetWeight(&hx711);
 8000874:	480f      	ldr	r0, [pc, #60]	@ (80008b4 <main+0x7c>)
 8000876:	f7ff ff9f 	bl	80007b8 <HX711_GetWeight>
 800087a:	6378      	str	r0, [r7, #52]	@ 0x34
	  char buf[50];
	  sprintf(buf, "Poids : %ld g\r\n", weight);
 800087c:	463b      	mov	r3, r7
 800087e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000880:	490d      	ldr	r1, [pc, #52]	@ (80008b8 <main+0x80>)
 8000882:	4618      	mov	r0, r3
 8000884:	f003 fb62 	bl	8003f4c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
 8000888:	463b      	mov	r3, r7
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fca0 	bl	80001d0 <strlen>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	4639      	mov	r1, r7
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	4808      	ldr	r0, [pc, #32]	@ (80008bc <main+0x84>)
 800089c:	f002 fcd8 	bl	8003250 <HAL_UART_Transmit>
	          HAL_Delay(1000);
 80008a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008a4:	f000 fb30 	bl	8000f08 <HAL_Delay>
  {
 80008a8:	bf00      	nop
 80008aa:	e7e3      	b.n	8000874 <main+0x3c>
 80008ac:	08004d44 	.word	0x08004d44
 80008b0:	48000800 	.word	0x48000800
 80008b4:	20000084 	.word	0x20000084
 80008b8:	08004d80 	.word	0x08004d80
 80008bc:	200000ec 	.word	0x200000ec

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b096      	sub	sp, #88	@ 0x58
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2244      	movs	r2, #68	@ 0x44
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f003 fc34 	bl	800413c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	463b      	mov	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008e6:	f000 fe01 	bl	80014ec <HAL_PWREx_ControlVoltageScaling>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008f0:	f000 f837 	bl	8000962 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f4:	2302      	movs	r3, #2
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fe:	2310      	movs	r3, #16
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000906:	2302      	movs	r3, #2
 8000908:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800090e:	230a      	movs	r3, #10
 8000910:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000912:	2307      	movs	r3, #7
 8000914:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fe38 	bl	8001598 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800092e:	f000 f818 	bl	8000962 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	230f      	movs	r3, #15
 8000934:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	2104      	movs	r1, #4
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fa00 	bl	8001d50 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000956:	f000 f804 	bl	8000962 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3758      	adds	r7, #88	@ 0x58
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000966:	b672      	cpsid	i
}
 8000968:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096a:	bf00      	nop
 800096c:	e7fd      	b.n	800096a <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097a:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <HAL_MspInit+0x44>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6613      	str	r3, [r2, #96]	@ 0x60
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <HAL_MspInit+0x44>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000992:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <HAL_MspInit+0x44>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000998:	6593      	str	r3, [r2, #88]	@ 0x58
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_MspInit+0x44>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <NMI_Handler+0x4>

080009c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <MemManage_Handler+0x4>

080009d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <UsageFault_Handler+0x4>

080009e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0e:	f000 fa5b 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e00a      	b.n	8000a3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a28:	f3af 8000 	nop.w
 8000a2c:	4601      	mov	r1, r0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1c5a      	adds	r2, r3, #1
 8000a32:	60ba      	str	r2, [r7, #8]
 8000a34:	b2ca      	uxtb	r2, r1
 8000a36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	dbf0      	blt.n	8000a28 <_read+0x12>
  }

  return len;
 8000a46:	687b      	ldr	r3, [r7, #4]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a78:	605a      	str	r2, [r3, #4]
  return 0;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <_isatty>:

int _isatty(int file)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a90:	2301      	movs	r3, #1
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac0:	4a14      	ldr	r2, [pc, #80]	@ (8000b14 <_sbrk+0x5c>)
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <_sbrk+0x60>)
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000acc:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <_sbrk+0x64>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <_sbrk+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d207      	bcs.n	8000af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae8:	f003 fb76 	bl	80041d8 <__errno>
 8000aec:	4603      	mov	r3, r0
 8000aee:	220c      	movs	r2, #12
 8000af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	e009      	b.n	8000b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af8:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afe:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a05      	ldr	r2, [pc, #20]	@ (8000b1c <_sbrk+0x64>)
 8000b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20018000 	.word	0x20018000
 8000b18:	00000400 	.word	0x00000400
 8000b1c:	2000009c 	.word	0x2000009c
 8000b20:	200002c8 	.word	0x200002c8

08000b24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b70:	224f      	movs	r2, #79	@ 0x4f
 8000b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8e:	4814      	ldr	r0, [pc, #80]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b90:	f001 ffbe 	bl	8002b10 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b9a:	f7ff fee2 	bl	8000962 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000bac:	f002 f870 	bl	8002c90 <HAL_TIM_ConfigClockSource>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bb6:	f7ff fed4 	bl	8000962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000bc8:	f002 fa6c 	bl	80030a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bd2:	f7ff fec6 	bl	8000962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	3720      	adds	r7, #32
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200000a0 	.word	0x200000a0

08000be4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bf4:	d10b      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <HAL_TIM_Base_MspInit+0x38>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <HAL_TIM_Base_MspInit+0x38>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_TIM_Base_MspInit+0x38>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <US_Init>:
#include "us.h"

extern TIM_HandleTypeDef htim2;  // Utilisation directe du handle TIM2 défini dans tim.c

// **1️⃣ Démarrage du chronomètre TIM2**
void US_Init(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim2);  // Démarre TIM2 sans réinitialiser son initialisation
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <US_Init+0x10>)
 8000c26:	f001 ffcb 	bl	8002bc0 <HAL_TIM_Base_Start>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000a0 	.word	0x200000a0

08000c34 <getMicros>:

// **2️⃣ Obtenir le temps actuel (en microsecondes)**
uint32_t getMicros(void) {
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);  // Lit la valeur du compteur de TIM2
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <getMicros+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	200000a0 	.word	0x200000a0

08000c4c <delay_us>:

// **3️⃣ Délai en microsecondes**
void delay_us(uint32_t us) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
    uint32_t start_time = getMicros();  // Enregistre le temps de départ
 8000c54:	f7ff ffee 	bl	8000c34 <getMicros>
 8000c58:	60f8      	str	r0, [r7, #12]
    while ((getMicros() - start_time) < us);  // Attente pendant la durée spécifiée en microsecondes
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffea 	bl	8000c34 <getMicros>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <delay_us+0x10>
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <_write>:
/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */
// **重定向 printf() 到 USART2**
int _write(int file, char *ptr, int len) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <_write+0x28>)
 8000c90:	f002 fade 	bl	8003250 <HAL_UART_Transmit>
    return len;
 8000c94:	687b      	ldr	r3, [r7, #4]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200000ec 	.word	0x200000ec

08000ca4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000caa:	4a15      	ldr	r2, [pc, #84]	@ (8000d00 <MX_USART2_UART_Init+0x5c>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000ce8:	f002 fa64 	bl	80031b4 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cf2:	f7ff fe36 	bl	8000962 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000ec 	.word	0x200000ec
 8000d00:	40004400 	.word	0x40004400

08000d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ac      	sub	sp, #176	@ 0xb0
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2288      	movs	r2, #136	@ 0x88
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fa09 	bl	800413c <memset>
  if(uartHandle->Instance==USART2)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a21      	ldr	r2, [pc, #132]	@ (8000db4 <HAL_UART_MspInit+0xb0>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d13b      	bne.n	8000dac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fa29 	bl	8002198 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d4c:	f7ff fe09 	bl	8000962 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d54:	4a18      	ldr	r2, [pc, #96]	@ (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5c:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6c:	4a12      	ldr	r2, [pc, #72]	@ (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d74:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d80:	230c      	movs	r3, #12
 8000d82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da8:	f000 f9b8 	bl	800111c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	37b0      	adds	r7, #176	@ 0xb0
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40004400 	.word	0x40004400
 8000db8:	40021000 	.word	0x40021000

08000dbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000df4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc0:	f7ff feb0 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	@ (8000dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e08 <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f003 f9fb 	bl	80041e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dee:	f7ff fd23 	bl	8000838 <main>

08000df2 <LoopForever>:

LoopForever:
    b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000df4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e00:	08004e1c 	.word	0x08004e1c
  ldr r2, =_sbss
 8000e04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e08:	200002c4 	.word	0x200002c4

08000e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_2_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_Init+0x3c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <HAL_Init+0x3c>)
 8000e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 f944 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 f80f 	bl	8000e50 <HAL_InitTick>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	e001      	b.n	8000e42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e3e:	f7ff fd97 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40022000 	.word	0x40022000

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e5c:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <HAL_InitTick+0x6c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d023      	beq.n	8000eac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e64:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <HAL_InitTick+0x70>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <HAL_InitTick+0x6c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f941 	bl	8001102 <HAL_SYSTICK_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10f      	bne.n	8000ea6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d809      	bhi.n	8000ea0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f000 f919 	bl	80010ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_InitTick+0x74>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e007      	b.n	8000eb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	e004      	b.n	8000eb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e001      	b.n	8000eb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000174 	.word	0x20000174

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	@ (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000174 	.word	0x20000174

08000f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_Delay+0x44>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f2e:	bf00      	nop
 8000f30:	f7ff ffde 	bl	8000ef0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	@ (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	@ (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	@ 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	@ 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff47 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff5c 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffb0 	bl	8001070 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112a:	e17f      	b.n	800142c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	2101      	movs	r1, #1
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8171 	beq.w	8001426 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b01      	cmp	r3, #1
 800114e:	d005      	beq.n	800115c <HAL_GPIO_Init+0x40>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d130      	bne.n	80011be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001192:	2201      	movs	r2, #1
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	091b      	lsrs	r3, r3, #4
 80011a8:	f003 0201 	and.w	r2, r3, #1
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d118      	bne.n	80011fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011d0:	2201      	movs	r2, #1
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	08db      	lsrs	r3, r3, #3
 80011e6:	f003 0201 	and.w	r2, r3, #1
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b03      	cmp	r3, #3
 8001206:	d017      	beq.n	8001238 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d123      	bne.n	800128c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	6939      	ldr	r1, [r7, #16]
 8001288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0203 	and.w	r2, r3, #3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80ac 	beq.w	8001426 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b5f      	ldr	r3, [pc, #380]	@ (800144c <HAL_GPIO_Init+0x330>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d2:	4a5e      	ldr	r2, [pc, #376]	@ (800144c <HAL_GPIO_Init+0x330>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012da:	4b5c      	ldr	r3, [pc, #368]	@ (800144c <HAL_GPIO_Init+0x330>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001450 <HAL_GPIO_Init+0x334>)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001310:	d025      	beq.n	800135e <HAL_GPIO_Init+0x242>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4f      	ldr	r2, [pc, #316]	@ (8001454 <HAL_GPIO_Init+0x338>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01f      	beq.n	800135a <HAL_GPIO_Init+0x23e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4e      	ldr	r2, [pc, #312]	@ (8001458 <HAL_GPIO_Init+0x33c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d019      	beq.n	8001356 <HAL_GPIO_Init+0x23a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4d      	ldr	r2, [pc, #308]	@ (800145c <HAL_GPIO_Init+0x340>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0x236>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4c      	ldr	r2, [pc, #304]	@ (8001460 <HAL_GPIO_Init+0x344>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00d      	beq.n	800134e <HAL_GPIO_Init+0x232>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4b      	ldr	r2, [pc, #300]	@ (8001464 <HAL_GPIO_Init+0x348>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_GPIO_Init+0x22e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4a      	ldr	r2, [pc, #296]	@ (8001468 <HAL_GPIO_Init+0x34c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d101      	bne.n	8001346 <HAL_GPIO_Init+0x22a>
 8001342:	2306      	movs	r3, #6
 8001344:	e00c      	b.n	8001360 <HAL_GPIO_Init+0x244>
 8001346:	2307      	movs	r3, #7
 8001348:	e00a      	b.n	8001360 <HAL_GPIO_Init+0x244>
 800134a:	2305      	movs	r3, #5
 800134c:	e008      	b.n	8001360 <HAL_GPIO_Init+0x244>
 800134e:	2304      	movs	r3, #4
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x244>
 8001352:	2303      	movs	r3, #3
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x244>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x244>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x244>
 800135e:	2300      	movs	r3, #0
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001370:	4937      	ldr	r1, [pc, #220]	@ (8001450 <HAL_GPIO_Init+0x334>)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800137e:	4b3b      	ldr	r3, [pc, #236]	@ (800146c <HAL_GPIO_Init+0x350>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a2:	4a32      	ldr	r2, [pc, #200]	@ (800146c <HAL_GPIO_Init+0x350>)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013a8:	4b30      	ldr	r3, [pc, #192]	@ (800146c <HAL_GPIO_Init+0x350>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013cc:	4a27      	ldr	r2, [pc, #156]	@ (800146c <HAL_GPIO_Init+0x350>)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013d2:	4b26      	ldr	r3, [pc, #152]	@ (800146c <HAL_GPIO_Init+0x350>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f6:	4a1d      	ldr	r2, [pc, #116]	@ (800146c <HAL_GPIO_Init+0x350>)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <HAL_GPIO_Init+0x350>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <HAL_GPIO_Init+0x350>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa22 f303 	lsr.w	r3, r2, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	f47f ae78 	bne.w	800112c <HAL_GPIO_Init+0x10>
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000
 8001454:	48000400 	.word	0x48000400
 8001458:	48000800 	.word	0x48000800
 800145c:	48000c00 	.word	0x48000c00
 8001460:	48001000 	.word	0x48001000
 8001464:	48001400 	.word	0x48001400
 8001468:	48001800 	.word	0x48001800
 800146c:	40010400 	.word	0x40010400

08001470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e001      	b.n	8001492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001492:	7bfb      	ldrb	r3, [r7, #15]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40007000 	.word	0x40007000

080014ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014fa:	d130      	bne.n	800155e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014fc:	4b23      	ldr	r3, [pc, #140]	@ (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001508:	d038      	beq.n	800157c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001512:	4a1e      	ldr	r2, [pc, #120]	@ (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001514:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001518:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2232      	movs	r2, #50	@ 0x32
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	4a1b      	ldr	r2, [pc, #108]	@ (8001594 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0c9b      	lsrs	r3, r3, #18
 800152c:	3301      	adds	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001530:	e002      	b.n	8001538 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3b01      	subs	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001544:	d102      	bne.n	800154c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f2      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001558:	d110      	bne.n	800157c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e00f      	b.n	800157e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800156a:	d007      	beq.n	800157c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800156c:	4b07      	ldr	r3, [pc, #28]	@ (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001574:	4a05      	ldr	r2, [pc, #20]	@ (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800157a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40007000 	.word	0x40007000
 8001590:	20000000 	.word	0x20000000
 8001594:	431bde83 	.word	0x431bde83

08001598 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e3ca      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015aa:	4b97      	ldr	r3, [pc, #604]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015b4:	4b94      	ldr	r3, [pc, #592]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80e4 	beq.w	8001794 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <HAL_RCC_OscConfig+0x4a>
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	f040 808b 	bne.w	80016f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	f040 8087 	bne.w	80016f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e2:	4b89      	ldr	r3, [pc, #548]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <HAL_RCC_OscConfig+0x62>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e3a2      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1a      	ldr	r2, [r3, #32]
 80015fe:	4b82      	ldr	r3, [pc, #520]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d004      	beq.n	8001614 <HAL_RCC_OscConfig+0x7c>
 800160a:	4b7f      	ldr	r3, [pc, #508]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001612:	e005      	b.n	8001620 <HAL_RCC_OscConfig+0x88>
 8001614:	4b7c      	ldr	r3, [pc, #496]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001620:	4293      	cmp	r3, r2
 8001622:	d223      	bcs.n	800166c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fd55 	bl	80020d8 <RCC_SetFlashLatencyFromMSIRange>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e383      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001638:	4b73      	ldr	r3, [pc, #460]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a72      	ldr	r2, [pc, #456]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b70      	ldr	r3, [pc, #448]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	496d      	ldr	r1, [pc, #436]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001656:	4b6c      	ldr	r3, [pc, #432]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	4968      	ldr	r1, [pc, #416]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
 800166a:	e025      	b.n	80016b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800166c:	4b66      	ldr	r3, [pc, #408]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a65      	ldr	r2, [pc, #404]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b63      	ldr	r3, [pc, #396]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4960      	ldr	r1, [pc, #384]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800168a:	4b5f      	ldr	r3, [pc, #380]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	495b      	ldr	r1, [pc, #364]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 800169a:	4313      	orrs	r3, r2
 800169c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d109      	bne.n	80016b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fd15 	bl	80020d8 <RCC_SetFlashLatencyFromMSIRange>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e343      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016b8:	f000 fc4a 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 80016bc:	4602      	mov	r2, r0
 80016be:	4b52      	ldr	r3, [pc, #328]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	4950      	ldr	r1, [pc, #320]	@ (800180c <HAL_RCC_OscConfig+0x274>)
 80016ca:	5ccb      	ldrb	r3, [r1, r3]
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
 80016d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001810 <HAL_RCC_OscConfig+0x278>)
 80016d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001814 <HAL_RCC_OscConfig+0x27c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fbb7 	bl	8000e50 <HAL_InitTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d052      	beq.n	8001792 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	e327      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d032      	beq.n	800175e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016f8:	4b43      	ldr	r3, [pc, #268]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a42      	ldr	r2, [pc, #264]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001704:	f7ff fbf4 	bl	8000ef0 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800170c:	f7ff fbf0 	bl	8000ef0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e310      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800171e:	4b3a      	ldr	r3, [pc, #232]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800172a:	4b37      	ldr	r3, [pc, #220]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a36      	ldr	r2, [pc, #216]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4931      	ldr	r1, [pc, #196]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001748:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	492c      	ldr	r1, [pc, #176]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
 800175c:	e01a      	b.n	8001794 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800175e:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a29      	ldr	r2, [pc, #164]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800176a:	f7ff fbc1 	bl	8000ef0 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001772:	f7ff fbbd 	bl	8000ef0 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e2dd      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001784:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x1da>
 8001790:	e000      	b.n	8001794 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001792:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d074      	beq.n	800188a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d005      	beq.n	80017b2 <HAL_RCC_OscConfig+0x21a>
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b0c      	cmp	r3, #12
 80017aa:	d10e      	bne.n	80017ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d10b      	bne.n	80017ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d064      	beq.n	8001888 <HAL_RCC_OscConfig+0x2f0>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d160      	bne.n	8001888 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e2ba      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x24a>
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80017da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e026      	b.n	8001830 <HAL_RCC_OscConfig+0x298>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017ea:	d115      	bne.n	8001818 <HAL_RCC_OscConfig+0x280>
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80017f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a02      	ldr	r2, [pc, #8]	@ (8001808 <HAL_RCC_OscConfig+0x270>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e014      	b.n	8001830 <HAL_RCC_OscConfig+0x298>
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	08004d90 	.word	0x08004d90
 8001810:	20000000 	.word	0x20000000
 8001814:	20000004 	.word	0x20000004
 8001818:	4ba0      	ldr	r3, [pc, #640]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a9f      	ldr	r2, [pc, #636]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 800181e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b9d      	ldr	r3, [pc, #628]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a9c      	ldr	r2, [pc, #624]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 800182a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800182e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fb5a 	bl	8000ef0 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fb56 	bl	8000ef0 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	@ 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e276      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001852:	4b92      	ldr	r3, [pc, #584]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x2a8>
 800185e:	e014      	b.n	800188a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fb46 	bl	8000ef0 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fb42 	bl	8000ef0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	@ 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e262      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187a:	4b88      	ldr	r3, [pc, #544]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x2d0>
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d060      	beq.n	8001958 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b04      	cmp	r3, #4
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_OscConfig+0x310>
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d119      	bne.n	80018d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d116      	bne.n	80018d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a8:	4b7c      	ldr	r3, [pc, #496]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_OscConfig+0x328>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e23f      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b76      	ldr	r3, [pc, #472]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	061b      	lsls	r3, r3, #24
 80018ce:	4973      	ldr	r1, [pc, #460]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d4:	e040      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d023      	beq.n	8001926 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018de:	4b6f      	ldr	r3, [pc, #444]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fb01 	bl	8000ef0 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff fafd 	bl	8000ef0 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e21d      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001904:	4b65      	ldr	r3, [pc, #404]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b62      	ldr	r3, [pc, #392]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	495f      	ldr	r1, [pc, #380]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
 8001924:	e018      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001926:	4b5d      	ldr	r3, [pc, #372]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a5c      	ldr	r2, [pc, #368]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 800192c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001932:	f7ff fadd 	bl	8000ef0 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193a:	f7ff fad9 	bl	8000ef0 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e1f9      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800194c:	4b53      	ldr	r3, [pc, #332]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b00      	cmp	r3, #0
 8001962:	d03c      	beq.n	80019de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 800196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001972:	4a4a      	ldr	r2, [pc, #296]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff fab8 	bl	8000ef0 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff fab4 	bl	8000ef0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1d4      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001996:	4b41      	ldr	r3, [pc, #260]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ef      	beq.n	8001984 <HAL_RCC_OscConfig+0x3ec>
 80019a4:	e01b      	b.n	80019de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a6:	4b3d      	ldr	r3, [pc, #244]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ac:	4a3b      	ldr	r2, [pc, #236]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff fa9b 	bl	8000ef0 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019be:	f7ff fa97 	bl	8000ef0 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1b7      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d0:	4b32      	ldr	r3, [pc, #200]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ef      	bne.n	80019be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80a6 	beq.w	8001b38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019f0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10d      	bne.n	8001a18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fc:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a00:	4a26      	ldr	r2, [pc, #152]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a08:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a14:	2301      	movs	r3, #1
 8001a16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a18:	4b21      	ldr	r3, [pc, #132]	@ (8001aa0 <HAL_RCC_OscConfig+0x508>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d118      	bne.n	8001a56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a24:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa0 <HAL_RCC_OscConfig+0x508>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa0 <HAL_RCC_OscConfig+0x508>)
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a30:	f7ff fa5e 	bl	8000ef0 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a38:	f7ff fa5a 	bl	8000ef0 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e17a      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_RCC_OscConfig+0x508>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d108      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4d8>
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a64:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a6e:	e029      	b.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d115      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x50c>
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7e:	4a07      	ldr	r2, [pc, #28]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8e:	4a03      	ldr	r2, [pc, #12]	@ (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a98:	e014      	b.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aaa:	4a9b      	ldr	r2, [pc, #620]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ab4:	4b98      	ldr	r3, [pc, #608]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aba:	4a97      	ldr	r2, [pc, #604]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001abc:	f023 0304 	bic.w	r3, r3, #4
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d016      	beq.n	8001afa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001acc:	f7ff fa10 	bl	8000ef0 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fa0c 	bl	8000ef0 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e12a      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aea:	4b8b      	ldr	r3, [pc, #556]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0ed      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x53c>
 8001af8:	e015      	b.n	8001b26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff f9f9 	bl	8000ef0 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7ff f9f5 	bl	8000ef0 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e113      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b18:	4b7f      	ldr	r3, [pc, #508]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ed      	bne.n	8001b02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b26:	7ffb      	ldrb	r3, [r7, #31]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4b7a      	ldr	r3, [pc, #488]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b30:	4a79      	ldr	r2, [pc, #484]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b36:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80fe 	beq.w	8001d3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	f040 80d0 	bne.w	8001cec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b4c:	4b72      	ldr	r3, [pc, #456]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d130      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d127      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d11f      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b8c:	2a07      	cmp	r2, #7
 8001b8e:	bf14      	ite	ne
 8001b90:	2201      	movne	r2, #1
 8001b92:	2200      	moveq	r2, #0
 8001b94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d113      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d109      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d06e      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	d069      	beq.n	8001c9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bc8:	4b53      	ldr	r3, [pc, #332]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bd4:	4b50      	ldr	r3, [pc, #320]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0ad      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001be4:	4b4c      	ldr	r3, [pc, #304]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001bea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bf0:	f7ff f97e 	bl	8000ef0 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff f97a 	bl	8000ef0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e09a      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c0a:	4b43      	ldr	r3, [pc, #268]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c16:	4b40      	ldr	r3, [pc, #256]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	4b40      	ldr	r3, [pc, #256]	@ (8001d1c <HAL_RCC_OscConfig+0x784>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c26:	3a01      	subs	r2, #1
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	4311      	orrs	r1, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c30:	0212      	lsls	r2, r2, #8
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c38:	0852      	lsrs	r2, r2, #1
 8001c3a:	3a01      	subs	r2, #1
 8001c3c:	0552      	lsls	r2, r2, #21
 8001c3e:	4311      	orrs	r1, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c44:	0852      	lsrs	r2, r2, #1
 8001c46:	3a01      	subs	r2, #1
 8001c48:	0652      	lsls	r2, r2, #25
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c50:	0912      	lsrs	r2, r2, #4
 8001c52:	0452      	lsls	r2, r2, #17
 8001c54:	430a      	orrs	r2, r1
 8001c56:	4930      	ldr	r1, [pc, #192]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2d      	ldr	r2, [pc, #180]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c68:	4b2b      	ldr	r3, [pc, #172]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c74:	f7ff f93c 	bl	8000ef0 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff f938 	bl	8000ef0 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e058      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8e:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c9a:	e050      	b.n	8001d3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e04f      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d148      	bne.n	8001d3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cac:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb8:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cc4:	f7ff f914 	bl	8000ef0 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff f910 	bl	8000ef0 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e030      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x734>
 8001cea:	e028      	b.n	8001d3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d023      	beq.n	8001d3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a08      	ldr	r2, [pc, #32]	@ (8001d18 <HAL_RCC_OscConfig+0x780>)
 8001cf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f8f7 	bl	8000ef0 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d04:	e00c      	b.n	8001d20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d06:	f7ff f8f3 	bl	8000ef0 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d905      	bls.n	8001d20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e013      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d20:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_RCC_OscConfig+0x7b0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1ec      	bne.n	8001d06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_RCC_OscConfig+0x7b0>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	4905      	ldr	r1, [pc, #20]	@ (8001d48 <HAL_RCC_OscConfig+0x7b0>)
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_RCC_OscConfig+0x7b4>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	60cb      	str	r3, [r1, #12]
 8001d38:	e001      	b.n	8001d3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3720      	adds	r7, #32
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	feeefffc 	.word	0xfeeefffc

08001d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0e7      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b75      	ldr	r3, [pc, #468]	@ (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d910      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b72      	ldr	r3, [pc, #456]	@ (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 0207 	bic.w	r2, r3, #7
 8001d7a:	4970      	ldr	r1, [pc, #448]	@ (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b6e      	ldr	r3, [pc, #440]	@ (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0cf      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d010      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	4b66      	ldr	r3, [pc, #408]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d908      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db0:	4b63      	ldr	r3, [pc, #396]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4960      	ldr	r1, [pc, #384]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d04c      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd6:	4b5a      	ldr	r3, [pc, #360]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d121      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0a6      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dee:	4b54      	ldr	r3, [pc, #336]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d115      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e09a      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e06:	4b4e      	ldr	r3, [pc, #312]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e08e      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e16:	4b4a      	ldr	r3, [pc, #296]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e086      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e26:	4b46      	ldr	r3, [pc, #280]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 0203 	bic.w	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4943      	ldr	r1, [pc, #268]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e38:	f7ff f85a 	bl	8000ef0 <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e40:	f7ff f856 	bl	8000ef0 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e06e      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	4b3a      	ldr	r3, [pc, #232]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 020c 	and.w	r2, r3, #12
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1eb      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d010      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	4b31      	ldr	r3, [pc, #196]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d208      	bcs.n	8001e96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b2e      	ldr	r3, [pc, #184]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	492b      	ldr	r1, [pc, #172]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e96:	4b29      	ldr	r3, [pc, #164]	@ (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d210      	bcs.n	8001ec6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea4:	4b25      	ldr	r3, [pc, #148]	@ (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 0207 	bic.w	r2, r3, #7
 8001eac:	4923      	ldr	r1, [pc, #140]	@ (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb4:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e036      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4918      	ldr	r1, [pc, #96]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d009      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef0:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4910      	ldr	r1, [pc, #64]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f04:	f000 f824 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	490b      	ldr	r1, [pc, #44]	@ (8001f44 <HAL_RCC_ClockConfig+0x1f4>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	4a09      	ldr	r2, [pc, #36]	@ (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001f22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f24:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_RCC_ClockConfig+0x1fc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe ff91 	bl	8000e50 <HAL_InitTick>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f32:	7afb      	ldrb	r3, [r7, #11]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08004d90 	.word	0x08004d90
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000004 	.word	0x20000004

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	@ 0x24
 8001f54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f68:	4b3b      	ldr	r3, [pc, #236]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x34>
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	d121      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d11e      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f84:	4b34      	ldr	r3, [pc, #208]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f90:	4b31      	ldr	r3, [pc, #196]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e005      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fac:	4a2b      	ldr	r2, [pc, #172]	@ (800205c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10d      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc8:	4b25      	ldr	r3, [pc, #148]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	e004      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd4:	4b23      	ldr	r3, [pc, #140]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d134      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fde:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d003      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d003      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0xac>
 8001ff4:	e005      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff8:	617b      	str	r3, [r7, #20]
      break;
 8001ffa:	e005      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ffc:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ffe:	617b      	str	r3, [r7, #20]
      break;
 8002000:	e002      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	617b      	str	r3, [r7, #20]
      break;
 8002006:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002008:	4b13      	ldr	r3, [pc, #76]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	3301      	adds	r3, #1
 8002014:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002016:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	fb03 f202 	mul.w	r2, r3, r2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800202e:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	0e5b      	lsrs	r3, r3, #25
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	3301      	adds	r3, #1
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002048:	69bb      	ldr	r3, [r7, #24]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	@ 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	08004da8 	.word	0x08004da8
 8002060:	00f42400 	.word	0x00f42400
 8002064:	007a1200 	.word	0x007a1200

08002068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <HAL_RCC_GetHCLKFreq+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002084:	f7ff fff0 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4904      	ldr	r1, [pc, #16]	@ (80020a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08004da0 	.word	0x08004da0

080020ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020b0:	f7ff ffda 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0adb      	lsrs	r3, r3, #11
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4904      	ldr	r1, [pc, #16]	@ (80020d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08004da0 	.word	0x08004da0

080020d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020f0:	f7ff f9ee 	bl	80014d0 <HAL_PWREx_GetVoltageRange>
 80020f4:	6178      	str	r0, [r7, #20]
 80020f6:	e014      	b.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020f8:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fc:	4a24      	ldr	r2, [pc, #144]	@ (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002102:	6593      	str	r3, [r2, #88]	@ 0x58
 8002104:	4b22      	ldr	r3, [pc, #136]	@ (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002110:	f7ff f9de 	bl	80014d0 <HAL_PWREx_GetVoltageRange>
 8002114:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002116:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211a:	4a1d      	ldr	r2, [pc, #116]	@ (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002120:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002128:	d10b      	bne.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b80      	cmp	r3, #128	@ 0x80
 800212e:	d919      	bls.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2ba0      	cmp	r3, #160	@ 0xa0
 8002134:	d902      	bls.n	800213c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002136:	2302      	movs	r3, #2
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	e013      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800213c:	2301      	movs	r3, #1
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	e010      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b80      	cmp	r3, #128	@ 0x80
 8002146:	d902      	bls.n	800214e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002148:	2303      	movs	r3, #3
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	e00a      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b80      	cmp	r3, #128	@ 0x80
 8002152:	d102      	bne.n	800215a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002154:	2302      	movs	r3, #2
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e004      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b70      	cmp	r3, #112	@ 0x70
 800215e:	d101      	bne.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002160:	2301      	movs	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 0207 	bic.w	r2, r3, #7
 800216c:	4909      	ldr	r1, [pc, #36]	@ (8002194 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002174:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	429a      	cmp	r2, r3
 8002180:	d001      	beq.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	40022000 	.word	0x40022000

08002198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021a0:	2300      	movs	r3, #0
 80021a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021a4:	2300      	movs	r3, #0
 80021a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d041      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021bc:	d02a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021c2:	d824      	bhi.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021c8:	d008      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021ce:	d81e      	bhi.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021d8:	d010      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021da:	e018      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021dc:	4b86      	ldr	r3, [pc, #536]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a85      	ldr	r2, [pc, #532]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e8:	e015      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fabb 	bl	800276c <RCCEx_PLLSAI1_Config>
 80021f6:	4603      	mov	r3, r0
 80021f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021fa:	e00c      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3320      	adds	r3, #32
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fba6 	bl	8002954 <RCCEx_PLLSAI2_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800220c:	e003      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	74fb      	strb	r3, [r7, #19]
      break;
 8002212:	e000      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002216:	7cfb      	ldrb	r3, [r7, #19]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10b      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800221c:	4b76      	ldr	r3, [pc, #472]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002222:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800222a:	4973      	ldr	r1, [pc, #460]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002232:	e001      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d041      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002248:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800224c:	d02a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800224e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002252:	d824      	bhi.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002258:	d008      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800225a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800225e:	d81e      	bhi.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002268:	d010      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800226a:	e018      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800226c:	4b62      	ldr	r3, [pc, #392]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a61      	ldr	r2, [pc, #388]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002276:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002278:	e015      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fa73 	bl	800276c <RCCEx_PLLSAI1_Config>
 8002286:	4603      	mov	r3, r0
 8002288:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800228a:	e00c      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3320      	adds	r3, #32
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fb5e 	bl	8002954 <RCCEx_PLLSAI2_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800229c:	e003      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	74fb      	strb	r3, [r7, #19]
      break;
 80022a2:	e000      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022ac:	4b52      	ldr	r3, [pc, #328]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022ba:	494f      	ldr	r1, [pc, #316]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022c2:	e001      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c4:	7cfb      	ldrb	r3, [r7, #19]
 80022c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80a0 	beq.w	8002416 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022da:	4b47      	ldr	r3, [pc, #284]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022ea:	2300      	movs	r3, #0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00d      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	4b41      	ldr	r3, [pc, #260]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f4:	4a40      	ldr	r2, [pc, #256]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80022fc:	4b3e      	ldr	r3, [pc, #248]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002308:	2301      	movs	r3, #1
 800230a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800230c:	4b3b      	ldr	r3, [pc, #236]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a3a      	ldr	r2, [pc, #232]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002316:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002318:	f7fe fdea 	bl	8000ef0 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800231e:	e009      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002320:	f7fe fde6 	bl	8000ef0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d902      	bls.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	74fb      	strb	r3, [r7, #19]
        break;
 8002332:	e005      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002334:	4b31      	ldr	r3, [pc, #196]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ef      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d15c      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002346:	4b2c      	ldr	r3, [pc, #176]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002350:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01f      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	429a      	cmp	r2, r3
 8002362:	d019      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002364:	4b24      	ldr	r3, [pc, #144]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800236e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002370:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002376:	4a20      	ldr	r2, [pc, #128]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002380:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002386:	4a1c      	ldr	r2, [pc, #112]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002390:	4a19      	ldr	r2, [pc, #100]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d016      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7fe fda5 	bl	8000ef0 <HAL_GetTick>
 80023a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a8:	e00b      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7fe fda1 	bl	8000ef0 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d902      	bls.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	74fb      	strb	r3, [r7, #19]
            break;
 80023c0:	e006      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c2:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ec      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023e6:	4904      	ldr	r1, [pc, #16]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023ee:	e009      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	74bb      	strb	r3, [r7, #18]
 80023f4:	e006      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002404:	7c7b      	ldrb	r3, [r7, #17]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d105      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240a:	4b9e      	ldr	r3, [pc, #632]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240e:	4a9d      	ldr	r2, [pc, #628]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002414:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002422:	4b98      	ldr	r3, [pc, #608]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002428:	f023 0203 	bic.w	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002430:	4994      	ldr	r1, [pc, #592]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002444:	4b8f      	ldr	r3, [pc, #572]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	f023 020c 	bic.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002452:	498c      	ldr	r1, [pc, #560]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002466:	4b87      	ldr	r3, [pc, #540]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	4983      	ldr	r1, [pc, #524]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002488:	4b7e      	ldr	r3, [pc, #504]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	497b      	ldr	r1, [pc, #492]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024aa:	4b76      	ldr	r3, [pc, #472]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b8:	4972      	ldr	r1, [pc, #456]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024cc:	4b6d      	ldr	r3, [pc, #436]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024da:	496a      	ldr	r1, [pc, #424]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ee:	4b65      	ldr	r3, [pc, #404]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fc:	4961      	ldr	r1, [pc, #388]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002510:	4b5c      	ldr	r3, [pc, #368]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002516:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251e:	4959      	ldr	r1, [pc, #356]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002532:	4b54      	ldr	r3, [pc, #336]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002538:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002540:	4950      	ldr	r1, [pc, #320]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002554:	4b4b      	ldr	r3, [pc, #300]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002562:	4948      	ldr	r1, [pc, #288]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002576:	4b43      	ldr	r3, [pc, #268]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002584:	493f      	ldr	r1, [pc, #252]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d028      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002598:	4b3a      	ldr	r3, [pc, #232]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025a6:	4937      	ldr	r1, [pc, #220]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025b6:	d106      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b8:	4b32      	ldr	r3, [pc, #200]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a31      	ldr	r2, [pc, #196]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025c2:	60d3      	str	r3, [r2, #12]
 80025c4:	e011      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025ce:	d10c      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	2101      	movs	r1, #1
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f8c8 	bl	800276c <RCCEx_PLLSAI1_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d028      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025f6:	4b23      	ldr	r3, [pc, #140]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002604:	491f      	ldr	r1, [pc, #124]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002614:	d106      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002616:	4b1b      	ldr	r3, [pc, #108]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	4a1a      	ldr	r2, [pc, #104]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002620:	60d3      	str	r3, [r2, #12]
 8002622:	e011      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002628:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800262c:	d10c      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3304      	adds	r3, #4
 8002632:	2101      	movs	r1, #1
 8002634:	4618      	mov	r0, r3
 8002636:	f000 f899 	bl	800276c <RCCEx_PLLSAI1_Config>
 800263a:	4603      	mov	r3, r0
 800263c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d02b      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002662:	4908      	ldr	r1, [pc, #32]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002672:	d109      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002674:	4b03      	ldr	r3, [pc, #12]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a02      	ldr	r2, [pc, #8]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800267e:	60d3      	str	r3, [r2, #12]
 8002680:	e014      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800268c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002690:	d10c      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3304      	adds	r3, #4
 8002696:	2101      	movs	r1, #1
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f867 	bl	800276c <RCCEx_PLLSAI1_Config>
 800269e:	4603      	mov	r3, r0
 80026a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d02f      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026c6:	4928      	ldr	r1, [pc, #160]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026d6:	d10d      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3304      	adds	r3, #4
 80026dc:	2102      	movs	r1, #2
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f844 	bl	800276c <RCCEx_PLLSAI1_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d014      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	74bb      	strb	r3, [r7, #18]
 80026f2:	e011      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3320      	adds	r3, #32
 8002702:	2102      	movs	r1, #2
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f925 	bl	8002954 <RCCEx_PLLSAI2_Config>
 800270a:	4603      	mov	r3, r0
 800270c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002724:	4b10      	ldr	r3, [pc, #64]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002732:	490d      	ldr	r1, [pc, #52]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002746:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002756:	4904      	ldr	r1, [pc, #16]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800275e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000

0800276c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800277a:	4b75      	ldr	r3, [pc, #468]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d018      	beq.n	80027b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002786:	4b72      	ldr	r3, [pc, #456]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0203 	and.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d10d      	bne.n	80027b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
       ||
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800279e:	4b6c      	ldr	r3, [pc, #432]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
       ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d047      	beq.n	8002842 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	e044      	b.n	8002842 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d018      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0x86>
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d825      	bhi.n	8002810 <RCCEx_PLLSAI1_Config+0xa4>
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d002      	beq.n	80027ce <RCCEx_PLLSAI1_Config+0x62>
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d009      	beq.n	80027e0 <RCCEx_PLLSAI1_Config+0x74>
 80027cc:	e020      	b.n	8002810 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ce:	4b60      	ldr	r3, [pc, #384]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11d      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027de:	e01a      	b.n	8002816 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027e0:	4b5b      	ldr	r3, [pc, #364]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d116      	bne.n	800281a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f0:	e013      	b.n	800281a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027f2:	4b57      	ldr	r3, [pc, #348]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027fe:	4b54      	ldr	r3, [pc, #336]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800280e:	e006      	b.n	800281e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      break;
 8002814:	e004      	b.n	8002820 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002816:	bf00      	nop
 8002818:	e002      	b.n	8002820 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800281a:	bf00      	nop
 800281c:	e000      	b.n	8002820 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800281e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10d      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002826:	4b4a      	ldr	r3, [pc, #296]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6819      	ldr	r1, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	430b      	orrs	r3, r1
 800283c:	4944      	ldr	r1, [pc, #272]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d17d      	bne.n	8002944 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002848:	4b41      	ldr	r3, [pc, #260]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a40      	ldr	r2, [pc, #256]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002854:	f7fe fb4c 	bl	8000ef0 <HAL_GetTick>
 8002858:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800285a:	e009      	b.n	8002870 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800285c:	f7fe fb48 	bl	8000ef0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d902      	bls.n	8002870 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	73fb      	strb	r3, [r7, #15]
        break;
 800286e:	e005      	b.n	800287c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002870:	4b37      	ldr	r3, [pc, #220]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1ef      	bne.n	800285c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d160      	bne.n	8002944 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002888:	4b31      	ldr	r3, [pc, #196]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6892      	ldr	r2, [r2, #8]
 8002898:	0211      	lsls	r1, r2, #8
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68d2      	ldr	r2, [r2, #12]
 800289e:	0912      	lsrs	r2, r2, #4
 80028a0:	0452      	lsls	r2, r2, #17
 80028a2:	430a      	orrs	r2, r1
 80028a4:	492a      	ldr	r1, [pc, #168]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	610b      	str	r3, [r1, #16]
 80028aa:	e027      	b.n	80028fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d112      	bne.n	80028d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028b2:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6892      	ldr	r2, [r2, #8]
 80028c2:	0211      	lsls	r1, r2, #8
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6912      	ldr	r2, [r2, #16]
 80028c8:	0852      	lsrs	r2, r2, #1
 80028ca:	3a01      	subs	r2, #1
 80028cc:	0552      	lsls	r2, r2, #21
 80028ce:	430a      	orrs	r2, r1
 80028d0:	491f      	ldr	r1, [pc, #124]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	610b      	str	r3, [r1, #16]
 80028d6:	e011      	b.n	80028fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6892      	ldr	r2, [r2, #8]
 80028e8:	0211      	lsls	r1, r2, #8
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6952      	ldr	r2, [r2, #20]
 80028ee:	0852      	lsrs	r2, r2, #1
 80028f0:	3a01      	subs	r2, #1
 80028f2:	0652      	lsls	r2, r2, #25
 80028f4:	430a      	orrs	r2, r1
 80028f6:	4916      	ldr	r1, [pc, #88]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028fc:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a13      	ldr	r2, [pc, #76]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002902:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002906:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe faf2 	bl	8000ef0 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800290e:	e009      	b.n	8002924 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002910:	f7fe faee 	bl	8000ef0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d902      	bls.n	8002924 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	73fb      	strb	r3, [r7, #15]
          break;
 8002922:	e005      	b.n	8002930 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002924:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ef      	beq.n	8002910 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	4904      	ldr	r1, [pc, #16]	@ (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000

08002954 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002962:	4b6a      	ldr	r3, [pc, #424]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d018      	beq.n	80029a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800296e:	4b67      	ldr	r3, [pc, #412]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0203 	and.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d10d      	bne.n	800299a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
       ||
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002986:	4b61      	ldr	r3, [pc, #388]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	091b      	lsrs	r3, r3, #4
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
       ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d047      	beq.n	8002a2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
 800299e:	e044      	b.n	8002a2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d018      	beq.n	80029da <RCCEx_PLLSAI2_Config+0x86>
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d825      	bhi.n	80029f8 <RCCEx_PLLSAI2_Config+0xa4>
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d002      	beq.n	80029b6 <RCCEx_PLLSAI2_Config+0x62>
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d009      	beq.n	80029c8 <RCCEx_PLLSAI2_Config+0x74>
 80029b4:	e020      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029b6:	4b55      	ldr	r3, [pc, #340]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d11d      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c6:	e01a      	b.n	80029fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029c8:	4b50      	ldr	r3, [pc, #320]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d116      	bne.n	8002a02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d8:	e013      	b.n	8002a02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029da:	4b4c      	ldr	r3, [pc, #304]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029e6:	4b49      	ldr	r3, [pc, #292]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029f6:	e006      	b.n	8002a06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      break;
 80029fc:	e004      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029fe:	bf00      	nop
 8002a00:	e002      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a02:	bf00      	nop
 8002a04:	e000      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a06:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10d      	bne.n	8002a2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	430b      	orrs	r3, r1
 8002a24:	4939      	ldr	r1, [pc, #228]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d167      	bne.n	8002b00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a30:	4b36      	ldr	r3, [pc, #216]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a35      	ldr	r2, [pc, #212]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fa58 	bl	8000ef0 <HAL_GetTick>
 8002a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a42:	e009      	b.n	8002a58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a44:	f7fe fa54 	bl	8000ef0 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d902      	bls.n	8002a58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	73fb      	strb	r3, [r7, #15]
        break;
 8002a56:	e005      	b.n	8002a64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a58:	4b2c      	ldr	r3, [pc, #176]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ef      	bne.n	8002a44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d14a      	bne.n	8002b00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d111      	bne.n	8002a94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a70:	4b26      	ldr	r3, [pc, #152]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6892      	ldr	r2, [r2, #8]
 8002a80:	0211      	lsls	r1, r2, #8
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68d2      	ldr	r2, [r2, #12]
 8002a86:	0912      	lsrs	r2, r2, #4
 8002a88:	0452      	lsls	r2, r2, #17
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	491f      	ldr	r1, [pc, #124]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	614b      	str	r3, [r1, #20]
 8002a92:	e011      	b.n	8002ab8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a94:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6892      	ldr	r2, [r2, #8]
 8002aa4:	0211      	lsls	r1, r2, #8
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6912      	ldr	r2, [r2, #16]
 8002aaa:	0852      	lsrs	r2, r2, #1
 8002aac:	3a01      	subs	r2, #1
 8002aae:	0652      	lsls	r2, r2, #25
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	4916      	ldr	r1, [pc, #88]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ab8:	4b14      	ldr	r3, [pc, #80]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a13      	ldr	r2, [pc, #76]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fe fa14 	bl	8000ef0 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aca:	e009      	b.n	8002ae0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002acc:	f7fe fa10 	bl	8000ef0 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d902      	bls.n	8002ae0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ade:	e005      	b.n	8002aec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ef      	beq.n	8002acc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002af2:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	4904      	ldr	r1, [pc, #16]	@ (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000

08002b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e049      	b.n	8002bb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fe f854 	bl	8000be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f000 f968 	bl	8002e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d001      	beq.n	8002bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e047      	b.n	8002c68 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a23      	ldr	r2, [pc, #140]	@ (8002c74 <HAL_TIM_Base_Start+0xb4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01d      	beq.n	8002c26 <HAL_TIM_Base_Start+0x66>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf2:	d018      	beq.n	8002c26 <HAL_TIM_Base_Start+0x66>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c78 <HAL_TIM_Base_Start+0xb8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_TIM_Base_Start+0x66>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1e      	ldr	r2, [pc, #120]	@ (8002c7c <HAL_TIM_Base_Start+0xbc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00e      	beq.n	8002c26 <HAL_TIM_Base_Start+0x66>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002c80 <HAL_TIM_Base_Start+0xc0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d009      	beq.n	8002c26 <HAL_TIM_Base_Start+0x66>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1b      	ldr	r2, [pc, #108]	@ (8002c84 <HAL_TIM_Base_Start+0xc4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_TIM_Base_Start+0x66>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a19      	ldr	r2, [pc, #100]	@ (8002c88 <HAL_TIM_Base_Start+0xc8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d115      	bne.n	8002c52 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	4b17      	ldr	r3, [pc, #92]	@ (8002c8c <HAL_TIM_Base_Start+0xcc>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d015      	beq.n	8002c64 <HAL_TIM_Base_Start+0xa4>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c3e:	d011      	beq.n	8002c64 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c50:	e008      	b.n	8002c64 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e000      	b.n	8002c66 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40000800 	.word	0x40000800
 8002c80:	40000c00 	.word	0x40000c00
 8002c84:	40013400 	.word	0x40013400
 8002c88:	40014000 	.word	0x40014000
 8002c8c:	00010007 	.word	0x00010007

08002c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_TIM_ConfigClockSource+0x1c>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e0b6      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x18a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ce8:	d03e      	beq.n	8002d68 <HAL_TIM_ConfigClockSource+0xd8>
 8002cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cee:	f200 8087 	bhi.w	8002e00 <HAL_TIM_ConfigClockSource+0x170>
 8002cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cf6:	f000 8086 	beq.w	8002e06 <HAL_TIM_ConfigClockSource+0x176>
 8002cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cfe:	d87f      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x170>
 8002d00:	2b70      	cmp	r3, #112	@ 0x70
 8002d02:	d01a      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0xaa>
 8002d04:	2b70      	cmp	r3, #112	@ 0x70
 8002d06:	d87b      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x170>
 8002d08:	2b60      	cmp	r3, #96	@ 0x60
 8002d0a:	d050      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0x11e>
 8002d0c:	2b60      	cmp	r3, #96	@ 0x60
 8002d0e:	d877      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x170>
 8002d10:	2b50      	cmp	r3, #80	@ 0x50
 8002d12:	d03c      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0xfe>
 8002d14:	2b50      	cmp	r3, #80	@ 0x50
 8002d16:	d873      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x170>
 8002d18:	2b40      	cmp	r3, #64	@ 0x40
 8002d1a:	d058      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x13e>
 8002d1c:	2b40      	cmp	r3, #64	@ 0x40
 8002d1e:	d86f      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x170>
 8002d20:	2b30      	cmp	r3, #48	@ 0x30
 8002d22:	d064      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0x15e>
 8002d24:	2b30      	cmp	r3, #48	@ 0x30
 8002d26:	d86b      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x170>
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d060      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0x15e>
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d867      	bhi.n	8002e00 <HAL_TIM_ConfigClockSource+0x170>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d05c      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0x15e>
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d05a      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0x15e>
 8002d38:	e062      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d4a:	f000 f98b 	bl	8003064 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	609a      	str	r2, [r3, #8]
      break;
 8002d66:	e04f      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d78:	f000 f974 	bl	8003064 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d8a:	609a      	str	r2, [r3, #8]
      break;
 8002d8c:	e03c      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f000 f8e8 	bl	8002f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2150      	movs	r1, #80	@ 0x50
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f941 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002dac:	e02c      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f000 f907 	bl	8002fce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2160      	movs	r1, #96	@ 0x60
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f931 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002dcc:	e01c      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f000 f8c8 	bl	8002f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2140      	movs	r1, #64	@ 0x40
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f921 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002dec:	e00c      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f000 f918 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002dfe:	e003      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      break;
 8002e04:	e000      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a46      	ldr	r2, [pc, #280]	@ (8002f50 <TIM_Base_SetConfig+0x12c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <TIM_Base_SetConfig+0x40>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e42:	d00f      	beq.n	8002e64 <TIM_Base_SetConfig+0x40>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a43      	ldr	r2, [pc, #268]	@ (8002f54 <TIM_Base_SetConfig+0x130>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00b      	beq.n	8002e64 <TIM_Base_SetConfig+0x40>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a42      	ldr	r2, [pc, #264]	@ (8002f58 <TIM_Base_SetConfig+0x134>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d007      	beq.n	8002e64 <TIM_Base_SetConfig+0x40>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a41      	ldr	r2, [pc, #260]	@ (8002f5c <TIM_Base_SetConfig+0x138>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d003      	beq.n	8002e64 <TIM_Base_SetConfig+0x40>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a40      	ldr	r2, [pc, #256]	@ (8002f60 <TIM_Base_SetConfig+0x13c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d108      	bne.n	8002e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a35      	ldr	r2, [pc, #212]	@ (8002f50 <TIM_Base_SetConfig+0x12c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01f      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e84:	d01b      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a32      	ldr	r2, [pc, #200]	@ (8002f54 <TIM_Base_SetConfig+0x130>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d017      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a31      	ldr	r2, [pc, #196]	@ (8002f58 <TIM_Base_SetConfig+0x134>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a30      	ldr	r2, [pc, #192]	@ (8002f5c <TIM_Base_SetConfig+0x138>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00f      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8002f60 <TIM_Base_SetConfig+0x13c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00b      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2e      	ldr	r2, [pc, #184]	@ (8002f64 <TIM_Base_SetConfig+0x140>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002f68 <TIM_Base_SetConfig+0x144>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d003      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f6c <TIM_Base_SetConfig+0x148>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d108      	bne.n	8002ed0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a16      	ldr	r2, [pc, #88]	@ (8002f50 <TIM_Base_SetConfig+0x12c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00f      	beq.n	8002f1c <TIM_Base_SetConfig+0xf8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a18      	ldr	r2, [pc, #96]	@ (8002f60 <TIM_Base_SetConfig+0x13c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00b      	beq.n	8002f1c <TIM_Base_SetConfig+0xf8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a17      	ldr	r2, [pc, #92]	@ (8002f64 <TIM_Base_SetConfig+0x140>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <TIM_Base_SetConfig+0xf8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a16      	ldr	r2, [pc, #88]	@ (8002f68 <TIM_Base_SetConfig+0x144>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d003      	beq.n	8002f1c <TIM_Base_SetConfig+0xf8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a15      	ldr	r2, [pc, #84]	@ (8002f6c <TIM_Base_SetConfig+0x148>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d103      	bne.n	8002f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d105      	bne.n	8002f42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f023 0201 	bic.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	611a      	str	r2, [r3, #16]
  }
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40000800 	.word	0x40000800
 8002f5c:	40000c00 	.word	0x40000c00
 8002f60:	40013400 	.word	0x40013400
 8002f64:	40014000 	.word	0x40014000
 8002f68:	40014400 	.word	0x40014400
 8002f6c:	40014800 	.word	0x40014800

08002f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f023 0201 	bic.w	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f023 030a 	bic.w	r3, r3, #10
 8002fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b087      	sub	sp, #28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f023 0210 	bic.w	r2, r3, #16
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	031b      	lsls	r3, r3, #12
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800300a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	621a      	str	r2, [r3, #32]
}
 8003022:	bf00      	nop
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	f043 0307 	orr.w	r3, r3, #7
 8003050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	609a      	str	r2, [r3, #8]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800307e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	021a      	lsls	r2, r3, #8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	431a      	orrs	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4313      	orrs	r3, r2
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e068      	b.n	800318e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2e      	ldr	r2, [pc, #184]	@ (800319c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2d      	ldr	r2, [pc, #180]	@ (80031a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d108      	bne.n	8003102 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80030f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003108:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1e      	ldr	r2, [pc, #120]	@ (800319c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01d      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312e:	d018      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1b      	ldr	r2, [pc, #108]	@ (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1a      	ldr	r2, [pc, #104]	@ (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00e      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a18      	ldr	r2, [pc, #96]	@ (80031ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a13      	ldr	r2, [pc, #76]	@ (80031a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d004      	beq.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a14      	ldr	r2, [pc, #80]	@ (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d10c      	bne.n	800317c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003168:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	4313      	orrs	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40013400 	.word	0x40013400
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40000800 	.word	0x40000800
 80031ac:	40000c00 	.word	0x40000c00
 80031b0:	40014000 	.word	0x40014000

080031b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e040      	b.n	8003248 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fd94 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2224      	movs	r2, #36	@ 0x24
 80031e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fb6a 	bl	80038d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f8af 	bl	8003364 <UART_SetConfig>
 8003206:	4603      	mov	r3, r0
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e01b      	b.n	8003248 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800321e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800322e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fbe9 	bl	8003a18 <UART_CheckIdleState>
 8003246:	4603      	mov	r3, r0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	@ 0x28
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003264:	2b20      	cmp	r3, #32
 8003266:	d177      	bne.n	8003358 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_UART_Transmit+0x24>
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e070      	b.n	800335a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2221      	movs	r2, #33	@ 0x21
 8003284:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003286:	f7fd fe33 	bl	8000ef0 <HAL_GetTick>
 800328a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	88fa      	ldrh	r2, [r7, #6]
 8003298:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a4:	d108      	bne.n	80032b8 <HAL_UART_Transmit+0x68>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d104      	bne.n	80032b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	e003      	b.n	80032c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032c0:	e02f      	b.n	8003322 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	@ 0x80
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fc4b 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e03b      	b.n	800335a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	881a      	ldrh	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f4:	b292      	uxth	r2, r2
 80032f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	3302      	adds	r3, #2
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	e007      	b.n	8003310 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3301      	adds	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1c9      	bne.n	80032c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2200      	movs	r2, #0
 8003336:	2140      	movs	r1, #64	@ 0x40
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fc15 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e005      	b.n	800335a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e000      	b.n	800335a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b08a      	sub	sp, #40	@ 0x28
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	431a      	orrs	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	431a      	orrs	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	4313      	orrs	r3, r2
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4ba4      	ldr	r3, [pc, #656]	@ (8003624 <UART_SetConfig+0x2c0>)
 8003394:	4013      	ands	r3, r2
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800339c:	430b      	orrs	r3, r1
 800339e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a99      	ldr	r2, [pc, #612]	@ (8003628 <UART_SetConfig+0x2c4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033cc:	4313      	orrs	r3, r2
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a90      	ldr	r2, [pc, #576]	@ (800362c <UART_SetConfig+0x2c8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d126      	bne.n	800343c <UART_SetConfig+0xd8>
 80033ee:	4b90      	ldr	r3, [pc, #576]	@ (8003630 <UART_SetConfig+0x2cc>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d81b      	bhi.n	8003434 <UART_SetConfig+0xd0>
 80033fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003404 <UART_SetConfig+0xa0>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003415 	.word	0x08003415
 8003408:	08003425 	.word	0x08003425
 800340c:	0800341d 	.word	0x0800341d
 8003410:	0800342d 	.word	0x0800342d
 8003414:	2301      	movs	r3, #1
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800341a:	e116      	b.n	800364a <UART_SetConfig+0x2e6>
 800341c:	2302      	movs	r3, #2
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003422:	e112      	b.n	800364a <UART_SetConfig+0x2e6>
 8003424:	2304      	movs	r3, #4
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800342a:	e10e      	b.n	800364a <UART_SetConfig+0x2e6>
 800342c:	2308      	movs	r3, #8
 800342e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003432:	e10a      	b.n	800364a <UART_SetConfig+0x2e6>
 8003434:	2310      	movs	r3, #16
 8003436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800343a:	e106      	b.n	800364a <UART_SetConfig+0x2e6>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a7c      	ldr	r2, [pc, #496]	@ (8003634 <UART_SetConfig+0x2d0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d138      	bne.n	80034b8 <UART_SetConfig+0x154>
 8003446:	4b7a      	ldr	r3, [pc, #488]	@ (8003630 <UART_SetConfig+0x2cc>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b0c      	cmp	r3, #12
 8003452:	d82d      	bhi.n	80034b0 <UART_SetConfig+0x14c>
 8003454:	a201      	add	r2, pc, #4	@ (adr r2, 800345c <UART_SetConfig+0xf8>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003491 	.word	0x08003491
 8003460:	080034b1 	.word	0x080034b1
 8003464:	080034b1 	.word	0x080034b1
 8003468:	080034b1 	.word	0x080034b1
 800346c:	080034a1 	.word	0x080034a1
 8003470:	080034b1 	.word	0x080034b1
 8003474:	080034b1 	.word	0x080034b1
 8003478:	080034b1 	.word	0x080034b1
 800347c:	08003499 	.word	0x08003499
 8003480:	080034b1 	.word	0x080034b1
 8003484:	080034b1 	.word	0x080034b1
 8003488:	080034b1 	.word	0x080034b1
 800348c:	080034a9 	.word	0x080034a9
 8003490:	2300      	movs	r3, #0
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003496:	e0d8      	b.n	800364a <UART_SetConfig+0x2e6>
 8003498:	2302      	movs	r3, #2
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800349e:	e0d4      	b.n	800364a <UART_SetConfig+0x2e6>
 80034a0:	2304      	movs	r3, #4
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a6:	e0d0      	b.n	800364a <UART_SetConfig+0x2e6>
 80034a8:	2308      	movs	r3, #8
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ae:	e0cc      	b.n	800364a <UART_SetConfig+0x2e6>
 80034b0:	2310      	movs	r3, #16
 80034b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b6:	e0c8      	b.n	800364a <UART_SetConfig+0x2e6>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003638 <UART_SetConfig+0x2d4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d125      	bne.n	800350e <UART_SetConfig+0x1aa>
 80034c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003630 <UART_SetConfig+0x2cc>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034cc:	2b30      	cmp	r3, #48	@ 0x30
 80034ce:	d016      	beq.n	80034fe <UART_SetConfig+0x19a>
 80034d0:	2b30      	cmp	r3, #48	@ 0x30
 80034d2:	d818      	bhi.n	8003506 <UART_SetConfig+0x1a2>
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d00a      	beq.n	80034ee <UART_SetConfig+0x18a>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d814      	bhi.n	8003506 <UART_SetConfig+0x1a2>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <UART_SetConfig+0x182>
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d008      	beq.n	80034f6 <UART_SetConfig+0x192>
 80034e4:	e00f      	b.n	8003506 <UART_SetConfig+0x1a2>
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ec:	e0ad      	b.n	800364a <UART_SetConfig+0x2e6>
 80034ee:	2302      	movs	r3, #2
 80034f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034f4:	e0a9      	b.n	800364a <UART_SetConfig+0x2e6>
 80034f6:	2304      	movs	r3, #4
 80034f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034fc:	e0a5      	b.n	800364a <UART_SetConfig+0x2e6>
 80034fe:	2308      	movs	r3, #8
 8003500:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003504:	e0a1      	b.n	800364a <UART_SetConfig+0x2e6>
 8003506:	2310      	movs	r3, #16
 8003508:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350c:	e09d      	b.n	800364a <UART_SetConfig+0x2e6>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a4a      	ldr	r2, [pc, #296]	@ (800363c <UART_SetConfig+0x2d8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d125      	bne.n	8003564 <UART_SetConfig+0x200>
 8003518:	4b45      	ldr	r3, [pc, #276]	@ (8003630 <UART_SetConfig+0x2cc>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003522:	2bc0      	cmp	r3, #192	@ 0xc0
 8003524:	d016      	beq.n	8003554 <UART_SetConfig+0x1f0>
 8003526:	2bc0      	cmp	r3, #192	@ 0xc0
 8003528:	d818      	bhi.n	800355c <UART_SetConfig+0x1f8>
 800352a:	2b80      	cmp	r3, #128	@ 0x80
 800352c:	d00a      	beq.n	8003544 <UART_SetConfig+0x1e0>
 800352e:	2b80      	cmp	r3, #128	@ 0x80
 8003530:	d814      	bhi.n	800355c <UART_SetConfig+0x1f8>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <UART_SetConfig+0x1d8>
 8003536:	2b40      	cmp	r3, #64	@ 0x40
 8003538:	d008      	beq.n	800354c <UART_SetConfig+0x1e8>
 800353a:	e00f      	b.n	800355c <UART_SetConfig+0x1f8>
 800353c:	2300      	movs	r3, #0
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003542:	e082      	b.n	800364a <UART_SetConfig+0x2e6>
 8003544:	2302      	movs	r3, #2
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800354a:	e07e      	b.n	800364a <UART_SetConfig+0x2e6>
 800354c:	2304      	movs	r3, #4
 800354e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003552:	e07a      	b.n	800364a <UART_SetConfig+0x2e6>
 8003554:	2308      	movs	r3, #8
 8003556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800355a:	e076      	b.n	800364a <UART_SetConfig+0x2e6>
 800355c:	2310      	movs	r3, #16
 800355e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003562:	e072      	b.n	800364a <UART_SetConfig+0x2e6>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a35      	ldr	r2, [pc, #212]	@ (8003640 <UART_SetConfig+0x2dc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d12a      	bne.n	80035c4 <UART_SetConfig+0x260>
 800356e:	4b30      	ldr	r3, [pc, #192]	@ (8003630 <UART_SetConfig+0x2cc>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003574:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003578:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800357c:	d01a      	beq.n	80035b4 <UART_SetConfig+0x250>
 800357e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003582:	d81b      	bhi.n	80035bc <UART_SetConfig+0x258>
 8003584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003588:	d00c      	beq.n	80035a4 <UART_SetConfig+0x240>
 800358a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800358e:	d815      	bhi.n	80035bc <UART_SetConfig+0x258>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <UART_SetConfig+0x238>
 8003594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003598:	d008      	beq.n	80035ac <UART_SetConfig+0x248>
 800359a:	e00f      	b.n	80035bc <UART_SetConfig+0x258>
 800359c:	2300      	movs	r3, #0
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035a2:	e052      	b.n	800364a <UART_SetConfig+0x2e6>
 80035a4:	2302      	movs	r3, #2
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035aa:	e04e      	b.n	800364a <UART_SetConfig+0x2e6>
 80035ac:	2304      	movs	r3, #4
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b2:	e04a      	b.n	800364a <UART_SetConfig+0x2e6>
 80035b4:	2308      	movs	r3, #8
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ba:	e046      	b.n	800364a <UART_SetConfig+0x2e6>
 80035bc:	2310      	movs	r3, #16
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035c2:	e042      	b.n	800364a <UART_SetConfig+0x2e6>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a17      	ldr	r2, [pc, #92]	@ (8003628 <UART_SetConfig+0x2c4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d13a      	bne.n	8003644 <UART_SetConfig+0x2e0>
 80035ce:	4b18      	ldr	r3, [pc, #96]	@ (8003630 <UART_SetConfig+0x2cc>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035dc:	d01a      	beq.n	8003614 <UART_SetConfig+0x2b0>
 80035de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035e2:	d81b      	bhi.n	800361c <UART_SetConfig+0x2b8>
 80035e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035e8:	d00c      	beq.n	8003604 <UART_SetConfig+0x2a0>
 80035ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035ee:	d815      	bhi.n	800361c <UART_SetConfig+0x2b8>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <UART_SetConfig+0x298>
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f8:	d008      	beq.n	800360c <UART_SetConfig+0x2a8>
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x2b8>
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003602:	e022      	b.n	800364a <UART_SetConfig+0x2e6>
 8003604:	2302      	movs	r3, #2
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360a:	e01e      	b.n	800364a <UART_SetConfig+0x2e6>
 800360c:	2304      	movs	r3, #4
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003612:	e01a      	b.n	800364a <UART_SetConfig+0x2e6>
 8003614:	2308      	movs	r3, #8
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800361a:	e016      	b.n	800364a <UART_SetConfig+0x2e6>
 800361c:	2310      	movs	r3, #16
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003622:	e012      	b.n	800364a <UART_SetConfig+0x2e6>
 8003624:	efff69f3 	.word	0xefff69f3
 8003628:	40008000 	.word	0x40008000
 800362c:	40013800 	.word	0x40013800
 8003630:	40021000 	.word	0x40021000
 8003634:	40004400 	.word	0x40004400
 8003638:	40004800 	.word	0x40004800
 800363c:	40004c00 	.word	0x40004c00
 8003640:	40005000 	.word	0x40005000
 8003644:	2310      	movs	r3, #16
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a9f      	ldr	r2, [pc, #636]	@ (80038cc <UART_SetConfig+0x568>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d17a      	bne.n	800374a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003654:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003658:	2b08      	cmp	r3, #8
 800365a:	d824      	bhi.n	80036a6 <UART_SetConfig+0x342>
 800365c:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <UART_SetConfig+0x300>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003689 	.word	0x08003689
 8003668:	080036a7 	.word	0x080036a7
 800366c:	08003691 	.word	0x08003691
 8003670:	080036a7 	.word	0x080036a7
 8003674:	08003697 	.word	0x08003697
 8003678:	080036a7 	.word	0x080036a7
 800367c:	080036a7 	.word	0x080036a7
 8003680:	080036a7 	.word	0x080036a7
 8003684:	0800369f 	.word	0x0800369f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003688:	f7fe fcfa 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 800368c:	61f8      	str	r0, [r7, #28]
        break;
 800368e:	e010      	b.n	80036b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003690:	4b8f      	ldr	r3, [pc, #572]	@ (80038d0 <UART_SetConfig+0x56c>)
 8003692:	61fb      	str	r3, [r7, #28]
        break;
 8003694:	e00d      	b.n	80036b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003696:	f7fe fc5b 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 800369a:	61f8      	str	r0, [r7, #28]
        break;
 800369c:	e009      	b.n	80036b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036a2:	61fb      	str	r3, [r7, #28]
        break;
 80036a4:	e005      	b.n	80036b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80fb 	beq.w	80038b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d305      	bcc.n	80036d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d903      	bls.n	80036de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036dc:	e0e8      	b.n	80038b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	2200      	movs	r2, #0
 80036e2:	461c      	mov	r4, r3
 80036e4:	4615      	mov	r5, r2
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	022b      	lsls	r3, r5, #8
 80036f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036f4:	0222      	lsls	r2, r4, #8
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	6849      	ldr	r1, [r1, #4]
 80036fa:	0849      	lsrs	r1, r1, #1
 80036fc:	2000      	movs	r0, #0
 80036fe:	4688      	mov	r8, r1
 8003700:	4681      	mov	r9, r0
 8003702:	eb12 0a08 	adds.w	sl, r2, r8
 8003706:	eb43 0b09 	adc.w	fp, r3, r9
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003718:	4650      	mov	r0, sl
 800371a:	4659      	mov	r1, fp
 800371c:	f7fc fdb0 	bl	8000280 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4613      	mov	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800372e:	d308      	bcc.n	8003742 <UART_SetConfig+0x3de>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003736:	d204      	bcs.n	8003742 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	60da      	str	r2, [r3, #12]
 8003740:	e0b6      	b.n	80038b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003748:	e0b2      	b.n	80038b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003752:	d15e      	bne.n	8003812 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003754:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003758:	2b08      	cmp	r3, #8
 800375a:	d828      	bhi.n	80037ae <UART_SetConfig+0x44a>
 800375c:	a201      	add	r2, pc, #4	@ (adr r2, 8003764 <UART_SetConfig+0x400>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	08003789 	.word	0x08003789
 8003768:	08003791 	.word	0x08003791
 800376c:	08003799 	.word	0x08003799
 8003770:	080037af 	.word	0x080037af
 8003774:	0800379f 	.word	0x0800379f
 8003778:	080037af 	.word	0x080037af
 800377c:	080037af 	.word	0x080037af
 8003780:	080037af 	.word	0x080037af
 8003784:	080037a7 	.word	0x080037a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003788:	f7fe fc7a 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 800378c:	61f8      	str	r0, [r7, #28]
        break;
 800378e:	e014      	b.n	80037ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003790:	f7fe fc8c 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 8003794:	61f8      	str	r0, [r7, #28]
        break;
 8003796:	e010      	b.n	80037ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003798:	4b4d      	ldr	r3, [pc, #308]	@ (80038d0 <UART_SetConfig+0x56c>)
 800379a:	61fb      	str	r3, [r7, #28]
        break;
 800379c:	e00d      	b.n	80037ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800379e:	f7fe fbd7 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 80037a2:	61f8      	str	r0, [r7, #28]
        break;
 80037a4:	e009      	b.n	80037ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037aa:	61fb      	str	r3, [r7, #28]
        break;
 80037ac:	e005      	b.n	80037ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d077      	beq.n	80038b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005a      	lsls	r2, r3, #1
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	441a      	add	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b0f      	cmp	r3, #15
 80037da:	d916      	bls.n	800380a <UART_SetConfig+0x4a6>
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e2:	d212      	bcs.n	800380a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f023 030f 	bic.w	r3, r3, #15
 80037ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	8afb      	ldrh	r3, [r7, #22]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	8afa      	ldrh	r2, [r7, #22]
 8003806:	60da      	str	r2, [r3, #12]
 8003808:	e052      	b.n	80038b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003810:	e04e      	b.n	80038b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003812:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003816:	2b08      	cmp	r3, #8
 8003818:	d827      	bhi.n	800386a <UART_SetConfig+0x506>
 800381a:	a201      	add	r2, pc, #4	@ (adr r2, 8003820 <UART_SetConfig+0x4bc>)
 800381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003820:	08003845 	.word	0x08003845
 8003824:	0800384d 	.word	0x0800384d
 8003828:	08003855 	.word	0x08003855
 800382c:	0800386b 	.word	0x0800386b
 8003830:	0800385b 	.word	0x0800385b
 8003834:	0800386b 	.word	0x0800386b
 8003838:	0800386b 	.word	0x0800386b
 800383c:	0800386b 	.word	0x0800386b
 8003840:	08003863 	.word	0x08003863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003844:	f7fe fc1c 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8003848:	61f8      	str	r0, [r7, #28]
        break;
 800384a:	e014      	b.n	8003876 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800384c:	f7fe fc2e 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 8003850:	61f8      	str	r0, [r7, #28]
        break;
 8003852:	e010      	b.n	8003876 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003854:	4b1e      	ldr	r3, [pc, #120]	@ (80038d0 <UART_SetConfig+0x56c>)
 8003856:	61fb      	str	r3, [r7, #28]
        break;
 8003858:	e00d      	b.n	8003876 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385a:	f7fe fb79 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 800385e:	61f8      	str	r0, [r7, #28]
        break;
 8003860:	e009      	b.n	8003876 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003866:	61fb      	str	r3, [r7, #28]
        break;
 8003868:	e005      	b.n	8003876 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003874:	bf00      	nop
    }

    if (pclk != 0U)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d019      	beq.n	80038b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	085a      	lsrs	r2, r3, #1
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	441a      	add	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	fbb2 f3f3 	udiv	r3, r2, r3
 800388e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b0f      	cmp	r3, #15
 8003894:	d909      	bls.n	80038aa <UART_SetConfig+0x546>
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800389c:	d205      	bcs.n	80038aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	e002      	b.n	80038b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80038bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3728      	adds	r7, #40	@ 0x28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ca:	bf00      	nop
 80038cc:	40008000 	.word	0x40008000
 80038d0:	00f42400 	.word	0x00f42400

080038d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01a      	beq.n	80039ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039d2:	d10a      	bne.n	80039ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b098      	sub	sp, #96	@ 0x60
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a28:	f7fd fa62 	bl	8000ef0 <HAL_GetTick>
 8003a2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d12e      	bne.n	8003a9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a44:	2200      	movs	r2, #0
 8003a46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f88c 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d021      	beq.n	8003a9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e6      	bne.n	8003a56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e062      	b.n	8003b60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d149      	bne.n	8003b3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f856 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d03c      	beq.n	8003b3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	623b      	str	r3, [r7, #32]
   return(result);
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ae2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae8:	e841 2300 	strex	r3, r2, [r1]
 8003aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e6      	bne.n	8003ac2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3308      	adds	r3, #8
 8003afa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3308      	adds	r3, #8
 8003b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b14:	61fa      	str	r2, [r7, #28]
 8003b16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	69b9      	ldr	r1, [r7, #24]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	617b      	str	r3, [r7, #20]
   return(result);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e5      	bne.n	8003af4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e011      	b.n	8003b60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3758      	adds	r7, #88	@ 0x58
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b78:	e04f      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d04b      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b82:	f7fd f9b5 	bl	8000ef0 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d302      	bcc.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e04e      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d037      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b80      	cmp	r3, #128	@ 0x80
 8003bae:	d034      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b40      	cmp	r3, #64	@ 0x40
 8003bb4:	d031      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d110      	bne.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2208      	movs	r2, #8
 8003bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f838 	bl	8003c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e029      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bf4:	d111      	bne.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f81e 	bl	8003c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e00f      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d0a0      	beq.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b095      	sub	sp, #84	@ 0x54
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e6      	bne.n	8003c4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3308      	adds	r3, #8
 8003c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3308      	adds	r3, #8
 8003c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e5      	bne.n	8003c7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d118      	bne.n	8003cea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f023 0310 	bic.w	r3, r3, #16
 8003ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6979      	ldr	r1, [r7, #20]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e6      	bne.n	8003cb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cfe:	bf00      	nop
 8003d00:	3754      	adds	r7, #84	@ 0x54
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
	...

08003d0c <std>:
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	4604      	mov	r4, r0
 8003d12:	e9c0 3300 	strd	r3, r3, [r0]
 8003d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d1a:	6083      	str	r3, [r0, #8]
 8003d1c:	8181      	strh	r1, [r0, #12]
 8003d1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d20:	81c2      	strh	r2, [r0, #14]
 8003d22:	6183      	str	r3, [r0, #24]
 8003d24:	4619      	mov	r1, r3
 8003d26:	2208      	movs	r2, #8
 8003d28:	305c      	adds	r0, #92	@ 0x5c
 8003d2a:	f000 fa07 	bl	800413c <memset>
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d64 <std+0x58>)
 8003d30:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d32:	4b0d      	ldr	r3, [pc, #52]	@ (8003d68 <std+0x5c>)
 8003d34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d36:	4b0d      	ldr	r3, [pc, #52]	@ (8003d6c <std+0x60>)
 8003d38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <std+0x64>)
 8003d3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <std+0x68>)
 8003d40:	6224      	str	r4, [r4, #32]
 8003d42:	429c      	cmp	r4, r3
 8003d44:	d006      	beq.n	8003d54 <std+0x48>
 8003d46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d4a:	4294      	cmp	r4, r2
 8003d4c:	d002      	beq.n	8003d54 <std+0x48>
 8003d4e:	33d0      	adds	r3, #208	@ 0xd0
 8003d50:	429c      	cmp	r4, r3
 8003d52:	d105      	bne.n	8003d60 <std+0x54>
 8003d54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d5c:	f000 ba66 	b.w	800422c <__retarget_lock_init_recursive>
 8003d60:	bd10      	pop	{r4, pc}
 8003d62:	bf00      	nop
 8003d64:	08003f8d 	.word	0x08003f8d
 8003d68:	08003faf 	.word	0x08003faf
 8003d6c:	08003fe7 	.word	0x08003fe7
 8003d70:	0800400b 	.word	0x0800400b
 8003d74:	20000178 	.word	0x20000178

08003d78 <stdio_exit_handler>:
 8003d78:	4a02      	ldr	r2, [pc, #8]	@ (8003d84 <stdio_exit_handler+0xc>)
 8003d7a:	4903      	ldr	r1, [pc, #12]	@ (8003d88 <stdio_exit_handler+0x10>)
 8003d7c:	4803      	ldr	r0, [pc, #12]	@ (8003d8c <stdio_exit_handler+0x14>)
 8003d7e:	f000 b869 	b.w	8003e54 <_fwalk_sglue>
 8003d82:	bf00      	nop
 8003d84:	2000000c 	.word	0x2000000c
 8003d88:	08004af9 	.word	0x08004af9
 8003d8c:	2000001c 	.word	0x2000001c

08003d90 <cleanup_stdio>:
 8003d90:	6841      	ldr	r1, [r0, #4]
 8003d92:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc4 <cleanup_stdio+0x34>)
 8003d94:	4299      	cmp	r1, r3
 8003d96:	b510      	push	{r4, lr}
 8003d98:	4604      	mov	r4, r0
 8003d9a:	d001      	beq.n	8003da0 <cleanup_stdio+0x10>
 8003d9c:	f000 feac 	bl	8004af8 <_fflush_r>
 8003da0:	68a1      	ldr	r1, [r4, #8]
 8003da2:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <cleanup_stdio+0x38>)
 8003da4:	4299      	cmp	r1, r3
 8003da6:	d002      	beq.n	8003dae <cleanup_stdio+0x1e>
 8003da8:	4620      	mov	r0, r4
 8003daa:	f000 fea5 	bl	8004af8 <_fflush_r>
 8003dae:	68e1      	ldr	r1, [r4, #12]
 8003db0:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <cleanup_stdio+0x3c>)
 8003db2:	4299      	cmp	r1, r3
 8003db4:	d004      	beq.n	8003dc0 <cleanup_stdio+0x30>
 8003db6:	4620      	mov	r0, r4
 8003db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dbc:	f000 be9c 	b.w	8004af8 <_fflush_r>
 8003dc0:	bd10      	pop	{r4, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000178 	.word	0x20000178
 8003dc8:	200001e0 	.word	0x200001e0
 8003dcc:	20000248 	.word	0x20000248

08003dd0 <global_stdio_init.part.0>:
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <global_stdio_init.part.0+0x30>)
 8003dd4:	4c0b      	ldr	r4, [pc, #44]	@ (8003e04 <global_stdio_init.part.0+0x34>)
 8003dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8003e08 <global_stdio_init.part.0+0x38>)
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	4620      	mov	r0, r4
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2104      	movs	r1, #4
 8003de0:	f7ff ff94 	bl	8003d0c <std>
 8003de4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003de8:	2201      	movs	r2, #1
 8003dea:	2109      	movs	r1, #9
 8003dec:	f7ff ff8e 	bl	8003d0c <std>
 8003df0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003df4:	2202      	movs	r2, #2
 8003df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dfa:	2112      	movs	r1, #18
 8003dfc:	f7ff bf86 	b.w	8003d0c <std>
 8003e00:	200002b0 	.word	0x200002b0
 8003e04:	20000178 	.word	0x20000178
 8003e08:	08003d79 	.word	0x08003d79

08003e0c <__sfp_lock_acquire>:
 8003e0c:	4801      	ldr	r0, [pc, #4]	@ (8003e14 <__sfp_lock_acquire+0x8>)
 8003e0e:	f000 ba0e 	b.w	800422e <__retarget_lock_acquire_recursive>
 8003e12:	bf00      	nop
 8003e14:	200002b9 	.word	0x200002b9

08003e18 <__sfp_lock_release>:
 8003e18:	4801      	ldr	r0, [pc, #4]	@ (8003e20 <__sfp_lock_release+0x8>)
 8003e1a:	f000 ba09 	b.w	8004230 <__retarget_lock_release_recursive>
 8003e1e:	bf00      	nop
 8003e20:	200002b9 	.word	0x200002b9

08003e24 <__sinit>:
 8003e24:	b510      	push	{r4, lr}
 8003e26:	4604      	mov	r4, r0
 8003e28:	f7ff fff0 	bl	8003e0c <__sfp_lock_acquire>
 8003e2c:	6a23      	ldr	r3, [r4, #32]
 8003e2e:	b11b      	cbz	r3, 8003e38 <__sinit+0x14>
 8003e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e34:	f7ff bff0 	b.w	8003e18 <__sfp_lock_release>
 8003e38:	4b04      	ldr	r3, [pc, #16]	@ (8003e4c <__sinit+0x28>)
 8003e3a:	6223      	str	r3, [r4, #32]
 8003e3c:	4b04      	ldr	r3, [pc, #16]	@ (8003e50 <__sinit+0x2c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f5      	bne.n	8003e30 <__sinit+0xc>
 8003e44:	f7ff ffc4 	bl	8003dd0 <global_stdio_init.part.0>
 8003e48:	e7f2      	b.n	8003e30 <__sinit+0xc>
 8003e4a:	bf00      	nop
 8003e4c:	08003d91 	.word	0x08003d91
 8003e50:	200002b0 	.word	0x200002b0

08003e54 <_fwalk_sglue>:
 8003e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e58:	4607      	mov	r7, r0
 8003e5a:	4688      	mov	r8, r1
 8003e5c:	4614      	mov	r4, r2
 8003e5e:	2600      	movs	r6, #0
 8003e60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e64:	f1b9 0901 	subs.w	r9, r9, #1
 8003e68:	d505      	bpl.n	8003e76 <_fwalk_sglue+0x22>
 8003e6a:	6824      	ldr	r4, [r4, #0]
 8003e6c:	2c00      	cmp	r4, #0
 8003e6e:	d1f7      	bne.n	8003e60 <_fwalk_sglue+0xc>
 8003e70:	4630      	mov	r0, r6
 8003e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e76:	89ab      	ldrh	r3, [r5, #12]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d907      	bls.n	8003e8c <_fwalk_sglue+0x38>
 8003e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e80:	3301      	adds	r3, #1
 8003e82:	d003      	beq.n	8003e8c <_fwalk_sglue+0x38>
 8003e84:	4629      	mov	r1, r5
 8003e86:	4638      	mov	r0, r7
 8003e88:	47c0      	blx	r8
 8003e8a:	4306      	orrs	r6, r0
 8003e8c:	3568      	adds	r5, #104	@ 0x68
 8003e8e:	e7e9      	b.n	8003e64 <_fwalk_sglue+0x10>

08003e90 <_puts_r>:
 8003e90:	6a03      	ldr	r3, [r0, #32]
 8003e92:	b570      	push	{r4, r5, r6, lr}
 8003e94:	6884      	ldr	r4, [r0, #8]
 8003e96:	4605      	mov	r5, r0
 8003e98:	460e      	mov	r6, r1
 8003e9a:	b90b      	cbnz	r3, 8003ea0 <_puts_r+0x10>
 8003e9c:	f7ff ffc2 	bl	8003e24 <__sinit>
 8003ea0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ea2:	07db      	lsls	r3, r3, #31
 8003ea4:	d405      	bmi.n	8003eb2 <_puts_r+0x22>
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	0598      	lsls	r0, r3, #22
 8003eaa:	d402      	bmi.n	8003eb2 <_puts_r+0x22>
 8003eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eae:	f000 f9be 	bl	800422e <__retarget_lock_acquire_recursive>
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	0719      	lsls	r1, r3, #28
 8003eb6:	d502      	bpl.n	8003ebe <_puts_r+0x2e>
 8003eb8:	6923      	ldr	r3, [r4, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d135      	bne.n	8003f2a <_puts_r+0x9a>
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f000 f8e5 	bl	8004090 <__swsetup_r>
 8003ec6:	b380      	cbz	r0, 8003f2a <_puts_r+0x9a>
 8003ec8:	f04f 35ff 	mov.w	r5, #4294967295
 8003ecc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ece:	07da      	lsls	r2, r3, #31
 8003ed0:	d405      	bmi.n	8003ede <_puts_r+0x4e>
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	059b      	lsls	r3, r3, #22
 8003ed6:	d402      	bmi.n	8003ede <_puts_r+0x4e>
 8003ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eda:	f000 f9a9 	bl	8004230 <__retarget_lock_release_recursive>
 8003ede:	4628      	mov	r0, r5
 8003ee0:	bd70      	pop	{r4, r5, r6, pc}
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	da04      	bge.n	8003ef0 <_puts_r+0x60>
 8003ee6:	69a2      	ldr	r2, [r4, #24]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	dc17      	bgt.n	8003f1c <_puts_r+0x8c>
 8003eec:	290a      	cmp	r1, #10
 8003eee:	d015      	beq.n	8003f1c <_puts_r+0x8c>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	6022      	str	r2, [r4, #0]
 8003ef6:	7019      	strb	r1, [r3, #0]
 8003ef8:	68a3      	ldr	r3, [r4, #8]
 8003efa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003efe:	3b01      	subs	r3, #1
 8003f00:	60a3      	str	r3, [r4, #8]
 8003f02:	2900      	cmp	r1, #0
 8003f04:	d1ed      	bne.n	8003ee2 <_puts_r+0x52>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	da11      	bge.n	8003f2e <_puts_r+0x9e>
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	210a      	movs	r1, #10
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 f87f 	bl	8004012 <__swbuf_r>
 8003f14:	3001      	adds	r0, #1
 8003f16:	d0d7      	beq.n	8003ec8 <_puts_r+0x38>
 8003f18:	250a      	movs	r5, #10
 8003f1a:	e7d7      	b.n	8003ecc <_puts_r+0x3c>
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	4628      	mov	r0, r5
 8003f20:	f000 f877 	bl	8004012 <__swbuf_r>
 8003f24:	3001      	adds	r0, #1
 8003f26:	d1e7      	bne.n	8003ef8 <_puts_r+0x68>
 8003f28:	e7ce      	b.n	8003ec8 <_puts_r+0x38>
 8003f2a:	3e01      	subs	r6, #1
 8003f2c:	e7e4      	b.n	8003ef8 <_puts_r+0x68>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	6022      	str	r2, [r4, #0]
 8003f34:	220a      	movs	r2, #10
 8003f36:	701a      	strb	r2, [r3, #0]
 8003f38:	e7ee      	b.n	8003f18 <_puts_r+0x88>
	...

08003f3c <puts>:
 8003f3c:	4b02      	ldr	r3, [pc, #8]	@ (8003f48 <puts+0xc>)
 8003f3e:	4601      	mov	r1, r0
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	f7ff bfa5 	b.w	8003e90 <_puts_r>
 8003f46:	bf00      	nop
 8003f48:	20000018 	.word	0x20000018

08003f4c <siprintf>:
 8003f4c:	b40e      	push	{r1, r2, r3}
 8003f4e:	b500      	push	{lr}
 8003f50:	b09c      	sub	sp, #112	@ 0x70
 8003f52:	ab1d      	add	r3, sp, #116	@ 0x74
 8003f54:	9002      	str	r0, [sp, #8]
 8003f56:	9006      	str	r0, [sp, #24]
 8003f58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f5c:	4809      	ldr	r0, [pc, #36]	@ (8003f84 <siprintf+0x38>)
 8003f5e:	9107      	str	r1, [sp, #28]
 8003f60:	9104      	str	r1, [sp, #16]
 8003f62:	4909      	ldr	r1, [pc, #36]	@ (8003f88 <siprintf+0x3c>)
 8003f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f68:	9105      	str	r1, [sp, #20]
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	a902      	add	r1, sp, #8
 8003f70:	f000 fab4 	bl	80044dc <_svfiprintf_r>
 8003f74:	9b02      	ldr	r3, [sp, #8]
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	b01c      	add	sp, #112	@ 0x70
 8003f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f80:	b003      	add	sp, #12
 8003f82:	4770      	bx	lr
 8003f84:	20000018 	.word	0x20000018
 8003f88:	ffff0208 	.word	0xffff0208

08003f8c <__sread>:
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	460c      	mov	r4, r1
 8003f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f94:	f000 f8fc 	bl	8004190 <_read_r>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	bfab      	itete	ge
 8003f9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8003fa0:	181b      	addge	r3, r3, r0
 8003fa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003fa6:	bfac      	ite	ge
 8003fa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003faa:	81a3      	strhlt	r3, [r4, #12]
 8003fac:	bd10      	pop	{r4, pc}

08003fae <__swrite>:
 8003fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb2:	461f      	mov	r7, r3
 8003fb4:	898b      	ldrh	r3, [r1, #12]
 8003fb6:	05db      	lsls	r3, r3, #23
 8003fb8:	4605      	mov	r5, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	4616      	mov	r6, r2
 8003fbe:	d505      	bpl.n	8003fcc <__swrite+0x1e>
 8003fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f000 f8d0 	bl	800416c <_lseek_r>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	4632      	mov	r2, r6
 8003fda:	463b      	mov	r3, r7
 8003fdc:	4628      	mov	r0, r5
 8003fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe2:	f000 b8e7 	b.w	80041b4 <_write_r>

08003fe6 <__sseek>:
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	460c      	mov	r4, r1
 8003fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fee:	f000 f8bd 	bl	800416c <_lseek_r>
 8003ff2:	1c43      	adds	r3, r0, #1
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	bf15      	itete	ne
 8003ff8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ffa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ffe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004002:	81a3      	strheq	r3, [r4, #12]
 8004004:	bf18      	it	ne
 8004006:	81a3      	strhne	r3, [r4, #12]
 8004008:	bd10      	pop	{r4, pc}

0800400a <__sclose>:
 800400a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800400e:	f000 b89d 	b.w	800414c <_close_r>

08004012 <__swbuf_r>:
 8004012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004014:	460e      	mov	r6, r1
 8004016:	4614      	mov	r4, r2
 8004018:	4605      	mov	r5, r0
 800401a:	b118      	cbz	r0, 8004024 <__swbuf_r+0x12>
 800401c:	6a03      	ldr	r3, [r0, #32]
 800401e:	b90b      	cbnz	r3, 8004024 <__swbuf_r+0x12>
 8004020:	f7ff ff00 	bl	8003e24 <__sinit>
 8004024:	69a3      	ldr	r3, [r4, #24]
 8004026:	60a3      	str	r3, [r4, #8]
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	071a      	lsls	r2, r3, #28
 800402c:	d501      	bpl.n	8004032 <__swbuf_r+0x20>
 800402e:	6923      	ldr	r3, [r4, #16]
 8004030:	b943      	cbnz	r3, 8004044 <__swbuf_r+0x32>
 8004032:	4621      	mov	r1, r4
 8004034:	4628      	mov	r0, r5
 8004036:	f000 f82b 	bl	8004090 <__swsetup_r>
 800403a:	b118      	cbz	r0, 8004044 <__swbuf_r+0x32>
 800403c:	f04f 37ff 	mov.w	r7, #4294967295
 8004040:	4638      	mov	r0, r7
 8004042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	6922      	ldr	r2, [r4, #16]
 8004048:	1a98      	subs	r0, r3, r2
 800404a:	6963      	ldr	r3, [r4, #20]
 800404c:	b2f6      	uxtb	r6, r6
 800404e:	4283      	cmp	r3, r0
 8004050:	4637      	mov	r7, r6
 8004052:	dc05      	bgt.n	8004060 <__swbuf_r+0x4e>
 8004054:	4621      	mov	r1, r4
 8004056:	4628      	mov	r0, r5
 8004058:	f000 fd4e 	bl	8004af8 <_fflush_r>
 800405c:	2800      	cmp	r0, #0
 800405e:	d1ed      	bne.n	800403c <__swbuf_r+0x2a>
 8004060:	68a3      	ldr	r3, [r4, #8]
 8004062:	3b01      	subs	r3, #1
 8004064:	60a3      	str	r3, [r4, #8]
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	6022      	str	r2, [r4, #0]
 800406c:	701e      	strb	r6, [r3, #0]
 800406e:	6962      	ldr	r2, [r4, #20]
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	429a      	cmp	r2, r3
 8004074:	d004      	beq.n	8004080 <__swbuf_r+0x6e>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	07db      	lsls	r3, r3, #31
 800407a:	d5e1      	bpl.n	8004040 <__swbuf_r+0x2e>
 800407c:	2e0a      	cmp	r6, #10
 800407e:	d1df      	bne.n	8004040 <__swbuf_r+0x2e>
 8004080:	4621      	mov	r1, r4
 8004082:	4628      	mov	r0, r5
 8004084:	f000 fd38 	bl	8004af8 <_fflush_r>
 8004088:	2800      	cmp	r0, #0
 800408a:	d0d9      	beq.n	8004040 <__swbuf_r+0x2e>
 800408c:	e7d6      	b.n	800403c <__swbuf_r+0x2a>
	...

08004090 <__swsetup_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	4b29      	ldr	r3, [pc, #164]	@ (8004138 <__swsetup_r+0xa8>)
 8004094:	4605      	mov	r5, r0
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	460c      	mov	r4, r1
 800409a:	b118      	cbz	r0, 80040a4 <__swsetup_r+0x14>
 800409c:	6a03      	ldr	r3, [r0, #32]
 800409e:	b90b      	cbnz	r3, 80040a4 <__swsetup_r+0x14>
 80040a0:	f7ff fec0 	bl	8003e24 <__sinit>
 80040a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040a8:	0719      	lsls	r1, r3, #28
 80040aa:	d422      	bmi.n	80040f2 <__swsetup_r+0x62>
 80040ac:	06da      	lsls	r2, r3, #27
 80040ae:	d407      	bmi.n	80040c0 <__swsetup_r+0x30>
 80040b0:	2209      	movs	r2, #9
 80040b2:	602a      	str	r2, [r5, #0]
 80040b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040b8:	81a3      	strh	r3, [r4, #12]
 80040ba:	f04f 30ff 	mov.w	r0, #4294967295
 80040be:	e033      	b.n	8004128 <__swsetup_r+0x98>
 80040c0:	0758      	lsls	r0, r3, #29
 80040c2:	d512      	bpl.n	80040ea <__swsetup_r+0x5a>
 80040c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040c6:	b141      	cbz	r1, 80040da <__swsetup_r+0x4a>
 80040c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040cc:	4299      	cmp	r1, r3
 80040ce:	d002      	beq.n	80040d6 <__swsetup_r+0x46>
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 f8af 	bl	8004234 <_free_r>
 80040d6:	2300      	movs	r3, #0
 80040d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80040e0:	81a3      	strh	r3, [r4, #12]
 80040e2:	2300      	movs	r3, #0
 80040e4:	6063      	str	r3, [r4, #4]
 80040e6:	6923      	ldr	r3, [r4, #16]
 80040e8:	6023      	str	r3, [r4, #0]
 80040ea:	89a3      	ldrh	r3, [r4, #12]
 80040ec:	f043 0308 	orr.w	r3, r3, #8
 80040f0:	81a3      	strh	r3, [r4, #12]
 80040f2:	6923      	ldr	r3, [r4, #16]
 80040f4:	b94b      	cbnz	r3, 800410a <__swsetup_r+0x7a>
 80040f6:	89a3      	ldrh	r3, [r4, #12]
 80040f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80040fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004100:	d003      	beq.n	800410a <__swsetup_r+0x7a>
 8004102:	4621      	mov	r1, r4
 8004104:	4628      	mov	r0, r5
 8004106:	f000 fd45 	bl	8004b94 <__smakebuf_r>
 800410a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800410e:	f013 0201 	ands.w	r2, r3, #1
 8004112:	d00a      	beq.n	800412a <__swsetup_r+0x9a>
 8004114:	2200      	movs	r2, #0
 8004116:	60a2      	str	r2, [r4, #8]
 8004118:	6962      	ldr	r2, [r4, #20]
 800411a:	4252      	negs	r2, r2
 800411c:	61a2      	str	r2, [r4, #24]
 800411e:	6922      	ldr	r2, [r4, #16]
 8004120:	b942      	cbnz	r2, 8004134 <__swsetup_r+0xa4>
 8004122:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004126:	d1c5      	bne.n	80040b4 <__swsetup_r+0x24>
 8004128:	bd38      	pop	{r3, r4, r5, pc}
 800412a:	0799      	lsls	r1, r3, #30
 800412c:	bf58      	it	pl
 800412e:	6962      	ldrpl	r2, [r4, #20]
 8004130:	60a2      	str	r2, [r4, #8]
 8004132:	e7f4      	b.n	800411e <__swsetup_r+0x8e>
 8004134:	2000      	movs	r0, #0
 8004136:	e7f7      	b.n	8004128 <__swsetup_r+0x98>
 8004138:	20000018 	.word	0x20000018

0800413c <memset>:
 800413c:	4402      	add	r2, r0
 800413e:	4603      	mov	r3, r0
 8004140:	4293      	cmp	r3, r2
 8004142:	d100      	bne.n	8004146 <memset+0xa>
 8004144:	4770      	bx	lr
 8004146:	f803 1b01 	strb.w	r1, [r3], #1
 800414a:	e7f9      	b.n	8004140 <memset+0x4>

0800414c <_close_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	4d06      	ldr	r5, [pc, #24]	@ (8004168 <_close_r+0x1c>)
 8004150:	2300      	movs	r3, #0
 8004152:	4604      	mov	r4, r0
 8004154:	4608      	mov	r0, r1
 8004156:	602b      	str	r3, [r5, #0]
 8004158:	f7fc fc7a 	bl	8000a50 <_close>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_close_r+0x1a>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_close_r+0x1a>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	200002b4 	.word	0x200002b4

0800416c <_lseek_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4d07      	ldr	r5, [pc, #28]	@ (800418c <_lseek_r+0x20>)
 8004170:	4604      	mov	r4, r0
 8004172:	4608      	mov	r0, r1
 8004174:	4611      	mov	r1, r2
 8004176:	2200      	movs	r2, #0
 8004178:	602a      	str	r2, [r5, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	f7fc fc8f 	bl	8000a9e <_lseek>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_lseek_r+0x1e>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_lseek_r+0x1e>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	200002b4 	.word	0x200002b4

08004190 <_read_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4d07      	ldr	r5, [pc, #28]	@ (80041b0 <_read_r+0x20>)
 8004194:	4604      	mov	r4, r0
 8004196:	4608      	mov	r0, r1
 8004198:	4611      	mov	r1, r2
 800419a:	2200      	movs	r2, #0
 800419c:	602a      	str	r2, [r5, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	f7fc fc39 	bl	8000a16 <_read>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d102      	bne.n	80041ae <_read_r+0x1e>
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	b103      	cbz	r3, 80041ae <_read_r+0x1e>
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	200002b4 	.word	0x200002b4

080041b4 <_write_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4d07      	ldr	r5, [pc, #28]	@ (80041d4 <_write_r+0x20>)
 80041b8:	4604      	mov	r4, r0
 80041ba:	4608      	mov	r0, r1
 80041bc:	4611      	mov	r1, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	602a      	str	r2, [r5, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f7fc fd58 	bl	8000c78 <_write>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_write_r+0x1e>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_write_r+0x1e>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	200002b4 	.word	0x200002b4

080041d8 <__errno>:
 80041d8:	4b01      	ldr	r3, [pc, #4]	@ (80041e0 <__errno+0x8>)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000018 	.word	0x20000018

080041e4 <__libc_init_array>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	4d0d      	ldr	r5, [pc, #52]	@ (800421c <__libc_init_array+0x38>)
 80041e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004220 <__libc_init_array+0x3c>)
 80041ea:	1b64      	subs	r4, r4, r5
 80041ec:	10a4      	asrs	r4, r4, #2
 80041ee:	2600      	movs	r6, #0
 80041f0:	42a6      	cmp	r6, r4
 80041f2:	d109      	bne.n	8004208 <__libc_init_array+0x24>
 80041f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004224 <__libc_init_array+0x40>)
 80041f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004228 <__libc_init_array+0x44>)
 80041f8:	f000 fd98 	bl	8004d2c <_init>
 80041fc:	1b64      	subs	r4, r4, r5
 80041fe:	10a4      	asrs	r4, r4, #2
 8004200:	2600      	movs	r6, #0
 8004202:	42a6      	cmp	r6, r4
 8004204:	d105      	bne.n	8004212 <__libc_init_array+0x2e>
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	f855 3b04 	ldr.w	r3, [r5], #4
 800420c:	4798      	blx	r3
 800420e:	3601      	adds	r6, #1
 8004210:	e7ee      	b.n	80041f0 <__libc_init_array+0xc>
 8004212:	f855 3b04 	ldr.w	r3, [r5], #4
 8004216:	4798      	blx	r3
 8004218:	3601      	adds	r6, #1
 800421a:	e7f2      	b.n	8004202 <__libc_init_array+0x1e>
 800421c:	08004e14 	.word	0x08004e14
 8004220:	08004e14 	.word	0x08004e14
 8004224:	08004e14 	.word	0x08004e14
 8004228:	08004e18 	.word	0x08004e18

0800422c <__retarget_lock_init_recursive>:
 800422c:	4770      	bx	lr

0800422e <__retarget_lock_acquire_recursive>:
 800422e:	4770      	bx	lr

08004230 <__retarget_lock_release_recursive>:
 8004230:	4770      	bx	lr
	...

08004234 <_free_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4605      	mov	r5, r0
 8004238:	2900      	cmp	r1, #0
 800423a:	d041      	beq.n	80042c0 <_free_r+0x8c>
 800423c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004240:	1f0c      	subs	r4, r1, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	bfb8      	it	lt
 8004246:	18e4      	addlt	r4, r4, r3
 8004248:	f000 f8e0 	bl	800440c <__malloc_lock>
 800424c:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <_free_r+0x90>)
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	b933      	cbnz	r3, 8004260 <_free_r+0x2c>
 8004252:	6063      	str	r3, [r4, #4]
 8004254:	6014      	str	r4, [r2, #0]
 8004256:	4628      	mov	r0, r5
 8004258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800425c:	f000 b8dc 	b.w	8004418 <__malloc_unlock>
 8004260:	42a3      	cmp	r3, r4
 8004262:	d908      	bls.n	8004276 <_free_r+0x42>
 8004264:	6820      	ldr	r0, [r4, #0]
 8004266:	1821      	adds	r1, r4, r0
 8004268:	428b      	cmp	r3, r1
 800426a:	bf01      	itttt	eq
 800426c:	6819      	ldreq	r1, [r3, #0]
 800426e:	685b      	ldreq	r3, [r3, #4]
 8004270:	1809      	addeq	r1, r1, r0
 8004272:	6021      	streq	r1, [r4, #0]
 8004274:	e7ed      	b.n	8004252 <_free_r+0x1e>
 8004276:	461a      	mov	r2, r3
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	b10b      	cbz	r3, 8004280 <_free_r+0x4c>
 800427c:	42a3      	cmp	r3, r4
 800427e:	d9fa      	bls.n	8004276 <_free_r+0x42>
 8004280:	6811      	ldr	r1, [r2, #0]
 8004282:	1850      	adds	r0, r2, r1
 8004284:	42a0      	cmp	r0, r4
 8004286:	d10b      	bne.n	80042a0 <_free_r+0x6c>
 8004288:	6820      	ldr	r0, [r4, #0]
 800428a:	4401      	add	r1, r0
 800428c:	1850      	adds	r0, r2, r1
 800428e:	4283      	cmp	r3, r0
 8004290:	6011      	str	r1, [r2, #0]
 8004292:	d1e0      	bne.n	8004256 <_free_r+0x22>
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	6053      	str	r3, [r2, #4]
 800429a:	4408      	add	r0, r1
 800429c:	6010      	str	r0, [r2, #0]
 800429e:	e7da      	b.n	8004256 <_free_r+0x22>
 80042a0:	d902      	bls.n	80042a8 <_free_r+0x74>
 80042a2:	230c      	movs	r3, #12
 80042a4:	602b      	str	r3, [r5, #0]
 80042a6:	e7d6      	b.n	8004256 <_free_r+0x22>
 80042a8:	6820      	ldr	r0, [r4, #0]
 80042aa:	1821      	adds	r1, r4, r0
 80042ac:	428b      	cmp	r3, r1
 80042ae:	bf04      	itt	eq
 80042b0:	6819      	ldreq	r1, [r3, #0]
 80042b2:	685b      	ldreq	r3, [r3, #4]
 80042b4:	6063      	str	r3, [r4, #4]
 80042b6:	bf04      	itt	eq
 80042b8:	1809      	addeq	r1, r1, r0
 80042ba:	6021      	streq	r1, [r4, #0]
 80042bc:	6054      	str	r4, [r2, #4]
 80042be:	e7ca      	b.n	8004256 <_free_r+0x22>
 80042c0:	bd38      	pop	{r3, r4, r5, pc}
 80042c2:	bf00      	nop
 80042c4:	200002c0 	.word	0x200002c0

080042c8 <sbrk_aligned>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	4e0f      	ldr	r6, [pc, #60]	@ (8004308 <sbrk_aligned+0x40>)
 80042cc:	460c      	mov	r4, r1
 80042ce:	6831      	ldr	r1, [r6, #0]
 80042d0:	4605      	mov	r5, r0
 80042d2:	b911      	cbnz	r1, 80042da <sbrk_aligned+0x12>
 80042d4:	f000 fcd6 	bl	8004c84 <_sbrk_r>
 80042d8:	6030      	str	r0, [r6, #0]
 80042da:	4621      	mov	r1, r4
 80042dc:	4628      	mov	r0, r5
 80042de:	f000 fcd1 	bl	8004c84 <_sbrk_r>
 80042e2:	1c43      	adds	r3, r0, #1
 80042e4:	d103      	bne.n	80042ee <sbrk_aligned+0x26>
 80042e6:	f04f 34ff 	mov.w	r4, #4294967295
 80042ea:	4620      	mov	r0, r4
 80042ec:	bd70      	pop	{r4, r5, r6, pc}
 80042ee:	1cc4      	adds	r4, r0, #3
 80042f0:	f024 0403 	bic.w	r4, r4, #3
 80042f4:	42a0      	cmp	r0, r4
 80042f6:	d0f8      	beq.n	80042ea <sbrk_aligned+0x22>
 80042f8:	1a21      	subs	r1, r4, r0
 80042fa:	4628      	mov	r0, r5
 80042fc:	f000 fcc2 	bl	8004c84 <_sbrk_r>
 8004300:	3001      	adds	r0, #1
 8004302:	d1f2      	bne.n	80042ea <sbrk_aligned+0x22>
 8004304:	e7ef      	b.n	80042e6 <sbrk_aligned+0x1e>
 8004306:	bf00      	nop
 8004308:	200002bc 	.word	0x200002bc

0800430c <_malloc_r>:
 800430c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004310:	1ccd      	adds	r5, r1, #3
 8004312:	f025 0503 	bic.w	r5, r5, #3
 8004316:	3508      	adds	r5, #8
 8004318:	2d0c      	cmp	r5, #12
 800431a:	bf38      	it	cc
 800431c:	250c      	movcc	r5, #12
 800431e:	2d00      	cmp	r5, #0
 8004320:	4606      	mov	r6, r0
 8004322:	db01      	blt.n	8004328 <_malloc_r+0x1c>
 8004324:	42a9      	cmp	r1, r5
 8004326:	d904      	bls.n	8004332 <_malloc_r+0x26>
 8004328:	230c      	movs	r3, #12
 800432a:	6033      	str	r3, [r6, #0]
 800432c:	2000      	movs	r0, #0
 800432e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004332:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004408 <_malloc_r+0xfc>
 8004336:	f000 f869 	bl	800440c <__malloc_lock>
 800433a:	f8d8 3000 	ldr.w	r3, [r8]
 800433e:	461c      	mov	r4, r3
 8004340:	bb44      	cbnz	r4, 8004394 <_malloc_r+0x88>
 8004342:	4629      	mov	r1, r5
 8004344:	4630      	mov	r0, r6
 8004346:	f7ff ffbf 	bl	80042c8 <sbrk_aligned>
 800434a:	1c43      	adds	r3, r0, #1
 800434c:	4604      	mov	r4, r0
 800434e:	d158      	bne.n	8004402 <_malloc_r+0xf6>
 8004350:	f8d8 4000 	ldr.w	r4, [r8]
 8004354:	4627      	mov	r7, r4
 8004356:	2f00      	cmp	r7, #0
 8004358:	d143      	bne.n	80043e2 <_malloc_r+0xd6>
 800435a:	2c00      	cmp	r4, #0
 800435c:	d04b      	beq.n	80043f6 <_malloc_r+0xea>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	4639      	mov	r1, r7
 8004362:	4630      	mov	r0, r6
 8004364:	eb04 0903 	add.w	r9, r4, r3
 8004368:	f000 fc8c 	bl	8004c84 <_sbrk_r>
 800436c:	4581      	cmp	r9, r0
 800436e:	d142      	bne.n	80043f6 <_malloc_r+0xea>
 8004370:	6821      	ldr	r1, [r4, #0]
 8004372:	1a6d      	subs	r5, r5, r1
 8004374:	4629      	mov	r1, r5
 8004376:	4630      	mov	r0, r6
 8004378:	f7ff ffa6 	bl	80042c8 <sbrk_aligned>
 800437c:	3001      	adds	r0, #1
 800437e:	d03a      	beq.n	80043f6 <_malloc_r+0xea>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	442b      	add	r3, r5
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	f8d8 3000 	ldr.w	r3, [r8]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	bb62      	cbnz	r2, 80043e8 <_malloc_r+0xdc>
 800438e:	f8c8 7000 	str.w	r7, [r8]
 8004392:	e00f      	b.n	80043b4 <_malloc_r+0xa8>
 8004394:	6822      	ldr	r2, [r4, #0]
 8004396:	1b52      	subs	r2, r2, r5
 8004398:	d420      	bmi.n	80043dc <_malloc_r+0xd0>
 800439a:	2a0b      	cmp	r2, #11
 800439c:	d917      	bls.n	80043ce <_malloc_r+0xc2>
 800439e:	1961      	adds	r1, r4, r5
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	6025      	str	r5, [r4, #0]
 80043a4:	bf18      	it	ne
 80043a6:	6059      	strne	r1, [r3, #4]
 80043a8:	6863      	ldr	r3, [r4, #4]
 80043aa:	bf08      	it	eq
 80043ac:	f8c8 1000 	streq.w	r1, [r8]
 80043b0:	5162      	str	r2, [r4, r5]
 80043b2:	604b      	str	r3, [r1, #4]
 80043b4:	4630      	mov	r0, r6
 80043b6:	f000 f82f 	bl	8004418 <__malloc_unlock>
 80043ba:	f104 000b 	add.w	r0, r4, #11
 80043be:	1d23      	adds	r3, r4, #4
 80043c0:	f020 0007 	bic.w	r0, r0, #7
 80043c4:	1ac2      	subs	r2, r0, r3
 80043c6:	bf1c      	itt	ne
 80043c8:	1a1b      	subne	r3, r3, r0
 80043ca:	50a3      	strne	r3, [r4, r2]
 80043cc:	e7af      	b.n	800432e <_malloc_r+0x22>
 80043ce:	6862      	ldr	r2, [r4, #4]
 80043d0:	42a3      	cmp	r3, r4
 80043d2:	bf0c      	ite	eq
 80043d4:	f8c8 2000 	streq.w	r2, [r8]
 80043d8:	605a      	strne	r2, [r3, #4]
 80043da:	e7eb      	b.n	80043b4 <_malloc_r+0xa8>
 80043dc:	4623      	mov	r3, r4
 80043de:	6864      	ldr	r4, [r4, #4]
 80043e0:	e7ae      	b.n	8004340 <_malloc_r+0x34>
 80043e2:	463c      	mov	r4, r7
 80043e4:	687f      	ldr	r7, [r7, #4]
 80043e6:	e7b6      	b.n	8004356 <_malloc_r+0x4a>
 80043e8:	461a      	mov	r2, r3
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	d1fb      	bne.n	80043e8 <_malloc_r+0xdc>
 80043f0:	2300      	movs	r3, #0
 80043f2:	6053      	str	r3, [r2, #4]
 80043f4:	e7de      	b.n	80043b4 <_malloc_r+0xa8>
 80043f6:	230c      	movs	r3, #12
 80043f8:	6033      	str	r3, [r6, #0]
 80043fa:	4630      	mov	r0, r6
 80043fc:	f000 f80c 	bl	8004418 <__malloc_unlock>
 8004400:	e794      	b.n	800432c <_malloc_r+0x20>
 8004402:	6005      	str	r5, [r0, #0]
 8004404:	e7d6      	b.n	80043b4 <_malloc_r+0xa8>
 8004406:	bf00      	nop
 8004408:	200002c0 	.word	0x200002c0

0800440c <__malloc_lock>:
 800440c:	4801      	ldr	r0, [pc, #4]	@ (8004414 <__malloc_lock+0x8>)
 800440e:	f7ff bf0e 	b.w	800422e <__retarget_lock_acquire_recursive>
 8004412:	bf00      	nop
 8004414:	200002b8 	.word	0x200002b8

08004418 <__malloc_unlock>:
 8004418:	4801      	ldr	r0, [pc, #4]	@ (8004420 <__malloc_unlock+0x8>)
 800441a:	f7ff bf09 	b.w	8004230 <__retarget_lock_release_recursive>
 800441e:	bf00      	nop
 8004420:	200002b8 	.word	0x200002b8

08004424 <__ssputs_r>:
 8004424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004428:	688e      	ldr	r6, [r1, #8]
 800442a:	461f      	mov	r7, r3
 800442c:	42be      	cmp	r6, r7
 800442e:	680b      	ldr	r3, [r1, #0]
 8004430:	4682      	mov	sl, r0
 8004432:	460c      	mov	r4, r1
 8004434:	4690      	mov	r8, r2
 8004436:	d82d      	bhi.n	8004494 <__ssputs_r+0x70>
 8004438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800443c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004440:	d026      	beq.n	8004490 <__ssputs_r+0x6c>
 8004442:	6965      	ldr	r5, [r4, #20]
 8004444:	6909      	ldr	r1, [r1, #16]
 8004446:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800444a:	eba3 0901 	sub.w	r9, r3, r1
 800444e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004452:	1c7b      	adds	r3, r7, #1
 8004454:	444b      	add	r3, r9
 8004456:	106d      	asrs	r5, r5, #1
 8004458:	429d      	cmp	r5, r3
 800445a:	bf38      	it	cc
 800445c:	461d      	movcc	r5, r3
 800445e:	0553      	lsls	r3, r2, #21
 8004460:	d527      	bpl.n	80044b2 <__ssputs_r+0x8e>
 8004462:	4629      	mov	r1, r5
 8004464:	f7ff ff52 	bl	800430c <_malloc_r>
 8004468:	4606      	mov	r6, r0
 800446a:	b360      	cbz	r0, 80044c6 <__ssputs_r+0xa2>
 800446c:	6921      	ldr	r1, [r4, #16]
 800446e:	464a      	mov	r2, r9
 8004470:	f000 fc18 	bl	8004ca4 <memcpy>
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800447a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800447e:	81a3      	strh	r3, [r4, #12]
 8004480:	6126      	str	r6, [r4, #16]
 8004482:	6165      	str	r5, [r4, #20]
 8004484:	444e      	add	r6, r9
 8004486:	eba5 0509 	sub.w	r5, r5, r9
 800448a:	6026      	str	r6, [r4, #0]
 800448c:	60a5      	str	r5, [r4, #8]
 800448e:	463e      	mov	r6, r7
 8004490:	42be      	cmp	r6, r7
 8004492:	d900      	bls.n	8004496 <__ssputs_r+0x72>
 8004494:	463e      	mov	r6, r7
 8004496:	6820      	ldr	r0, [r4, #0]
 8004498:	4632      	mov	r2, r6
 800449a:	4641      	mov	r1, r8
 800449c:	f000 fbb6 	bl	8004c0c <memmove>
 80044a0:	68a3      	ldr	r3, [r4, #8]
 80044a2:	1b9b      	subs	r3, r3, r6
 80044a4:	60a3      	str	r3, [r4, #8]
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	4433      	add	r3, r6
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	2000      	movs	r0, #0
 80044ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b2:	462a      	mov	r2, r5
 80044b4:	f000 fc04 	bl	8004cc0 <_realloc_r>
 80044b8:	4606      	mov	r6, r0
 80044ba:	2800      	cmp	r0, #0
 80044bc:	d1e0      	bne.n	8004480 <__ssputs_r+0x5c>
 80044be:	6921      	ldr	r1, [r4, #16]
 80044c0:	4650      	mov	r0, sl
 80044c2:	f7ff feb7 	bl	8004234 <_free_r>
 80044c6:	230c      	movs	r3, #12
 80044c8:	f8ca 3000 	str.w	r3, [sl]
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295
 80044d8:	e7e9      	b.n	80044ae <__ssputs_r+0x8a>
	...

080044dc <_svfiprintf_r>:
 80044dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e0:	4698      	mov	r8, r3
 80044e2:	898b      	ldrh	r3, [r1, #12]
 80044e4:	061b      	lsls	r3, r3, #24
 80044e6:	b09d      	sub	sp, #116	@ 0x74
 80044e8:	4607      	mov	r7, r0
 80044ea:	460d      	mov	r5, r1
 80044ec:	4614      	mov	r4, r2
 80044ee:	d510      	bpl.n	8004512 <_svfiprintf_r+0x36>
 80044f0:	690b      	ldr	r3, [r1, #16]
 80044f2:	b973      	cbnz	r3, 8004512 <_svfiprintf_r+0x36>
 80044f4:	2140      	movs	r1, #64	@ 0x40
 80044f6:	f7ff ff09 	bl	800430c <_malloc_r>
 80044fa:	6028      	str	r0, [r5, #0]
 80044fc:	6128      	str	r0, [r5, #16]
 80044fe:	b930      	cbnz	r0, 800450e <_svfiprintf_r+0x32>
 8004500:	230c      	movs	r3, #12
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	b01d      	add	sp, #116	@ 0x74
 800450a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450e:	2340      	movs	r3, #64	@ 0x40
 8004510:	616b      	str	r3, [r5, #20]
 8004512:	2300      	movs	r3, #0
 8004514:	9309      	str	r3, [sp, #36]	@ 0x24
 8004516:	2320      	movs	r3, #32
 8004518:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800451c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004520:	2330      	movs	r3, #48	@ 0x30
 8004522:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80046c0 <_svfiprintf_r+0x1e4>
 8004526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800452a:	f04f 0901 	mov.w	r9, #1
 800452e:	4623      	mov	r3, r4
 8004530:	469a      	mov	sl, r3
 8004532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004536:	b10a      	cbz	r2, 800453c <_svfiprintf_r+0x60>
 8004538:	2a25      	cmp	r2, #37	@ 0x25
 800453a:	d1f9      	bne.n	8004530 <_svfiprintf_r+0x54>
 800453c:	ebba 0b04 	subs.w	fp, sl, r4
 8004540:	d00b      	beq.n	800455a <_svfiprintf_r+0x7e>
 8004542:	465b      	mov	r3, fp
 8004544:	4622      	mov	r2, r4
 8004546:	4629      	mov	r1, r5
 8004548:	4638      	mov	r0, r7
 800454a:	f7ff ff6b 	bl	8004424 <__ssputs_r>
 800454e:	3001      	adds	r0, #1
 8004550:	f000 80a7 	beq.w	80046a2 <_svfiprintf_r+0x1c6>
 8004554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004556:	445a      	add	r2, fp
 8004558:	9209      	str	r2, [sp, #36]	@ 0x24
 800455a:	f89a 3000 	ldrb.w	r3, [sl]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 809f 	beq.w	80046a2 <_svfiprintf_r+0x1c6>
 8004564:	2300      	movs	r3, #0
 8004566:	f04f 32ff 	mov.w	r2, #4294967295
 800456a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800456e:	f10a 0a01 	add.w	sl, sl, #1
 8004572:	9304      	str	r3, [sp, #16]
 8004574:	9307      	str	r3, [sp, #28]
 8004576:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800457a:	931a      	str	r3, [sp, #104]	@ 0x68
 800457c:	4654      	mov	r4, sl
 800457e:	2205      	movs	r2, #5
 8004580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004584:	484e      	ldr	r0, [pc, #312]	@ (80046c0 <_svfiprintf_r+0x1e4>)
 8004586:	f7fb fe2b 	bl	80001e0 <memchr>
 800458a:	9a04      	ldr	r2, [sp, #16]
 800458c:	b9d8      	cbnz	r0, 80045c6 <_svfiprintf_r+0xea>
 800458e:	06d0      	lsls	r0, r2, #27
 8004590:	bf44      	itt	mi
 8004592:	2320      	movmi	r3, #32
 8004594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004598:	0711      	lsls	r1, r2, #28
 800459a:	bf44      	itt	mi
 800459c:	232b      	movmi	r3, #43	@ 0x2b
 800459e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045a2:	f89a 3000 	ldrb.w	r3, [sl]
 80045a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80045a8:	d015      	beq.n	80045d6 <_svfiprintf_r+0xfa>
 80045aa:	9a07      	ldr	r2, [sp, #28]
 80045ac:	4654      	mov	r4, sl
 80045ae:	2000      	movs	r0, #0
 80045b0:	f04f 0c0a 	mov.w	ip, #10
 80045b4:	4621      	mov	r1, r4
 80045b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045ba:	3b30      	subs	r3, #48	@ 0x30
 80045bc:	2b09      	cmp	r3, #9
 80045be:	d94b      	bls.n	8004658 <_svfiprintf_r+0x17c>
 80045c0:	b1b0      	cbz	r0, 80045f0 <_svfiprintf_r+0x114>
 80045c2:	9207      	str	r2, [sp, #28]
 80045c4:	e014      	b.n	80045f0 <_svfiprintf_r+0x114>
 80045c6:	eba0 0308 	sub.w	r3, r0, r8
 80045ca:	fa09 f303 	lsl.w	r3, r9, r3
 80045ce:	4313      	orrs	r3, r2
 80045d0:	9304      	str	r3, [sp, #16]
 80045d2:	46a2      	mov	sl, r4
 80045d4:	e7d2      	b.n	800457c <_svfiprintf_r+0xa0>
 80045d6:	9b03      	ldr	r3, [sp, #12]
 80045d8:	1d19      	adds	r1, r3, #4
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	9103      	str	r1, [sp, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bfbb      	ittet	lt
 80045e2:	425b      	neglt	r3, r3
 80045e4:	f042 0202 	orrlt.w	r2, r2, #2
 80045e8:	9307      	strge	r3, [sp, #28]
 80045ea:	9307      	strlt	r3, [sp, #28]
 80045ec:	bfb8      	it	lt
 80045ee:	9204      	strlt	r2, [sp, #16]
 80045f0:	7823      	ldrb	r3, [r4, #0]
 80045f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80045f4:	d10a      	bne.n	800460c <_svfiprintf_r+0x130>
 80045f6:	7863      	ldrb	r3, [r4, #1]
 80045f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045fa:	d132      	bne.n	8004662 <_svfiprintf_r+0x186>
 80045fc:	9b03      	ldr	r3, [sp, #12]
 80045fe:	1d1a      	adds	r2, r3, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	9203      	str	r2, [sp, #12]
 8004604:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004608:	3402      	adds	r4, #2
 800460a:	9305      	str	r3, [sp, #20]
 800460c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80046d0 <_svfiprintf_r+0x1f4>
 8004610:	7821      	ldrb	r1, [r4, #0]
 8004612:	2203      	movs	r2, #3
 8004614:	4650      	mov	r0, sl
 8004616:	f7fb fde3 	bl	80001e0 <memchr>
 800461a:	b138      	cbz	r0, 800462c <_svfiprintf_r+0x150>
 800461c:	9b04      	ldr	r3, [sp, #16]
 800461e:	eba0 000a 	sub.w	r0, r0, sl
 8004622:	2240      	movs	r2, #64	@ 0x40
 8004624:	4082      	lsls	r2, r0
 8004626:	4313      	orrs	r3, r2
 8004628:	3401      	adds	r4, #1
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004630:	4824      	ldr	r0, [pc, #144]	@ (80046c4 <_svfiprintf_r+0x1e8>)
 8004632:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004636:	2206      	movs	r2, #6
 8004638:	f7fb fdd2 	bl	80001e0 <memchr>
 800463c:	2800      	cmp	r0, #0
 800463e:	d036      	beq.n	80046ae <_svfiprintf_r+0x1d2>
 8004640:	4b21      	ldr	r3, [pc, #132]	@ (80046c8 <_svfiprintf_r+0x1ec>)
 8004642:	bb1b      	cbnz	r3, 800468c <_svfiprintf_r+0x1b0>
 8004644:	9b03      	ldr	r3, [sp, #12]
 8004646:	3307      	adds	r3, #7
 8004648:	f023 0307 	bic.w	r3, r3, #7
 800464c:	3308      	adds	r3, #8
 800464e:	9303      	str	r3, [sp, #12]
 8004650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004652:	4433      	add	r3, r6
 8004654:	9309      	str	r3, [sp, #36]	@ 0x24
 8004656:	e76a      	b.n	800452e <_svfiprintf_r+0x52>
 8004658:	fb0c 3202 	mla	r2, ip, r2, r3
 800465c:	460c      	mov	r4, r1
 800465e:	2001      	movs	r0, #1
 8004660:	e7a8      	b.n	80045b4 <_svfiprintf_r+0xd8>
 8004662:	2300      	movs	r3, #0
 8004664:	3401      	adds	r4, #1
 8004666:	9305      	str	r3, [sp, #20]
 8004668:	4619      	mov	r1, r3
 800466a:	f04f 0c0a 	mov.w	ip, #10
 800466e:	4620      	mov	r0, r4
 8004670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004674:	3a30      	subs	r2, #48	@ 0x30
 8004676:	2a09      	cmp	r2, #9
 8004678:	d903      	bls.n	8004682 <_svfiprintf_r+0x1a6>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0c6      	beq.n	800460c <_svfiprintf_r+0x130>
 800467e:	9105      	str	r1, [sp, #20]
 8004680:	e7c4      	b.n	800460c <_svfiprintf_r+0x130>
 8004682:	fb0c 2101 	mla	r1, ip, r1, r2
 8004686:	4604      	mov	r4, r0
 8004688:	2301      	movs	r3, #1
 800468a:	e7f0      	b.n	800466e <_svfiprintf_r+0x192>
 800468c:	ab03      	add	r3, sp, #12
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	462a      	mov	r2, r5
 8004692:	4b0e      	ldr	r3, [pc, #56]	@ (80046cc <_svfiprintf_r+0x1f0>)
 8004694:	a904      	add	r1, sp, #16
 8004696:	4638      	mov	r0, r7
 8004698:	f3af 8000 	nop.w
 800469c:	1c42      	adds	r2, r0, #1
 800469e:	4606      	mov	r6, r0
 80046a0:	d1d6      	bne.n	8004650 <_svfiprintf_r+0x174>
 80046a2:	89ab      	ldrh	r3, [r5, #12]
 80046a4:	065b      	lsls	r3, r3, #25
 80046a6:	f53f af2d 	bmi.w	8004504 <_svfiprintf_r+0x28>
 80046aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046ac:	e72c      	b.n	8004508 <_svfiprintf_r+0x2c>
 80046ae:	ab03      	add	r3, sp, #12
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	462a      	mov	r2, r5
 80046b4:	4b05      	ldr	r3, [pc, #20]	@ (80046cc <_svfiprintf_r+0x1f0>)
 80046b6:	a904      	add	r1, sp, #16
 80046b8:	4638      	mov	r0, r7
 80046ba:	f000 f879 	bl	80047b0 <_printf_i>
 80046be:	e7ed      	b.n	800469c <_svfiprintf_r+0x1c0>
 80046c0:	08004dd8 	.word	0x08004dd8
 80046c4:	08004de2 	.word	0x08004de2
 80046c8:	00000000 	.word	0x00000000
 80046cc:	08004425 	.word	0x08004425
 80046d0:	08004dde 	.word	0x08004dde

080046d4 <_printf_common>:
 80046d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	4616      	mov	r6, r2
 80046da:	4698      	mov	r8, r3
 80046dc:	688a      	ldr	r2, [r1, #8]
 80046de:	690b      	ldr	r3, [r1, #16]
 80046e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046e4:	4293      	cmp	r3, r2
 80046e6:	bfb8      	it	lt
 80046e8:	4613      	movlt	r3, r2
 80046ea:	6033      	str	r3, [r6, #0]
 80046ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046f0:	4607      	mov	r7, r0
 80046f2:	460c      	mov	r4, r1
 80046f4:	b10a      	cbz	r2, 80046fa <_printf_common+0x26>
 80046f6:	3301      	adds	r3, #1
 80046f8:	6033      	str	r3, [r6, #0]
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	0699      	lsls	r1, r3, #26
 80046fe:	bf42      	ittt	mi
 8004700:	6833      	ldrmi	r3, [r6, #0]
 8004702:	3302      	addmi	r3, #2
 8004704:	6033      	strmi	r3, [r6, #0]
 8004706:	6825      	ldr	r5, [r4, #0]
 8004708:	f015 0506 	ands.w	r5, r5, #6
 800470c:	d106      	bne.n	800471c <_printf_common+0x48>
 800470e:	f104 0a19 	add.w	sl, r4, #25
 8004712:	68e3      	ldr	r3, [r4, #12]
 8004714:	6832      	ldr	r2, [r6, #0]
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	42ab      	cmp	r3, r5
 800471a:	dc26      	bgt.n	800476a <_printf_common+0x96>
 800471c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004720:	6822      	ldr	r2, [r4, #0]
 8004722:	3b00      	subs	r3, #0
 8004724:	bf18      	it	ne
 8004726:	2301      	movne	r3, #1
 8004728:	0692      	lsls	r2, r2, #26
 800472a:	d42b      	bmi.n	8004784 <_printf_common+0xb0>
 800472c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004730:	4641      	mov	r1, r8
 8004732:	4638      	mov	r0, r7
 8004734:	47c8      	blx	r9
 8004736:	3001      	adds	r0, #1
 8004738:	d01e      	beq.n	8004778 <_printf_common+0xa4>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	6922      	ldr	r2, [r4, #16]
 800473e:	f003 0306 	and.w	r3, r3, #6
 8004742:	2b04      	cmp	r3, #4
 8004744:	bf02      	ittt	eq
 8004746:	68e5      	ldreq	r5, [r4, #12]
 8004748:	6833      	ldreq	r3, [r6, #0]
 800474a:	1aed      	subeq	r5, r5, r3
 800474c:	68a3      	ldr	r3, [r4, #8]
 800474e:	bf0c      	ite	eq
 8004750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004754:	2500      	movne	r5, #0
 8004756:	4293      	cmp	r3, r2
 8004758:	bfc4      	itt	gt
 800475a:	1a9b      	subgt	r3, r3, r2
 800475c:	18ed      	addgt	r5, r5, r3
 800475e:	2600      	movs	r6, #0
 8004760:	341a      	adds	r4, #26
 8004762:	42b5      	cmp	r5, r6
 8004764:	d11a      	bne.n	800479c <_printf_common+0xc8>
 8004766:	2000      	movs	r0, #0
 8004768:	e008      	b.n	800477c <_printf_common+0xa8>
 800476a:	2301      	movs	r3, #1
 800476c:	4652      	mov	r2, sl
 800476e:	4641      	mov	r1, r8
 8004770:	4638      	mov	r0, r7
 8004772:	47c8      	blx	r9
 8004774:	3001      	adds	r0, #1
 8004776:	d103      	bne.n	8004780 <_printf_common+0xac>
 8004778:	f04f 30ff 	mov.w	r0, #4294967295
 800477c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004780:	3501      	adds	r5, #1
 8004782:	e7c6      	b.n	8004712 <_printf_common+0x3e>
 8004784:	18e1      	adds	r1, r4, r3
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	2030      	movs	r0, #48	@ 0x30
 800478a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800478e:	4422      	add	r2, r4
 8004790:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004794:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004798:	3302      	adds	r3, #2
 800479a:	e7c7      	b.n	800472c <_printf_common+0x58>
 800479c:	2301      	movs	r3, #1
 800479e:	4622      	mov	r2, r4
 80047a0:	4641      	mov	r1, r8
 80047a2:	4638      	mov	r0, r7
 80047a4:	47c8      	blx	r9
 80047a6:	3001      	adds	r0, #1
 80047a8:	d0e6      	beq.n	8004778 <_printf_common+0xa4>
 80047aa:	3601      	adds	r6, #1
 80047ac:	e7d9      	b.n	8004762 <_printf_common+0x8e>
	...

080047b0 <_printf_i>:
 80047b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047b4:	7e0f      	ldrb	r7, [r1, #24]
 80047b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047b8:	2f78      	cmp	r7, #120	@ 0x78
 80047ba:	4691      	mov	r9, r2
 80047bc:	4680      	mov	r8, r0
 80047be:	460c      	mov	r4, r1
 80047c0:	469a      	mov	sl, r3
 80047c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047c6:	d807      	bhi.n	80047d8 <_printf_i+0x28>
 80047c8:	2f62      	cmp	r7, #98	@ 0x62
 80047ca:	d80a      	bhi.n	80047e2 <_printf_i+0x32>
 80047cc:	2f00      	cmp	r7, #0
 80047ce:	f000 80d2 	beq.w	8004976 <_printf_i+0x1c6>
 80047d2:	2f58      	cmp	r7, #88	@ 0x58
 80047d4:	f000 80b9 	beq.w	800494a <_printf_i+0x19a>
 80047d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047e0:	e03a      	b.n	8004858 <_printf_i+0xa8>
 80047e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047e6:	2b15      	cmp	r3, #21
 80047e8:	d8f6      	bhi.n	80047d8 <_printf_i+0x28>
 80047ea:	a101      	add	r1, pc, #4	@ (adr r1, 80047f0 <_printf_i+0x40>)
 80047ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047f0:	08004849 	.word	0x08004849
 80047f4:	0800485d 	.word	0x0800485d
 80047f8:	080047d9 	.word	0x080047d9
 80047fc:	080047d9 	.word	0x080047d9
 8004800:	080047d9 	.word	0x080047d9
 8004804:	080047d9 	.word	0x080047d9
 8004808:	0800485d 	.word	0x0800485d
 800480c:	080047d9 	.word	0x080047d9
 8004810:	080047d9 	.word	0x080047d9
 8004814:	080047d9 	.word	0x080047d9
 8004818:	080047d9 	.word	0x080047d9
 800481c:	0800495d 	.word	0x0800495d
 8004820:	08004887 	.word	0x08004887
 8004824:	08004917 	.word	0x08004917
 8004828:	080047d9 	.word	0x080047d9
 800482c:	080047d9 	.word	0x080047d9
 8004830:	0800497f 	.word	0x0800497f
 8004834:	080047d9 	.word	0x080047d9
 8004838:	08004887 	.word	0x08004887
 800483c:	080047d9 	.word	0x080047d9
 8004840:	080047d9 	.word	0x080047d9
 8004844:	0800491f 	.word	0x0800491f
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	1d1a      	adds	r2, r3, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6032      	str	r2, [r6, #0]
 8004850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004854:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004858:	2301      	movs	r3, #1
 800485a:	e09d      	b.n	8004998 <_printf_i+0x1e8>
 800485c:	6833      	ldr	r3, [r6, #0]
 800485e:	6820      	ldr	r0, [r4, #0]
 8004860:	1d19      	adds	r1, r3, #4
 8004862:	6031      	str	r1, [r6, #0]
 8004864:	0606      	lsls	r6, r0, #24
 8004866:	d501      	bpl.n	800486c <_printf_i+0xbc>
 8004868:	681d      	ldr	r5, [r3, #0]
 800486a:	e003      	b.n	8004874 <_printf_i+0xc4>
 800486c:	0645      	lsls	r5, r0, #25
 800486e:	d5fb      	bpl.n	8004868 <_printf_i+0xb8>
 8004870:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004874:	2d00      	cmp	r5, #0
 8004876:	da03      	bge.n	8004880 <_printf_i+0xd0>
 8004878:	232d      	movs	r3, #45	@ 0x2d
 800487a:	426d      	negs	r5, r5
 800487c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004880:	4859      	ldr	r0, [pc, #356]	@ (80049e8 <_printf_i+0x238>)
 8004882:	230a      	movs	r3, #10
 8004884:	e011      	b.n	80048aa <_printf_i+0xfa>
 8004886:	6821      	ldr	r1, [r4, #0]
 8004888:	6833      	ldr	r3, [r6, #0]
 800488a:	0608      	lsls	r0, r1, #24
 800488c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004890:	d402      	bmi.n	8004898 <_printf_i+0xe8>
 8004892:	0649      	lsls	r1, r1, #25
 8004894:	bf48      	it	mi
 8004896:	b2ad      	uxthmi	r5, r5
 8004898:	2f6f      	cmp	r7, #111	@ 0x6f
 800489a:	4853      	ldr	r0, [pc, #332]	@ (80049e8 <_printf_i+0x238>)
 800489c:	6033      	str	r3, [r6, #0]
 800489e:	bf14      	ite	ne
 80048a0:	230a      	movne	r3, #10
 80048a2:	2308      	moveq	r3, #8
 80048a4:	2100      	movs	r1, #0
 80048a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048aa:	6866      	ldr	r6, [r4, #4]
 80048ac:	60a6      	str	r6, [r4, #8]
 80048ae:	2e00      	cmp	r6, #0
 80048b0:	bfa2      	ittt	ge
 80048b2:	6821      	ldrge	r1, [r4, #0]
 80048b4:	f021 0104 	bicge.w	r1, r1, #4
 80048b8:	6021      	strge	r1, [r4, #0]
 80048ba:	b90d      	cbnz	r5, 80048c0 <_printf_i+0x110>
 80048bc:	2e00      	cmp	r6, #0
 80048be:	d04b      	beq.n	8004958 <_printf_i+0x1a8>
 80048c0:	4616      	mov	r6, r2
 80048c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80048c6:	fb03 5711 	mls	r7, r3, r1, r5
 80048ca:	5dc7      	ldrb	r7, [r0, r7]
 80048cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048d0:	462f      	mov	r7, r5
 80048d2:	42bb      	cmp	r3, r7
 80048d4:	460d      	mov	r5, r1
 80048d6:	d9f4      	bls.n	80048c2 <_printf_i+0x112>
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d10b      	bne.n	80048f4 <_printf_i+0x144>
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	07df      	lsls	r7, r3, #31
 80048e0:	d508      	bpl.n	80048f4 <_printf_i+0x144>
 80048e2:	6923      	ldr	r3, [r4, #16]
 80048e4:	6861      	ldr	r1, [r4, #4]
 80048e6:	4299      	cmp	r1, r3
 80048e8:	bfde      	ittt	le
 80048ea:	2330      	movle	r3, #48	@ 0x30
 80048ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048f4:	1b92      	subs	r2, r2, r6
 80048f6:	6122      	str	r2, [r4, #16]
 80048f8:	f8cd a000 	str.w	sl, [sp]
 80048fc:	464b      	mov	r3, r9
 80048fe:	aa03      	add	r2, sp, #12
 8004900:	4621      	mov	r1, r4
 8004902:	4640      	mov	r0, r8
 8004904:	f7ff fee6 	bl	80046d4 <_printf_common>
 8004908:	3001      	adds	r0, #1
 800490a:	d14a      	bne.n	80049a2 <_printf_i+0x1f2>
 800490c:	f04f 30ff 	mov.w	r0, #4294967295
 8004910:	b004      	add	sp, #16
 8004912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	f043 0320 	orr.w	r3, r3, #32
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	4833      	ldr	r0, [pc, #204]	@ (80049ec <_printf_i+0x23c>)
 8004920:	2778      	movs	r7, #120	@ 0x78
 8004922:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	6831      	ldr	r1, [r6, #0]
 800492a:	061f      	lsls	r7, r3, #24
 800492c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004930:	d402      	bmi.n	8004938 <_printf_i+0x188>
 8004932:	065f      	lsls	r7, r3, #25
 8004934:	bf48      	it	mi
 8004936:	b2ad      	uxthmi	r5, r5
 8004938:	6031      	str	r1, [r6, #0]
 800493a:	07d9      	lsls	r1, r3, #31
 800493c:	bf44      	itt	mi
 800493e:	f043 0320 	orrmi.w	r3, r3, #32
 8004942:	6023      	strmi	r3, [r4, #0]
 8004944:	b11d      	cbz	r5, 800494e <_printf_i+0x19e>
 8004946:	2310      	movs	r3, #16
 8004948:	e7ac      	b.n	80048a4 <_printf_i+0xf4>
 800494a:	4827      	ldr	r0, [pc, #156]	@ (80049e8 <_printf_i+0x238>)
 800494c:	e7e9      	b.n	8004922 <_printf_i+0x172>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	f023 0320 	bic.w	r3, r3, #32
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	e7f6      	b.n	8004946 <_printf_i+0x196>
 8004958:	4616      	mov	r6, r2
 800495a:	e7bd      	b.n	80048d8 <_printf_i+0x128>
 800495c:	6833      	ldr	r3, [r6, #0]
 800495e:	6825      	ldr	r5, [r4, #0]
 8004960:	6961      	ldr	r1, [r4, #20]
 8004962:	1d18      	adds	r0, r3, #4
 8004964:	6030      	str	r0, [r6, #0]
 8004966:	062e      	lsls	r6, r5, #24
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	d501      	bpl.n	8004970 <_printf_i+0x1c0>
 800496c:	6019      	str	r1, [r3, #0]
 800496e:	e002      	b.n	8004976 <_printf_i+0x1c6>
 8004970:	0668      	lsls	r0, r5, #25
 8004972:	d5fb      	bpl.n	800496c <_printf_i+0x1bc>
 8004974:	8019      	strh	r1, [r3, #0]
 8004976:	2300      	movs	r3, #0
 8004978:	6123      	str	r3, [r4, #16]
 800497a:	4616      	mov	r6, r2
 800497c:	e7bc      	b.n	80048f8 <_printf_i+0x148>
 800497e:	6833      	ldr	r3, [r6, #0]
 8004980:	1d1a      	adds	r2, r3, #4
 8004982:	6032      	str	r2, [r6, #0]
 8004984:	681e      	ldr	r6, [r3, #0]
 8004986:	6862      	ldr	r2, [r4, #4]
 8004988:	2100      	movs	r1, #0
 800498a:	4630      	mov	r0, r6
 800498c:	f7fb fc28 	bl	80001e0 <memchr>
 8004990:	b108      	cbz	r0, 8004996 <_printf_i+0x1e6>
 8004992:	1b80      	subs	r0, r0, r6
 8004994:	6060      	str	r0, [r4, #4]
 8004996:	6863      	ldr	r3, [r4, #4]
 8004998:	6123      	str	r3, [r4, #16]
 800499a:	2300      	movs	r3, #0
 800499c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049a0:	e7aa      	b.n	80048f8 <_printf_i+0x148>
 80049a2:	6923      	ldr	r3, [r4, #16]
 80049a4:	4632      	mov	r2, r6
 80049a6:	4649      	mov	r1, r9
 80049a8:	4640      	mov	r0, r8
 80049aa:	47d0      	blx	sl
 80049ac:	3001      	adds	r0, #1
 80049ae:	d0ad      	beq.n	800490c <_printf_i+0x15c>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	079b      	lsls	r3, r3, #30
 80049b4:	d413      	bmi.n	80049de <_printf_i+0x22e>
 80049b6:	68e0      	ldr	r0, [r4, #12]
 80049b8:	9b03      	ldr	r3, [sp, #12]
 80049ba:	4298      	cmp	r0, r3
 80049bc:	bfb8      	it	lt
 80049be:	4618      	movlt	r0, r3
 80049c0:	e7a6      	b.n	8004910 <_printf_i+0x160>
 80049c2:	2301      	movs	r3, #1
 80049c4:	4632      	mov	r2, r6
 80049c6:	4649      	mov	r1, r9
 80049c8:	4640      	mov	r0, r8
 80049ca:	47d0      	blx	sl
 80049cc:	3001      	adds	r0, #1
 80049ce:	d09d      	beq.n	800490c <_printf_i+0x15c>
 80049d0:	3501      	adds	r5, #1
 80049d2:	68e3      	ldr	r3, [r4, #12]
 80049d4:	9903      	ldr	r1, [sp, #12]
 80049d6:	1a5b      	subs	r3, r3, r1
 80049d8:	42ab      	cmp	r3, r5
 80049da:	dcf2      	bgt.n	80049c2 <_printf_i+0x212>
 80049dc:	e7eb      	b.n	80049b6 <_printf_i+0x206>
 80049de:	2500      	movs	r5, #0
 80049e0:	f104 0619 	add.w	r6, r4, #25
 80049e4:	e7f5      	b.n	80049d2 <_printf_i+0x222>
 80049e6:	bf00      	nop
 80049e8:	08004de9 	.word	0x08004de9
 80049ec:	08004dfa 	.word	0x08004dfa

080049f0 <__sflush_r>:
 80049f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f8:	0716      	lsls	r6, r2, #28
 80049fa:	4605      	mov	r5, r0
 80049fc:	460c      	mov	r4, r1
 80049fe:	d454      	bmi.n	8004aaa <__sflush_r+0xba>
 8004a00:	684b      	ldr	r3, [r1, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	dc02      	bgt.n	8004a0c <__sflush_r+0x1c>
 8004a06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	dd48      	ble.n	8004a9e <__sflush_r+0xae>
 8004a0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a0e:	2e00      	cmp	r6, #0
 8004a10:	d045      	beq.n	8004a9e <__sflush_r+0xae>
 8004a12:	2300      	movs	r3, #0
 8004a14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a18:	682f      	ldr	r7, [r5, #0]
 8004a1a:	6a21      	ldr	r1, [r4, #32]
 8004a1c:	602b      	str	r3, [r5, #0]
 8004a1e:	d030      	beq.n	8004a82 <__sflush_r+0x92>
 8004a20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	0759      	lsls	r1, r3, #29
 8004a26:	d505      	bpl.n	8004a34 <__sflush_r+0x44>
 8004a28:	6863      	ldr	r3, [r4, #4]
 8004a2a:	1ad2      	subs	r2, r2, r3
 8004a2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a2e:	b10b      	cbz	r3, 8004a34 <__sflush_r+0x44>
 8004a30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a32:	1ad2      	subs	r2, r2, r3
 8004a34:	2300      	movs	r3, #0
 8004a36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a38:	6a21      	ldr	r1, [r4, #32]
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	47b0      	blx	r6
 8004a3e:	1c43      	adds	r3, r0, #1
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	d106      	bne.n	8004a52 <__sflush_r+0x62>
 8004a44:	6829      	ldr	r1, [r5, #0]
 8004a46:	291d      	cmp	r1, #29
 8004a48:	d82b      	bhi.n	8004aa2 <__sflush_r+0xb2>
 8004a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004af4 <__sflush_r+0x104>)
 8004a4c:	410a      	asrs	r2, r1
 8004a4e:	07d6      	lsls	r6, r2, #31
 8004a50:	d427      	bmi.n	8004aa2 <__sflush_r+0xb2>
 8004a52:	2200      	movs	r2, #0
 8004a54:	6062      	str	r2, [r4, #4]
 8004a56:	04d9      	lsls	r1, r3, #19
 8004a58:	6922      	ldr	r2, [r4, #16]
 8004a5a:	6022      	str	r2, [r4, #0]
 8004a5c:	d504      	bpl.n	8004a68 <__sflush_r+0x78>
 8004a5e:	1c42      	adds	r2, r0, #1
 8004a60:	d101      	bne.n	8004a66 <__sflush_r+0x76>
 8004a62:	682b      	ldr	r3, [r5, #0]
 8004a64:	b903      	cbnz	r3, 8004a68 <__sflush_r+0x78>
 8004a66:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a6a:	602f      	str	r7, [r5, #0]
 8004a6c:	b1b9      	cbz	r1, 8004a9e <__sflush_r+0xae>
 8004a6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a72:	4299      	cmp	r1, r3
 8004a74:	d002      	beq.n	8004a7c <__sflush_r+0x8c>
 8004a76:	4628      	mov	r0, r5
 8004a78:	f7ff fbdc 	bl	8004234 <_free_r>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a80:	e00d      	b.n	8004a9e <__sflush_r+0xae>
 8004a82:	2301      	movs	r3, #1
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b0      	blx	r6
 8004a88:	4602      	mov	r2, r0
 8004a8a:	1c50      	adds	r0, r2, #1
 8004a8c:	d1c9      	bne.n	8004a22 <__sflush_r+0x32>
 8004a8e:	682b      	ldr	r3, [r5, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0c6      	beq.n	8004a22 <__sflush_r+0x32>
 8004a94:	2b1d      	cmp	r3, #29
 8004a96:	d001      	beq.n	8004a9c <__sflush_r+0xac>
 8004a98:	2b16      	cmp	r3, #22
 8004a9a:	d11e      	bne.n	8004ada <__sflush_r+0xea>
 8004a9c:	602f      	str	r7, [r5, #0]
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e022      	b.n	8004ae8 <__sflush_r+0xf8>
 8004aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aa6:	b21b      	sxth	r3, r3
 8004aa8:	e01b      	b.n	8004ae2 <__sflush_r+0xf2>
 8004aaa:	690f      	ldr	r7, [r1, #16]
 8004aac:	2f00      	cmp	r7, #0
 8004aae:	d0f6      	beq.n	8004a9e <__sflush_r+0xae>
 8004ab0:	0793      	lsls	r3, r2, #30
 8004ab2:	680e      	ldr	r6, [r1, #0]
 8004ab4:	bf08      	it	eq
 8004ab6:	694b      	ldreq	r3, [r1, #20]
 8004ab8:	600f      	str	r7, [r1, #0]
 8004aba:	bf18      	it	ne
 8004abc:	2300      	movne	r3, #0
 8004abe:	eba6 0807 	sub.w	r8, r6, r7
 8004ac2:	608b      	str	r3, [r1, #8]
 8004ac4:	f1b8 0f00 	cmp.w	r8, #0
 8004ac8:	dde9      	ble.n	8004a9e <__sflush_r+0xae>
 8004aca:	6a21      	ldr	r1, [r4, #32]
 8004acc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ace:	4643      	mov	r3, r8
 8004ad0:	463a      	mov	r2, r7
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	47b0      	blx	r6
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	dc08      	bgt.n	8004aec <__sflush_r+0xfc>
 8004ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ae2:	81a3      	strh	r3, [r4, #12]
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aec:	4407      	add	r7, r0
 8004aee:	eba8 0800 	sub.w	r8, r8, r0
 8004af2:	e7e7      	b.n	8004ac4 <__sflush_r+0xd4>
 8004af4:	dfbffffe 	.word	0xdfbffffe

08004af8 <_fflush_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	690b      	ldr	r3, [r1, #16]
 8004afc:	4605      	mov	r5, r0
 8004afe:	460c      	mov	r4, r1
 8004b00:	b913      	cbnz	r3, 8004b08 <_fflush_r+0x10>
 8004b02:	2500      	movs	r5, #0
 8004b04:	4628      	mov	r0, r5
 8004b06:	bd38      	pop	{r3, r4, r5, pc}
 8004b08:	b118      	cbz	r0, 8004b12 <_fflush_r+0x1a>
 8004b0a:	6a03      	ldr	r3, [r0, #32]
 8004b0c:	b90b      	cbnz	r3, 8004b12 <_fflush_r+0x1a>
 8004b0e:	f7ff f989 	bl	8003e24 <__sinit>
 8004b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f3      	beq.n	8004b02 <_fflush_r+0xa>
 8004b1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b1c:	07d0      	lsls	r0, r2, #31
 8004b1e:	d404      	bmi.n	8004b2a <_fflush_r+0x32>
 8004b20:	0599      	lsls	r1, r3, #22
 8004b22:	d402      	bmi.n	8004b2a <_fflush_r+0x32>
 8004b24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b26:	f7ff fb82 	bl	800422e <__retarget_lock_acquire_recursive>
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	f7ff ff5f 	bl	80049f0 <__sflush_r>
 8004b32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b34:	07da      	lsls	r2, r3, #31
 8004b36:	4605      	mov	r5, r0
 8004b38:	d4e4      	bmi.n	8004b04 <_fflush_r+0xc>
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	059b      	lsls	r3, r3, #22
 8004b3e:	d4e1      	bmi.n	8004b04 <_fflush_r+0xc>
 8004b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b42:	f7ff fb75 	bl	8004230 <__retarget_lock_release_recursive>
 8004b46:	e7dd      	b.n	8004b04 <_fflush_r+0xc>

08004b48 <__swhatbuf_r>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b50:	2900      	cmp	r1, #0
 8004b52:	b096      	sub	sp, #88	@ 0x58
 8004b54:	4615      	mov	r5, r2
 8004b56:	461e      	mov	r6, r3
 8004b58:	da0d      	bge.n	8004b76 <__swhatbuf_r+0x2e>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b60:	f04f 0100 	mov.w	r1, #0
 8004b64:	bf14      	ite	ne
 8004b66:	2340      	movne	r3, #64	@ 0x40
 8004b68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	6031      	str	r1, [r6, #0]
 8004b70:	602b      	str	r3, [r5, #0]
 8004b72:	b016      	add	sp, #88	@ 0x58
 8004b74:	bd70      	pop	{r4, r5, r6, pc}
 8004b76:	466a      	mov	r2, sp
 8004b78:	f000 f862 	bl	8004c40 <_fstat_r>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	dbec      	blt.n	8004b5a <__swhatbuf_r+0x12>
 8004b80:	9901      	ldr	r1, [sp, #4]
 8004b82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b8a:	4259      	negs	r1, r3
 8004b8c:	4159      	adcs	r1, r3
 8004b8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b92:	e7eb      	b.n	8004b6c <__swhatbuf_r+0x24>

08004b94 <__smakebuf_r>:
 8004b94:	898b      	ldrh	r3, [r1, #12]
 8004b96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b98:	079d      	lsls	r5, r3, #30
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	d507      	bpl.n	8004bb0 <__smakebuf_r+0x1c>
 8004ba0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	6123      	str	r3, [r4, #16]
 8004ba8:	2301      	movs	r3, #1
 8004baa:	6163      	str	r3, [r4, #20]
 8004bac:	b003      	add	sp, #12
 8004bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb0:	ab01      	add	r3, sp, #4
 8004bb2:	466a      	mov	r2, sp
 8004bb4:	f7ff ffc8 	bl	8004b48 <__swhatbuf_r>
 8004bb8:	9f00      	ldr	r7, [sp, #0]
 8004bba:	4605      	mov	r5, r0
 8004bbc:	4639      	mov	r1, r7
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f7ff fba4 	bl	800430c <_malloc_r>
 8004bc4:	b948      	cbnz	r0, 8004bda <__smakebuf_r+0x46>
 8004bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bca:	059a      	lsls	r2, r3, #22
 8004bcc:	d4ee      	bmi.n	8004bac <__smakebuf_r+0x18>
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	f043 0302 	orr.w	r3, r3, #2
 8004bd6:	81a3      	strh	r3, [r4, #12]
 8004bd8:	e7e2      	b.n	8004ba0 <__smakebuf_r+0xc>
 8004bda:	89a3      	ldrh	r3, [r4, #12]
 8004bdc:	6020      	str	r0, [r4, #0]
 8004bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	9b01      	ldr	r3, [sp, #4]
 8004be6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004bea:	b15b      	cbz	r3, 8004c04 <__smakebuf_r+0x70>
 8004bec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f000 f837 	bl	8004c64 <_isatty_r>
 8004bf6:	b128      	cbz	r0, 8004c04 <__smakebuf_r+0x70>
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	f023 0303 	bic.w	r3, r3, #3
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	431d      	orrs	r5, r3
 8004c08:	81a5      	strh	r5, [r4, #12]
 8004c0a:	e7cf      	b.n	8004bac <__smakebuf_r+0x18>

08004c0c <memmove>:
 8004c0c:	4288      	cmp	r0, r1
 8004c0e:	b510      	push	{r4, lr}
 8004c10:	eb01 0402 	add.w	r4, r1, r2
 8004c14:	d902      	bls.n	8004c1c <memmove+0x10>
 8004c16:	4284      	cmp	r4, r0
 8004c18:	4623      	mov	r3, r4
 8004c1a:	d807      	bhi.n	8004c2c <memmove+0x20>
 8004c1c:	1e43      	subs	r3, r0, #1
 8004c1e:	42a1      	cmp	r1, r4
 8004c20:	d008      	beq.n	8004c34 <memmove+0x28>
 8004c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c2a:	e7f8      	b.n	8004c1e <memmove+0x12>
 8004c2c:	4402      	add	r2, r0
 8004c2e:	4601      	mov	r1, r0
 8004c30:	428a      	cmp	r2, r1
 8004c32:	d100      	bne.n	8004c36 <memmove+0x2a>
 8004c34:	bd10      	pop	{r4, pc}
 8004c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c3e:	e7f7      	b.n	8004c30 <memmove+0x24>

08004c40 <_fstat_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	4d07      	ldr	r5, [pc, #28]	@ (8004c60 <_fstat_r+0x20>)
 8004c44:	2300      	movs	r3, #0
 8004c46:	4604      	mov	r4, r0
 8004c48:	4608      	mov	r0, r1
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	602b      	str	r3, [r5, #0]
 8004c4e:	f7fb ff0b 	bl	8000a68 <_fstat>
 8004c52:	1c43      	adds	r3, r0, #1
 8004c54:	d102      	bne.n	8004c5c <_fstat_r+0x1c>
 8004c56:	682b      	ldr	r3, [r5, #0]
 8004c58:	b103      	cbz	r3, 8004c5c <_fstat_r+0x1c>
 8004c5a:	6023      	str	r3, [r4, #0]
 8004c5c:	bd38      	pop	{r3, r4, r5, pc}
 8004c5e:	bf00      	nop
 8004c60:	200002b4 	.word	0x200002b4

08004c64 <_isatty_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4d06      	ldr	r5, [pc, #24]	@ (8004c80 <_isatty_r+0x1c>)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	602b      	str	r3, [r5, #0]
 8004c70:	f7fb ff0a 	bl	8000a88 <_isatty>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_isatty_r+0x1a>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_isatty_r+0x1a>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	200002b4 	.word	0x200002b4

08004c84 <_sbrk_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4d06      	ldr	r5, [pc, #24]	@ (8004ca0 <_sbrk_r+0x1c>)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	602b      	str	r3, [r5, #0]
 8004c90:	f7fb ff12 	bl	8000ab8 <_sbrk>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d102      	bne.n	8004c9e <_sbrk_r+0x1a>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	b103      	cbz	r3, 8004c9e <_sbrk_r+0x1a>
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ca0:	200002b4 	.word	0x200002b4

08004ca4 <memcpy>:
 8004ca4:	440a      	add	r2, r1
 8004ca6:	4291      	cmp	r1, r2
 8004ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cac:	d100      	bne.n	8004cb0 <memcpy+0xc>
 8004cae:	4770      	bx	lr
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cba:	4291      	cmp	r1, r2
 8004cbc:	d1f9      	bne.n	8004cb2 <memcpy+0xe>
 8004cbe:	bd10      	pop	{r4, pc}

08004cc0 <_realloc_r>:
 8004cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc4:	4680      	mov	r8, r0
 8004cc6:	4615      	mov	r5, r2
 8004cc8:	460c      	mov	r4, r1
 8004cca:	b921      	cbnz	r1, 8004cd6 <_realloc_r+0x16>
 8004ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	f7ff bb1b 	b.w	800430c <_malloc_r>
 8004cd6:	b92a      	cbnz	r2, 8004ce4 <_realloc_r+0x24>
 8004cd8:	f7ff faac 	bl	8004234 <_free_r>
 8004cdc:	2400      	movs	r4, #0
 8004cde:	4620      	mov	r0, r4
 8004ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce4:	f000 f81a 	bl	8004d1c <_malloc_usable_size_r>
 8004ce8:	4285      	cmp	r5, r0
 8004cea:	4606      	mov	r6, r0
 8004cec:	d802      	bhi.n	8004cf4 <_realloc_r+0x34>
 8004cee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004cf2:	d8f4      	bhi.n	8004cde <_realloc_r+0x1e>
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	f7ff fb08 	bl	800430c <_malloc_r>
 8004cfc:	4607      	mov	r7, r0
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d0ec      	beq.n	8004cdc <_realloc_r+0x1c>
 8004d02:	42b5      	cmp	r5, r6
 8004d04:	462a      	mov	r2, r5
 8004d06:	4621      	mov	r1, r4
 8004d08:	bf28      	it	cs
 8004d0a:	4632      	movcs	r2, r6
 8004d0c:	f7ff ffca 	bl	8004ca4 <memcpy>
 8004d10:	4621      	mov	r1, r4
 8004d12:	4640      	mov	r0, r8
 8004d14:	f7ff fa8e 	bl	8004234 <_free_r>
 8004d18:	463c      	mov	r4, r7
 8004d1a:	e7e0      	b.n	8004cde <_realloc_r+0x1e>

08004d1c <_malloc_usable_size_r>:
 8004d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d20:	1f18      	subs	r0, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bfbc      	itt	lt
 8004d26:	580b      	ldrlt	r3, [r1, r0]
 8004d28:	18c0      	addlt	r0, r0, r3
 8004d2a:	4770      	bx	lr

08004d2c <_init>:
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	bf00      	nop
 8004d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d32:	bc08      	pop	{r3}
 8004d34:	469e      	mov	lr, r3
 8004d36:	4770      	bx	lr

08004d38 <_fini>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr
