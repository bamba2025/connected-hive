
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005178  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005308  08005308  00006308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053ec  080053ec  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080053ec  080053ec  000063ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f4  080053f4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f4  080053f4  000063f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053f8  080053f8  000063f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080053fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000005c  08005458  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005458  000072f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ca8  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029aa  00000000  00000000  0001ad34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0001d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e49  00000000  00000000  0001e928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fe8  00000000  00000000  0001f771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ad8  00000000  00000000  00047759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5881  00000000  00000000  0005f231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154ab2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051b0  00000000  00000000  00154af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00159ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052f0 	.word	0x080052f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080052f0 	.word	0x080052f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b35      	ldr	r3, [pc, #212]	@ (800064c <MX_GPIO_Init+0xec>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a34      	ldr	r2, [pc, #208]	@ (800064c <MX_GPIO_Init+0xec>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b32      	ldr	r3, [pc, #200]	@ (800064c <MX_GPIO_Init+0xec>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b2f      	ldr	r3, [pc, #188]	@ (800064c <MX_GPIO_Init+0xec>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a2e      	ldr	r2, [pc, #184]	@ (800064c <MX_GPIO_Init+0xec>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b2c      	ldr	r3, [pc, #176]	@ (800064c <MX_GPIO_Init+0xec>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b29      	ldr	r3, [pc, #164]	@ (800064c <MX_GPIO_Init+0xec>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a28      	ldr	r2, [pc, #160]	@ (800064c <MX_GPIO_Init+0xec>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b26      	ldr	r3, [pc, #152]	@ (800064c <MX_GPIO_Init+0xec>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b23      	ldr	r3, [pc, #140]	@ (800064c <MX_GPIO_Init+0xec>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a22      	ldr	r2, [pc, #136]	@ (800064c <MX_GPIO_Init+0xec>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b20      	ldr	r3, [pc, #128]	@ (800064c <MX_GPIO_Init+0xec>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f001 f9c3 	bl	8001968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2120      	movs	r1, #32
 80005e6:	481a      	ldr	r0, [pc, #104]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005e8:	f001 f9be 	bl	8001968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4619      	mov	r1, r3
 8000602:	4814      	ldr	r0, [pc, #80]	@ (8000654 <MX_GPIO_Init+0xf4>)
 8000604:	f000 ffee 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000608:	2320      	movs	r3, #32
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000622:	f000 ffdf 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000626:	2320      	movs	r3, #32
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800062a:	2311      	movs	r3, #17
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062e:	2301      	movs	r3, #1
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <MX_GPIO_Init+0xf0>)
 800063e:	f000 ffd1 	bl	80015e4 <HAL_GPIO_Init>

}
 8000642:	bf00      	nop
 8000644:	3728      	adds	r7, #40	@ 0x28
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	48000400 	.word	0x48000400
 8000654:	48000800 	.word	0x48000800

08000658 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_I2C1_Init+0x74>)
 800065e:	4a1c      	ldr	r2, [pc, #112]	@ (80006d0 <MX_I2C1_Init+0x78>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000664:	4a1b      	ldr	r2, [pc, #108]	@ (80006d4 <MX_I2C1_Init+0x7c>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000670:	2201      	movs	r2, #1
 8000672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000692:	480e      	ldr	r0, [pc, #56]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000694:	f001 f980 	bl	8001998 <HAL_I2C_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800069e:	f000 fc6c 	bl	8000f7a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4809      	ldr	r0, [pc, #36]	@ (80006cc <MX_I2C1_Init+0x74>)
 80006a6:	f001 fe31 	bl	800230c <HAL_I2CEx_ConfigAnalogFilter>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b0:	f000 fc63 	bl	8000f7a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b4:	2100      	movs	r1, #0
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_I2C1_Init+0x74>)
 80006b8:	f001 fe73 	bl	80023a2 <HAL_I2CEx_ConfigDigitalFilter>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006c2:	f000 fc5a 	bl	8000f7a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000078 	.word	0x20000078
 80006d0:	40005400 	.word	0x40005400
 80006d4:	10d19ce4 	.word	0x10d19ce4

080006d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b0ac      	sub	sp, #176	@ 0xb0
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2288      	movs	r2, #136	@ 0x88
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 f979 	bl	80049f0 <memset>
  if(i2cHandle->Instance==I2C1)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <HAL_I2C_MspInit+0xb0>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d13b      	bne.n	8000780 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000708:	2340      	movs	r3, #64	@ 0x40
 800070a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800070c:	2300      	movs	r3, #0
 800070e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fcf5 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000720:	f000 fc2b 	bl	8000f7a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000728:	4a18      	ldr	r2, [pc, #96]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 8000732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000734:	f003 0302 	and.w	r3, r3, #2
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800073c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000740:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000744:	2312      	movs	r3, #18
 8000746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000756:	2304      	movs	r3, #4
 8000758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000760:	4619      	mov	r1, r3
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <HAL_I2C_MspInit+0xb8>)
 8000764:	f000 ff3e 	bl	80015e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 800076a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076c:	4a07      	ldr	r2, [pc, #28]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 800076e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000772:	6593      	str	r3, [r2, #88]	@ 0x58
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 8000776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000780:	bf00      	nop
 8000782:	37b0      	adds	r7, #176	@ 0xb0
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40005400 	.word	0x40005400
 800078c:	40021000 	.word	0x40021000
 8000790:	48000400 	.word	0x48000400

08000794 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	@ 0x28
 8000798:	af02      	add	r7, sp, #8
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	f043 030c 	orr.w	r3, r3, #12
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0320 	orr.w	r3, r3, #32
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80007c0:	f107 0118 	add.w	r1, r7, #24
 80007c4:	230a      	movs	r3, #10
 80007c6:	2202      	movs	r2, #2
 80007c8:	486c      	ldr	r0, [pc, #432]	@ (800097c <lcd_init+0x1e8>)
 80007ca:	f003 fb93 	bl	8003ef4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80007ce:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80007d2:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80007d4:	f107 0114 	add.w	r1, r7, #20
 80007d8:	230a      	movs	r3, #10
 80007da:	2202      	movs	r2, #2
 80007dc:	4867      	ldr	r0, [pc, #412]	@ (800097c <lcd_init+0x1e8>)
 80007de:	f003 fb89 	bl	8003ef4 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80007e2:	2364      	movs	r3, #100	@ 0x64
 80007e4:	2205      	movs	r2, #5
 80007e6:	217c      	movs	r1, #124	@ 0x7c
 80007e8:	69f8      	ldr	r0, [r7, #28]
 80007ea:	f001 fa89 	bl	8001d00 <HAL_I2C_IsDeviceReady>
 80007ee:	4603      	mov	r3, r0
 80007f0:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80007f2:	f107 0113 	add.w	r1, r7, #19
 80007f6:	230a      	movs	r3, #10
 80007f8:	2201      	movs	r2, #1
 80007fa:	4860      	ldr	r0, [pc, #384]	@ (800097c <lcd_init+0x1e8>)
 80007fc:	f003 fb7a 	bl	8003ef4 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	@ 0x32
 8000802:	f000 fde5 	bl	80013d0 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8000806:	f107 0218 	add.w	r2, r7, #24
 800080a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2302      	movs	r3, #2
 8000812:	217c      	movs	r1, #124	@ 0x7c
 8000814:	69f8      	ldr	r0, [r7, #28]
 8000816:	f001 f95b 	bl	8001ad0 <HAL_I2C_Master_Transmit>
 800081a:	4603      	mov	r3, r0
 800081c:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 800081e:	f107 0112 	add.w	r1, r7, #18
 8000822:	230a      	movs	r3, #10
 8000824:	2201      	movs	r2, #1
 8000826:	4855      	ldr	r0, [pc, #340]	@ (800097c <lcd_init+0x1e8>)
 8000828:	f003 fb64 	bl	8003ef4 <HAL_UART_Transmit>
	HAL_Delay(50);
 800082c:	2032      	movs	r0, #50	@ 0x32
 800082e:	f000 fdcf 	bl	80013d0 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000832:	f107 0218 	add.w	r2, r7, #24
 8000836:	f241 3388 	movw	r3, #5000	@ 0x1388
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2302      	movs	r3, #2
 800083e:	217c      	movs	r1, #124	@ 0x7c
 8000840:	69f8      	ldr	r0, [r7, #28]
 8000842:	f001 f945 	bl	8001ad0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000846:	2005      	movs	r0, #5
 8000848:	f000 fdc2 	bl	80013d0 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800084c:	f107 0218 	add.w	r2, r7, #24
 8000850:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2302      	movs	r3, #2
 8000858:	217c      	movs	r1, #124	@ 0x7c
 800085a:	69f8      	ldr	r0, [r7, #28]
 800085c:	f001 f938 	bl	8001ad0 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	2204      	movs	r2, #4
 8000864:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	785b      	ldrb	r3, [r3, #1]
 800086a:	f043 0308 	orr.w	r3, r3, #8
 800086e:	b2db      	uxtb	r3, r3
 8000870:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8000872:	f107 0218 	add.w	r2, r7, #24
 8000876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2302      	movs	r3, #2
 800087e:	217c      	movs	r1, #124	@ 0x7c
 8000880:	69f8      	ldr	r0, [r7, #28]
 8000882:	f001 f925 	bl	8001ad0 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8000886:	2301      	movs	r3, #1
 8000888:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800088a:	f107 0218 	add.w	r2, r7, #24
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2302      	movs	r3, #2
 8000896:	217c      	movs	r1, #124	@ 0x7c
 8000898:	69f8      	ldr	r0, [r7, #28]
 800089a:	f001 f919 	bl	8001ad0 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800089e:	2002      	movs	r0, #2
 80008a0:	f000 fd96 	bl	80013d0 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	2202      	movs	r2, #2
 80008a8:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	789b      	ldrb	r3, [r3, #2]
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80008b6:	f107 0218 	add.w	r2, r7, #24
 80008ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2302      	movs	r3, #2
 80008c2:	217c      	movs	r1, #124	@ 0x7c
 80008c4:	69f8      	ldr	r0, [r7, #28]
 80008c6:	f001 f903 	bl	8001ad0 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008d2:	f107 0210 	add.w	r2, r7, #16
 80008d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2302      	movs	r3, #2
 80008de:	21c4      	movs	r1, #196	@ 0xc4
 80008e0:	69f8      	ldr	r0, [r7, #28]
 80008e2:	f001 f8f5 	bl	8001ad0 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80008e6:	2308      	movs	r3, #8
 80008e8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80008ea:	23ff      	movs	r3, #255	@ 0xff
 80008ec:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008ee:	f107 0210 	add.w	r2, r7, #16
 80008f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2302      	movs	r3, #2
 80008fa:	21c4      	movs	r1, #196	@ 0xc4
 80008fc:	69f8      	ldr	r0, [r7, #28]
 80008fe:	f001 f8e7 	bl	8001ad0 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8000902:	2301      	movs	r3, #1
 8000904:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8000906:	2320      	movs	r3, #32
 8000908:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800090a:	f107 0210 	add.w	r2, r7, #16
 800090e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2302      	movs	r3, #2
 8000916:	21c4      	movs	r1, #196	@ 0xc4
 8000918:	69f8      	ldr	r0, [r7, #28]
 800091a:	f001 f8d9 	bl	8001ad0 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 800091e:	2304      	movs	r3, #4
 8000920:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000922:	23ff      	movs	r3, #255	@ 0xff
 8000924:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000926:	f107 020c 	add.w	r2, r7, #12
 800092a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2302      	movs	r3, #2
 8000932:	21c4      	movs	r1, #196	@ 0xc4
 8000934:	69f8      	ldr	r0, [r7, #28]
 8000936:	f001 f8cb 	bl	8001ad0 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 800093a:	2303      	movs	r3, #3
 800093c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800093e:	23ff      	movs	r3, #255	@ 0xff
 8000940:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000942:	f107 020c 	add.w	r2, r7, #12
 8000946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2302      	movs	r3, #2
 800094e:	21c4      	movs	r1, #196	@ 0xc4
 8000950:	69f8      	ldr	r0, [r7, #28]
 8000952:	f001 f8bd 	bl	8001ad0 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000956:	2302      	movs	r3, #2
 8000958:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800095a:	23ff      	movs	r3, #255	@ 0xff
 800095c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800095e:	f107 020c 	add.w	r2, r7, #12
 8000962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2302      	movs	r3, #2
 800096a:	21c4      	movs	r1, #196	@ 0xc4
 800096c:	69f8      	ldr	r0, [r7, #28]
 800096e:	f001 f8af 	bl	8001ad0 <HAL_I2C_Master_Transmit>


}
 8000972:	bf00      	nop
 8000974:	3720      	adds	r7, #32
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000124 	.word	0x20000124

08000980 <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	4808      	ldr	r0, [pc, #32]	@ (80009ac <clearlcd+0x2c>)
 800098a:	f000 f83c 	bl	8000a06 <lcd_position>
	lcd_print(&hi2c1,"                ");
 800098e:	4908      	ldr	r1, [pc, #32]	@ (80009b0 <clearlcd+0x30>)
 8000990:	4806      	ldr	r0, [pc, #24]	@ (80009ac <clearlcd+0x2c>)
 8000992:	f000 f80f 	bl	80009b4 <lcd_print>
	lcd_position(&hi2c1,0,1);
 8000996:	2201      	movs	r2, #1
 8000998:	2100      	movs	r1, #0
 800099a:	4804      	ldr	r0, [pc, #16]	@ (80009ac <clearlcd+0x2c>)
 800099c:	f000 f833 	bl	8000a06 <lcd_position>
	lcd_print(&hi2c1,"                ");
 80009a0:	4903      	ldr	r1, [pc, #12]	@ (80009b0 <clearlcd+0x30>)
 80009a2:	4802      	ldr	r0, [pc, #8]	@ (80009ac <clearlcd+0x2c>)
 80009a4:	f000 f806 	bl	80009b4 <lcd_print>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000078 	.word	0x20000078
 80009b0:	08005308 	.word	0x08005308

080009b4 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80009c2:	2340      	movs	r3, #64	@ 0x40
 80009c4:	733b      	strb	r3, [r7, #12]
    int i=0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80009ca:	e011      	b.n	80009f0 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	4413      	add	r3, r2
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80009d6:	f107 020c 	add.w	r2, r7, #12
 80009da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2302      	movs	r3, #2
 80009e2:	217c      	movs	r1, #124	@ 0x7c
 80009e4:	6938      	ldr	r0, [r7, #16]
 80009e6:	f001 f873 	bl	8001ad0 <HAL_I2C_Master_Transmit>
            i++;
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1e7      	bne.n	80009cc <lcd_print+0x18>
   }
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af02      	add	r7, sp, #8
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	70fb      	strb	r3, [r7, #3]
 8000a12:	4613      	mov	r3, r2
 8000a14:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8000a1a:	78bb      	ldrb	r3, [r7, #2]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d104      	bne.n	8000a2a <lcd_position+0x24>
    {
        col = col | 0x80;
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a26:	70fb      	strb	r3, [r7, #3]
 8000a28:	e003      	b.n	8000a32 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000a30:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8000a32:	2380      	movs	r3, #128	@ 0x80
 8000a34:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000a36:	78fb      	ldrb	r3, [r7, #3]
 8000a38:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000a3a:	f107 0208 	add.w	r2, r7, #8
 8000a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2302      	movs	r3, #2
 8000a46:	217c      	movs	r1, #124	@ 0x7c
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f001 f841 	bl	8001ad0 <HAL_I2C_Master_Transmit>
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <lcd_put_cur>:

void variable_Transmit(uint16_t address, uint8_t *Data, uint16_t len)
{
	 HAL_I2C_Master_Transmit(&hi2c1, address, Data, 2, 1000);
}
void lcd_put_cur(uint8_t col, uint8_t row) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	4603      	mov	r3, r0
 8000a60:	460a      	mov	r2, r1
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	4613      	mov	r3, r2
 8000a66:	71bb      	strb	r3, [r7, #6]
    I2C_HandleTypeDef* Handle = &hi2c1;
 8000a68:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <lcd_put_cur+0x54>)
 8000a6a:	60fb      	str	r3, [r7, #12]
    uint8_t pos = (row == 0) ? (col | 0x80) : (col | 0xC0);
 8000a6c:	79bb      	ldrb	r3, [r7, #6]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d104      	bne.n	8000a7c <lcd_put_cur+0x24>
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	e003      	b.n	8000a84 <lcd_put_cur+0x2c>
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	72fb      	strb	r3, [r7, #11]

    uint8_t data[2];
    data[0] = 0x80;
 8000a86:	2380      	movs	r3, #128	@ 0x80
 8000a88:	723b      	strb	r3, [r7, #8]
    data[1] = pos;
 8000a8a:	7afb      	ldrb	r3, [r7, #11]
 8000a8c:	727b      	strb	r3, [r7, #9]

    HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data, 2, 1000);
 8000a8e:	f107 0208 	add.w	r2, r7, #8
 8000a92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2302      	movs	r3, #2
 8000a9a:	217c      	movs	r1, #124	@ 0x7c
 8000a9c:	68f8      	ldr	r0, [r7, #12]
 8000a9e:	f001 f817 	bl	8001ad0 <HAL_I2C_Master_Transmit>
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000078 	.word	0x20000078

08000ab0 <lcd_send_string>:

    HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, send_data, 2, 1000);
}

void lcd_send_string(char *str)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	6078      	str	r0, [r7, #4]
    I2C_HandleTypeDef* Handle = &hi2c1;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <lcd_send_string+0x44>)
 8000aba:	60fb      	str	r3, [r7, #12]
    char data[2];
    data[0] = 0x40; // Mode d'écriture de données
 8000abc:	2340      	movs	r3, #64	@ 0x40
 8000abe:	723b      	strb	r3, [r7, #8]

    while (*str)
 8000ac0:	e00f      	b.n	8000ae2 <lcd_send_string+0x32>
    {
        data[1] = *str;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	727b      	strb	r3, [r7, #9]
        HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, (uint8_t *) data, 2, 1000);
 8000ac8:	f107 0208 	add.w	r2, r7, #8
 8000acc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	217c      	movs	r1, #124	@ 0x7c
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f000 fffa 	bl	8001ad0 <HAL_I2C_Master_Transmit>
        str++; // Passer au caractère suivant
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	607b      	str	r3, [r7, #4]
    while (*str)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d1eb      	bne.n	8000ac2 <lcd_send_string+0x12>
    }
}
 8000aea:	bf00      	nop
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000078 	.word	0x20000078

08000af8 <Set_Pin_Output>:
void Display_Temp(uint8_t Temp);
void Display_Rh(uint8_t Rh);

/* USER CODE BEGIN 0 */
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b18:	2311      	movs	r3, #17
 8000b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 fd5a 	bl	80015e4 <HAL_GPIO_Init>
}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f000 fd3c 	bl	80015e4 <HAL_GPIO_Init>
}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <delay_us>:

void delay_us(uint16_t time)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim6, 0);
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <delay_us+0x30>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim6) < time);
 8000b86:	bf00      	nop
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <delay_us+0x30>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d3f9      	bcc.n	8000b88 <delay_us+0x14>
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000d8 	.word	0x200000d8

08000ba8 <DHT11_Start>:

void DHT11_Start(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    Set_Pin_Output(DHT11_PORT, DHT11_PIN);
 8000bac:	2120      	movs	r1, #32
 8000bae:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <DHT11_Start+0x2c>)
 8000bb0:	f7ff ffa2 	bl	8000af8 <Set_Pin_Output>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <DHT11_Start+0x2c>)
 8000bba:	f000 fed5 	bl	8001968 <HAL_GPIO_WritePin>
    delay_us(18000);
 8000bbe:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000bc2:	f7ff ffd7 	bl	8000b74 <delay_us>
    Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <DHT11_Start+0x2c>)
 8000bca:	f7ff ffb5 	bl	8000b38 <Set_Pin_Input>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	48000400 	.word	0x48000400

08000bd8 <Check_Response>:

uint8_t Check_Response(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	//uint8_t Response = 0;
    uint32_t timeout = 10000; // Timeout pour éviter une boucle infinie
 8000bde:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000be2:	607b      	str	r3, [r7, #4]

    delay_us(40);
 8000be4:	2028      	movs	r0, #40	@ 0x28
 8000be6:	f7ff ffc5 	bl	8000b74 <delay_us>
    while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && timeout > 0) {
 8000bea:	e005      	b.n	8000bf8 <Check_Response+0x20>
        timeout--;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	607b      	str	r3, [r7, #4]
        delay_us(1);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff ffbe 	bl	8000b74 <delay_us>
    while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && timeout > 0) {
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	4817      	ldr	r0, [pc, #92]	@ (8000c58 <Check_Response+0x80>)
 8000bfc:	f000 fe9c 	bl	8001938 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <Check_Response+0x34>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1ef      	bne.n	8000bec <Check_Response+0x14>
    }

    if (timeout == 0) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <Check_Response+0x3e>
        return -1;  // Le capteur ne répond pas
 8000c12:	23ff      	movs	r3, #255	@ 0xff
 8000c14:	e01c      	b.n	8000c50 <Check_Response+0x78>
    }

    timeout = 10000; // Réinitialisation du timeout
 8000c16:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000c1a:	607b      	str	r3, [r7, #4]
    delay_us(80);
 8000c1c:	2050      	movs	r0, #80	@ 0x50
 8000c1e:	f7ff ffa9 	bl	8000b74 <delay_us>
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && timeout > 0) {
 8000c22:	e005      	b.n	8000c30 <Check_Response+0x58>
        timeout--;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	607b      	str	r3, [r7, #4]
        delay_us(1);
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f7ff ffa2 	bl	8000b74 <delay_us>
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && timeout > 0) {
 8000c30:	2120      	movs	r1, #32
 8000c32:	4809      	ldr	r0, [pc, #36]	@ (8000c58 <Check_Response+0x80>)
 8000c34:	f000 fe80 	bl	8001938 <HAL_GPIO_ReadPin>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <Check_Response+0x6c>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1ef      	bne.n	8000c24 <Check_Response+0x4c>
    }

    if (timeout == 0) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <Check_Response+0x76>
        return -1;  // Mauvaise réponse du capteur
 8000c4a:	23ff      	movs	r3, #255	@ 0xff
 8000c4c:	e000      	b.n	8000c50 <Check_Response+0x78>
    }

    return 1; // Capteur détecté
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	48000400 	.word	0x48000400

08000c5c <DHT11_Read>:


uint8_t DHT11_Read(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
    uint8_t i = 0, j;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]
    for (j = 0; j < 8; j++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	71bb      	strb	r3, [r7, #6]
 8000c6a:	e037      	b.n	8000cdc <DHT11_Read+0x80>
    {
        while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));
 8000c6c:	bf00      	nop
 8000c6e:	2120      	movs	r1, #32
 8000c70:	481e      	ldr	r0, [pc, #120]	@ (8000cec <DHT11_Read+0x90>)
 8000c72:	f000 fe61 	bl	8001938 <HAL_GPIO_ReadPin>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0f8      	beq.n	8000c6e <DHT11_Read+0x12>
        delay_us(40);
 8000c7c:	2028      	movs	r0, #40	@ 0x28
 8000c7e:	f7ff ff79 	bl	8000b74 <delay_us>
        if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000c82:	2120      	movs	r1, #32
 8000c84:	4819      	ldr	r0, [pc, #100]	@ (8000cec <DHT11_Read+0x90>)
 8000c86:	f000 fe57 	bl	8001938 <HAL_GPIO_ReadPin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10e      	bne.n	8000cae <DHT11_Read+0x52>
        {
            i &= ~(1 << (7 - j));
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2201      	movs	r2, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	b25a      	sxtb	r2, r3
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	e00b      	b.n	8000cc6 <DHT11_Read+0x6a>
        }
        else i |= (1 << (7 - j));
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	f1c3 0307 	rsb	r3, r3, #7
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	b25a      	sxtb	r2, r3
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	71fb      	strb	r3, [r7, #7]
        while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));
 8000cc6:	bf00      	nop
 8000cc8:	2120      	movs	r1, #32
 8000cca:	4808      	ldr	r0, [pc, #32]	@ (8000cec <DHT11_Read+0x90>)
 8000ccc:	f000 fe34 	bl	8001938 <HAL_GPIO_ReadPin>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f8      	bne.n	8000cc8 <DHT11_Read+0x6c>
    for (j = 0; j < 8; j++)
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	71bb      	strb	r3, [r7, #6]
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	2b07      	cmp	r3, #7
 8000ce0:	d9c4      	bls.n	8000c6c <DHT11_Read+0x10>
    }
    return i;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	48000400 	.word	0x48000400

08000cf0 <main>:

/* USER CODE END 0 */

int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
    HAL_Init();
 8000cf6:	f000 faef 	bl	80012d8 <HAL_Init>
    SystemClock_Config();
 8000cfa:	f000 f8ed 	bl	8000ed8 <SystemClock_Config>
    MX_GPIO_Init();
 8000cfe:	f7ff fc2f 	bl	8000560 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000d02:	f000 fa33 	bl	800116c <MX_USART2_UART_Init>
    MX_I2C1_Init();
 8000d06:	f7ff fca7 	bl	8000658 <MX_I2C1_Init>
    MX_TIM6_Init();
 8000d0a:	f000 f9d9 	bl	80010c0 <MX_TIM6_Init>

    HAL_TIM_Base_Start(&htim6);
 8000d0e:	4841      	ldr	r0, [pc, #260]	@ (8000e14 <main+0x124>)
 8000d10:	f002 ff0c 	bl	8003b2c <HAL_TIM_Base_Start>

    rgb_lcd lcd_data;
    lcd_init(&hi2c1, &lcd_data);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	483f      	ldr	r0, [pc, #252]	@ (8000e18 <main+0x128>)
 8000d1a:	f7ff fd3b 	bl	8000794 <lcd_init>

    lcd_send_string("INIT DHT11...");
 8000d1e:	483f      	ldr	r0, [pc, #252]	@ (8000e1c <main+0x12c>)
 8000d20:	f7ff fec6 	bl	8000ab0 <lcd_send_string>
    HAL_Delay(2000);
 8000d24:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d28:	f000 fb52 	bl	80013d0 <HAL_Delay>
    clearlcd();
 8000d2c:	f7ff fe28 	bl	8000980 <clearlcd>

    while (1)
    {
        DHT11_Start();
 8000d30:	f7ff ff3a 	bl	8000ba8 <DHT11_Start>
        Presence = Check_Response();
 8000d34:	f7ff ff50 	bl	8000bd8 <Check_Response>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b38      	ldr	r3, [pc, #224]	@ (8000e20 <main+0x130>)
 8000d3e:	701a      	strb	r2, [r3, #0]

        if (Presence != 1)
 8000d40:	4b37      	ldr	r3, [pc, #220]	@ (8000e20 <main+0x130>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d00b      	beq.n	8000d60 <main+0x70>
        {
            lcd_put_cur(1, 0);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff fe84 	bl	8000a58 <lcd_put_cur>
            lcd_send_string("Capteur loading  ");
 8000d50:	4834      	ldr	r0, [pc, #208]	@ (8000e24 <main+0x134>)
 8000d52:	f7ff fead 	bl	8000ab0 <lcd_send_string>
            HAL_Delay(2000);
 8000d56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d5a:	f000 fb39 	bl	80013d0 <HAL_Delay>
            continue;
 8000d5e:	e057      	b.n	8000e10 <main+0x120>
        }

        Rh_byte1 = DHT11_Read();
 8000d60:	f7ff ff7c 	bl	8000c5c <DHT11_Read>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <main+0x138>)
 8000d6a:	701a      	strb	r2, [r3, #0]
        Rh_byte2 = DHT11_Read();
 8000d6c:	f7ff ff76 	bl	8000c5c <DHT11_Read>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b2d      	ldr	r3, [pc, #180]	@ (8000e2c <main+0x13c>)
 8000d76:	701a      	strb	r2, [r3, #0]
        Temp_byte1 = DHT11_Read();
 8000d78:	f7ff ff70 	bl	8000c5c <DHT11_Read>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b2b      	ldr	r3, [pc, #172]	@ (8000e30 <main+0x140>)
 8000d82:	701a      	strb	r2, [r3, #0]
        Temp_byte2 = DHT11_Read();
 8000d84:	f7ff ff6a 	bl	8000c5c <DHT11_Read>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b29      	ldr	r3, [pc, #164]	@ (8000e34 <main+0x144>)
 8000d8e:	701a      	strb	r2, [r3, #0]
        SUM = DHT11_Read();
 8000d90:	f7ff ff64 	bl	8000c5c <DHT11_Read>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b27      	ldr	r3, [pc, #156]	@ (8000e38 <main+0x148>)
 8000d9a:	701a      	strb	r2, [r3, #0]

        if ((Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2) != SUM)
 8000d9c:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <main+0x138>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <main+0x13c>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a21      	ldr	r2, [pc, #132]	@ (8000e30 <main+0x140>)
 8000daa:	7812      	ldrb	r2, [r2, #0]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a21      	ldr	r2, [pc, #132]	@ (8000e34 <main+0x144>)
 8000db0:	7812      	ldrb	r2, [r2, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a20      	ldr	r2, [pc, #128]	@ (8000e38 <main+0x148>)
 8000db6:	7812      	ldrb	r2, [r2, #0]
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d00b      	beq.n	8000dd4 <main+0xe4>
        {
            lcd_put_cur(1, 0);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff fe4a 	bl	8000a58 <lcd_put_cur>
            lcd_send_string("Checksum err ");
 8000dc4:	481d      	ldr	r0, [pc, #116]	@ (8000e3c <main+0x14c>)
 8000dc6:	f7ff fe73 	bl	8000ab0 <lcd_send_string>
            HAL_Delay(2000);
 8000dca:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dce:	f000 faff 	bl	80013d0 <HAL_Delay>
            continue;
 8000dd2:	e01d      	b.n	8000e10 <main+0x120>
        }

        TEMP = Temp_byte1;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <main+0x140>)
 8000dd6:	781a      	ldrb	r2, [r3, #0]
 8000dd8:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <main+0x150>)
 8000dda:	701a      	strb	r2, [r3, #0]
        RH = Rh_byte1;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <main+0x138>)
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <main+0x154>)
 8000de2:	701a      	strb	r2, [r3, #0]

        clearlcd();  // Ajoute cette ligne pour effacer l'ancien affichage**
 8000de4:	f7ff fdcc 	bl	8000980 <clearlcd>
        Display_Temp(TEMP);
 8000de8:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <main+0x150>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 f82b 	bl	8000e48 <Display_Temp>
        HAL_Delay(1500);
 8000df2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000df6:	f000 faeb 	bl	80013d0 <HAL_Delay>
        clearlcd();
 8000dfa:	f7ff fdc1 	bl	8000980 <clearlcd>
        Display_Rh(RH);
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <main+0x154>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f844 	bl	8000e90 <Display_Rh>

        HAL_Delay(3000);
 8000e08:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e0c:	f000 fae0 	bl	80013d0 <HAL_Delay>
        DHT11_Start();
 8000e10:	e78e      	b.n	8000d30 <main+0x40>
 8000e12:	bf00      	nop
 8000e14:	200000d8 	.word	0x200000d8
 8000e18:	20000078 	.word	0x20000078
 8000e1c:	0800531c 	.word	0x0800531c
 8000e20:	200000cc 	.word	0x200000cc
 8000e24:	0800532c 	.word	0x0800532c
 8000e28:	200000cd 	.word	0x200000cd
 8000e2c:	200000ce 	.word	0x200000ce
 8000e30:	200000cf 	.word	0x200000cf
 8000e34:	200000d0 	.word	0x200000d0
 8000e38:	200000d1 	.word	0x200000d1
 8000e3c:	08005340 	.word	0x08005340
 8000e40:	200000d2 	.word	0x200000d2
 8000e44:	200000d3 	.word	0x200000d3

08000e48 <Display_Temp>:

}

/* USER CODE BEGIN 4 */
void Display_Temp(uint8_t Temp)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
    char str[16] = {0};
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
    lcd_put_cur(0, 0);
 8000e62:	2100      	movs	r1, #0
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff fdf7 	bl	8000a58 <lcd_put_cur>
    sprintf(str, "Temp : %dC   ", Temp);
 8000e6a:	79fa      	ldrb	r2, [r7, #7]
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	4906      	ldr	r1, [pc, #24]	@ (8000e8c <Display_Temp+0x44>)
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fd9c 	bl	80049b0 <siprintf>
    lcd_send_string(str);
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fe17 	bl	8000ab0 <lcd_send_string>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	08005350 	.word	0x08005350

08000e90 <Display_Rh>:


void Display_Rh(uint8_t Rh)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
    char str[16] = {0};
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
    lcd_put_cur(1, 0);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff fdd3 	bl	8000a58 <lcd_put_cur>
    sprintf(str, "Hum: %d %%    ", Rh);
 8000eb2:	79fa      	ldrb	r2, [r7, #7]
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	4906      	ldr	r1, [pc, #24]	@ (8000ed4 <Display_Rh+0x44>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 fd78 	bl	80049b0 <siprintf>
    lcd_send_string(str);
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fdf3 	bl	8000ab0 <lcd_send_string>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	08005360 	.word	0x08005360

08000ed8 <SystemClock_Config>:
/**
  * @brief  System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b096      	sub	sp, #88	@ 0x58
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	2244      	movs	r2, #68	@ 0x44
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 fd82 	bl	80049f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	463b      	mov	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000efa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000efe:	f001 faab 	bl	8002458 <HAL_PWREx_ControlVoltageScaling>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f08:	f000 f837 	bl	8000f7a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f16:	2310      	movs	r3, #16
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f26:	230a      	movs	r3, #10
 8000f28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 fae2 	bl	8002504 <HAL_RCC_OscConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f46:	f000 f818 	bl	8000f7a <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4a:	230f      	movs	r3, #15
 8000f4c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2104      	movs	r1, #4
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 feaa 	bl	8002cbc <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f6e:	f000 f804 	bl	8000f7a <Error_Handler>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3758      	adds	r7, #88	@ 0x58
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <Error_Handler>:

void Error_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7e:	b672      	cpsid	i
}
 8000f80:	bf00      	nop
    __disable_irq();
    while (1) {}
 8000f82:	bf00      	nop
 8000f84:	e7fd      	b.n	8000f82 <Error_Handler+0x8>
	...

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <HAL_MspInit+0x44>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f92:	4a0e      	ldr	r2, [pc, #56]	@ (8000fcc <HAL_MspInit+0x44>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <HAL_MspInit+0x44>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <HAL_MspInit+0x44>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000faa:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <HAL_MspInit+0x44>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_MspInit+0x44>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001026:	f000 f9b3 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001038:	4a14      	ldr	r2, [pc, #80]	@ (800108c <_sbrk+0x5c>)
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <_sbrk+0x60>)
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001044:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <_sbrk+0x64>)
 800104e:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <_sbrk+0x68>)
 8001050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	429a      	cmp	r2, r3
 800105e:	d207      	bcs.n	8001070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001060:	f003 fcce 	bl	8004a00 <__errno>
 8001064:	4603      	mov	r3, r0
 8001066:	220c      	movs	r2, #12
 8001068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	e009      	b.n	8001084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <_sbrk+0x64>)
 8001080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20018000 	.word	0x20018000
 8001090:	00000400 	.word	0x00000400
 8001094:	200000d4 	.word	0x200000d4
 8001098:	200002f8 	.word	0x200002f8

0800109c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <SystemInit+0x20>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <SystemInit+0x20>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <MX_TIM6_Init+0x64>)
 80010d2:	4a15      	ldr	r2, [pc, #84]	@ (8001128 <MX_TIM6_Init+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <MX_TIM6_Init+0x64>)
 80010d8:	2231      	movs	r2, #49	@ 0x31
 80010da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_TIM6_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <MX_TIM6_Init+0x64>)
 80010e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_TIM6_Init+0x64>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010f0:	480c      	ldr	r0, [pc, #48]	@ (8001124 <MX_TIM6_Init+0x64>)
 80010f2:	f002 fcc3 	bl	8003a7c <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80010fc:	f7ff ff3d 	bl	8000f7a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_TIM6_Init+0x64>)
 800110e:	f002 fe1b 	bl	8003d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001118:	f7ff ff2f 	bl	8000f7a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200000d8 	.word	0x200000d8
 8001128:	40001000 	.word	0x40001000

0800112c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <HAL_TIM_Base_MspInit+0x38>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d10b      	bne.n	8001156 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_TIM_Base_MspInit+0x3c>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <HAL_TIM_Base_MspInit+0x3c>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	6593      	str	r3, [r2, #88]	@ 0x58
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <HAL_TIM_Base_MspInit+0x3c>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40001000 	.word	0x40001000
 8001168:	40021000 	.word	0x40021000

0800116c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001170:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_USART2_UART_Init+0x58>)
 8001172:	4a15      	ldr	r2, [pc, #84]	@ (80011c8 <MX_USART2_UART_Init+0x5c>)
 8001174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <MX_USART2_UART_Init+0x58>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_USART2_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_USART2_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_USART2_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_USART2_UART_Init+0x58>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <MX_USART2_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_USART2_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <MX_USART2_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_USART2_UART_Init+0x58>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_USART2_UART_Init+0x58>)
 80011b0:	f002 fe52 	bl	8003e58 <HAL_UART_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ba:	f7ff fede 	bl	8000f7a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000124 	.word	0x20000124
 80011c8:	40004400 	.word	0x40004400

080011cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0ac      	sub	sp, #176	@ 0xb0
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2288      	movs	r2, #136	@ 0x88
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fbff 	bl	80049f0 <memset>
  if(uartHandle->Instance==USART2)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a21      	ldr	r2, [pc, #132]	@ (800127c <HAL_UART_MspInit+0xb0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d13b      	bne.n	8001274 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001200:	2300      	movs	r3, #0
 8001202:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4618      	mov	r0, r3
 800120a:	f001 ff7b 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001214:	f7ff feb1 	bl	8000f7a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001218:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <HAL_UART_MspInit+0xb4>)
 800121a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121c:	4a18      	ldr	r2, [pc, #96]	@ (8001280 <HAL_UART_MspInit+0xb4>)
 800121e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001222:	6593      	str	r3, [r2, #88]	@ 0x58
 8001224:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <HAL_UART_MspInit+0xb4>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <HAL_UART_MspInit+0xb4>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001234:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <HAL_UART_MspInit+0xb4>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123c:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <HAL_UART_MspInit+0xb4>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001248:	230c      	movs	r3, #12
 800124a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001260:	2307      	movs	r3, #7
 8001262:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001270:	f000 f9b8 	bl	80015e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001274:	bf00      	nop
 8001276:	37b0      	adds	r7, #176	@ 0xb0
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40004400 	.word	0x40004400
 8001280:	40021000 	.word	0x40021000

08001284 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001288:	f7ff ff08 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	@ (80012c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	@ (80012c8 <LoopForever+0xe>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	@ (80012d0 <LoopForever+0x16>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f003 fbab 	bl	8004a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012b6:	f7ff fd1b 	bl	8000cf0 <main>

080012ba <LoopForever>:

LoopForever:
    b LoopForever
 80012ba:	e7fe      	b.n	80012ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012c8:	080053fc 	.word	0x080053fc
  ldr r2, =_sbss
 80012cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012d0:	200002f8 	.word	0x200002f8

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <HAL_Init+0x3c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001314 <HAL_Init+0x3c>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ee:	2003      	movs	r0, #3
 80012f0:	f000 f944 	bl	800157c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f4:	2000      	movs	r0, #0
 80012f6:	f000 f80f 	bl	8001318 <HAL_InitTick>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	e001      	b.n	800130a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001306:	f7ff fe3f 	bl	8000f88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800130a:	79fb      	ldrb	r3, [r7, #7]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40022000 	.word	0x40022000

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001324:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <HAL_InitTick+0x6c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d023      	beq.n	8001374 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <HAL_InitTick+0x70>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <HAL_InitTick+0x6c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f941 	bl	80015ca <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d809      	bhi.n	8001368 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f919 	bl	8001592 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <HAL_InitTick+0x74>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e007      	b.n	8001378 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e004      	b.n	8001378 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
 8001372:	e001      	b.n	8001378 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008
 8001388:	20000000 	.word	0x20000000
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008
 80013b4:	200001ac 	.word	0x200001ac

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200001ac 	.word	0x200001ac

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff ffee 	bl	80013b8 <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_Delay+0x44>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffde 	bl	80013b8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001440:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144a:	4a04      	ldr	r2, [pc, #16]	@ (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	60d3      	str	r3, [r2, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	@ (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	@ (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	@ 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
         );
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	@ 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001548:	d301      	bcc.n	800154e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154a:	2301      	movs	r3, #1
 800154c:	e00f      	b.n	800156e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154e:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <SysTick_Config+0x40>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001556:	210f      	movs	r1, #15
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f7ff ff8e 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <SysTick_Config+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001566:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <SysTick_Config+0x40>)
 8001568:	2207      	movs	r2, #7
 800156a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff47 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015a4:	f7ff ff5c 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ff8e 	bl	80014d0 <NVIC_EncodePriority>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff5d 	bl	800147c <__NVIC_SetPriority>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffb0 	bl	8001538 <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f2:	e17f      	b.n	80018f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	4013      	ands	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8171 	beq.w	80018ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d005      	beq.n	8001624 <HAL_GPIO_Init+0x40>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d130      	bne.n	8001686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800165a:	2201      	movs	r2, #1
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	f003 0201 	and.w	r2, r3, #1
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b03      	cmp	r3, #3
 8001690:	d118      	bne.n	80016c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001698:	2201      	movs	r2, #1
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	08db      	lsrs	r3, r3, #3
 80016ae:	f003 0201 	and.w	r2, r3, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d017      	beq.n	8001700 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d123      	bne.n	8001754 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	08da      	lsrs	r2, r3, #3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3208      	adds	r2, #8
 8001714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	220f      	movs	r2, #15
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	08da      	lsrs	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3208      	adds	r2, #8
 800174e:	6939      	ldr	r1, [r7, #16]
 8001750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80ac 	beq.w	80018ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	4b5f      	ldr	r3, [pc, #380]	@ (8001914 <HAL_GPIO_Init+0x330>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179a:	4a5e      	ldr	r2, [pc, #376]	@ (8001914 <HAL_GPIO_Init+0x330>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001914 <HAL_GPIO_Init+0x330>)
 80017a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001918 <HAL_GPIO_Init+0x334>)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017d8:	d025      	beq.n	8001826 <HAL_GPIO_Init+0x242>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4f      	ldr	r2, [pc, #316]	@ (800191c <HAL_GPIO_Init+0x338>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d01f      	beq.n	8001822 <HAL_GPIO_Init+0x23e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001920 <HAL_GPIO_Init+0x33c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d019      	beq.n	800181e <HAL_GPIO_Init+0x23a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001924 <HAL_GPIO_Init+0x340>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_Init+0x236>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001928 <HAL_GPIO_Init+0x344>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00d      	beq.n	8001816 <HAL_GPIO_Init+0x232>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4b      	ldr	r2, [pc, #300]	@ (800192c <HAL_GPIO_Init+0x348>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d007      	beq.n	8001812 <HAL_GPIO_Init+0x22e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4a      	ldr	r2, [pc, #296]	@ (8001930 <HAL_GPIO_Init+0x34c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_GPIO_Init+0x22a>
 800180a:	2306      	movs	r3, #6
 800180c:	e00c      	b.n	8001828 <HAL_GPIO_Init+0x244>
 800180e:	2307      	movs	r3, #7
 8001810:	e00a      	b.n	8001828 <HAL_GPIO_Init+0x244>
 8001812:	2305      	movs	r3, #5
 8001814:	e008      	b.n	8001828 <HAL_GPIO_Init+0x244>
 8001816:	2304      	movs	r3, #4
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x244>
 800181a:	2303      	movs	r3, #3
 800181c:	e004      	b.n	8001828 <HAL_GPIO_Init+0x244>
 800181e:	2302      	movs	r3, #2
 8001820:	e002      	b.n	8001828 <HAL_GPIO_Init+0x244>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x244>
 8001826:	2300      	movs	r3, #0
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	f002 0203 	and.w	r2, r2, #3
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	4093      	lsls	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001838:	4937      	ldr	r1, [pc, #220]	@ (8001918 <HAL_GPIO_Init+0x334>)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001846:	4b3b      	ldr	r3, [pc, #236]	@ (8001934 <HAL_GPIO_Init+0x350>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800186a:	4a32      	ldr	r2, [pc, #200]	@ (8001934 <HAL_GPIO_Init+0x350>)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001870:	4b30      	ldr	r3, [pc, #192]	@ (8001934 <HAL_GPIO_Init+0x350>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001894:	4a27      	ldr	r2, [pc, #156]	@ (8001934 <HAL_GPIO_Init+0x350>)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800189a:	4b26      	ldr	r3, [pc, #152]	@ (8001934 <HAL_GPIO_Init+0x350>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018be:	4a1d      	ldr	r2, [pc, #116]	@ (8001934 <HAL_GPIO_Init+0x350>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_GPIO_Init+0x350>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018e8:	4a12      	ldr	r2, [pc, #72]	@ (8001934 <HAL_GPIO_Init+0x350>)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa22 f303 	lsr.w	r3, r2, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f47f ae78 	bne.w	80015f4 <HAL_GPIO_Init+0x10>
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	40010000 	.word	0x40010000
 800191c:	48000400 	.word	0x48000400
 8001920:	48000800 	.word	0x48000800
 8001924:	48000c00 	.word	0x48000c00
 8001928:	48001000 	.word	0x48001000
 800192c:	48001400 	.word	0x48001400
 8001930:	48001800 	.word	0x48001800
 8001934:	40010400 	.word	0x40010400

08001938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
 8001954:	e001      	b.n	800195a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800195a:	7bfb      	ldrb	r3, [r7, #15]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
 8001974:	4613      	mov	r3, r2
 8001976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001978:	787b      	ldrb	r3, [r7, #1]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800197e:	887a      	ldrh	r2, [r7, #2]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001984:	e002      	b.n	800198c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e08d      	b.n	8001ac6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe fe8a 	bl	80006d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2224      	movs	r2, #36	@ 0x24
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0201 	bic.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d107      	bne.n	8001a12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	e006      	b.n	8001a20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d108      	bne.n	8001a3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	e007      	b.n	8001a4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69d9      	ldr	r1, [r3, #28]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1a      	ldr	r2, [r3, #32]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	461a      	mov	r2, r3
 8001adc:	460b      	mov	r3, r1
 8001ade:	817b      	strh	r3, [r7, #10]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b20      	cmp	r3, #32
 8001aee:	f040 80fd 	bne.w	8001cec <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_I2C_Master_Transmit+0x30>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e0f6      	b.n	8001cee <HAL_I2C_Master_Transmit+0x21e>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b08:	f7ff fc56 	bl	80013b8 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2319      	movs	r3, #25
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 fa00 	bl	8001f20 <I2C_WaitOnFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0e1      	b.n	8001cee <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2221      	movs	r2, #33	@ 0x21
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2210      	movs	r2, #16
 8001b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	893a      	ldrh	r2, [r7, #8]
 8001b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2bff      	cmp	r3, #255	@ 0xff
 8001b5a:	d906      	bls.n	8001b6a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	22ff      	movs	r2, #255	@ 0xff
 8001b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	e007      	b.n	8001b7a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001b74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b78:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d024      	beq.n	8001bcc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	8979      	ldrh	r1, [r7, #10]
 8001bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf8 <HAL_I2C_Master_Transmit+0x228>)
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 fb6f 	bl	80022a8 <I2C_TransferConfig>
 8001bca:	e066      	b.n	8001c9a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	8979      	ldrh	r1, [r7, #10]
 8001bd4:	4b48      	ldr	r3, [pc, #288]	@ (8001cf8 <HAL_I2C_Master_Transmit+0x228>)
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fb64 	bl	80022a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001be0:	e05b      	b.n	8001c9a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	6a39      	ldr	r1, [r7, #32]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f9f3 	bl	8001fd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e07b      	b.n	8001cee <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d034      	beq.n	8001c9a <HAL_I2C_Master_Transmit+0x1ca>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d130      	bne.n	8001c9a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2180      	movs	r1, #128	@ 0x80
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f96c 	bl	8001f20 <I2C_WaitOnFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e04d      	b.n	8001cee <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2bff      	cmp	r3, #255	@ 0xff
 8001c5a:	d90e      	bls.n	8001c7a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	22ff      	movs	r2, #255	@ 0xff
 8001c60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	8979      	ldrh	r1, [r7, #10]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 fb18 	bl	80022a8 <I2C_TransferConfig>
 8001c78:	e00f      	b.n	8001c9a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	8979      	ldrh	r1, [r7, #10]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fb07 	bl	80022a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d19e      	bne.n	8001be2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	6a39      	ldr	r1, [r7, #32]
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 f9d9 	bl	8002060 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e01a      	b.n	8001cee <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <HAL_I2C_Master_Transmit+0x22c>)
 8001ccc:	400b      	ands	r3, r1
 8001cce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e000      	b.n	8001cee <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001cec:	2302      	movs	r3, #2
  }
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	80002000 	.word	0x80002000
 8001cfc:	fe00e800 	.word	0xfe00e800

08001d00 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	@ 0x28
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	f040 80d6 	bne.w	8001ece <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d30:	d101      	bne.n	8001d36 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001d32:	2302      	movs	r3, #2
 8001d34:	e0cc      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_I2C_IsDeviceReady+0x44>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e0c5      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1d0>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2224      	movs	r2, #36	@ 0x24
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_I2C_IsDeviceReady+0x72>
 8001d62:	897b      	ldrh	r3, [r7, #10]
 8001d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d70:	e006      	b.n	8001d80 <HAL_I2C_IsDeviceReady+0x80>
 8001d72:	897b      	ldrh	r3, [r7, #10]
 8001d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d7c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001d86:	f7ff fb17 	bl	80013b8 <HAL_GetTick>
 8001d8a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	bf0c      	ite	eq
 8001d9a:	2301      	moveq	r3, #1
 8001d9c:	2300      	movne	r3, #0
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001db8:	e034      	b.n	8001e24 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc0:	d01a      	beq.n	8001df8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dc2:	f7ff faf9 	bl	80013b8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d302      	bcc.n	8001dd8 <HAL_I2C_IsDeviceReady+0xd8>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10f      	bne.n	8001df8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de4:	f043 0220 	orr.w	r2, r3, #32
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e06b      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	bf0c      	ite	eq
 8001e06:	2301      	moveq	r3, #1
 8001e08:	2300      	movne	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001e24:	7ffb      	ldrb	r3, [r7, #31]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <HAL_I2C_IsDeviceReady+0x130>
 8001e2a:	7fbb      	ldrb	r3, [r7, #30]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0c4      	beq.n	8001dba <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d01a      	beq.n	8001e74 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2200      	movs	r2, #0
 8001e46:	2120      	movs	r1, #32
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f869 	bl	8001f20 <I2C_WaitOnFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e03b      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e02d      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2120      	movs	r1, #32
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f84e 	bl	8001f20 <I2C_WaitOnFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e020      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2210      	movs	r2, #16
 8001e94:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f63f af56 	bhi.w	8001d5a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eba:	f043 0220 	orr.w	r2, r3, #32
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d103      	bne.n	8001ef6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d007      	beq.n	8001f14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	619a      	str	r2, [r3, #24]
  }
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f30:	e03b      	b.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	6839      	ldr	r1, [r7, #0]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f8d6 	bl	80020e8 <I2C_IsErrorOccurred>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e041      	b.n	8001fca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d02d      	beq.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4e:	f7ff fa33 	bl	80013b8 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d302      	bcc.n	8001f64 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d122      	bne.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d113      	bne.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f043 0220 	orr.w	r2, r3, #32
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	bf0c      	ite	eq
 8001fba:	2301      	moveq	r3, #1
 8001fbc:	2300      	movne	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d0b4      	beq.n	8001f32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fde:	e033      	b.n	8002048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f87f 	bl	80020e8 <I2C_IsErrorOccurred>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e031      	b.n	8002058 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffa:	d025      	beq.n	8002048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ffc:	f7ff f9dc 	bl	80013b8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	429a      	cmp	r2, r3
 800200a:	d302      	bcc.n	8002012 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11a      	bne.n	8002048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b02      	cmp	r3, #2
 800201e:	d013      	beq.n	8002048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002024:	f043 0220 	orr.w	r2, r3, #32
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e007      	b.n	8002058 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b02      	cmp	r3, #2
 8002054:	d1c4      	bne.n	8001fe0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800206c:	e02f      	b.n	80020ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f838 	bl	80020e8 <I2C_IsErrorOccurred>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e02d      	b.n	80020de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002082:	f7ff f999 	bl	80013b8 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	429a      	cmp	r2, r3
 8002090:	d302      	bcc.n	8002098 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11a      	bne.n	80020ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d013      	beq.n	80020ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020aa:	f043 0220 	orr.w	r2, r3, #32
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e007      	b.n	80020de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d1c8      	bne.n	800206e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d068      	beq.n	80021e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2210      	movs	r2, #16
 800211a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800211c:	e049      	b.n	80021b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d045      	beq.n	80021b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002126:	f7ff f947 	bl	80013b8 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	429a      	cmp	r2, r3
 8002134:	d302      	bcc.n	800213c <I2C_IsErrorOccurred+0x54>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d13a      	bne.n	80021b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002146:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800214e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800215a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800215e:	d121      	bne.n	80021a4 <I2C_IsErrorOccurred+0xbc>
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002166:	d01d      	beq.n	80021a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	2b20      	cmp	r3, #32
 800216c:	d01a      	beq.n	80021a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800217c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800217e:	f7ff f91b 	bl	80013b8 <HAL_GetTick>
 8002182:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002184:	e00e      	b.n	80021a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002186:	f7ff f917 	bl	80013b8 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b19      	cmp	r3, #25
 8002192:	d907      	bls.n	80021a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f043 0320 	orr.w	r3, r3, #32
 800219a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80021a2:	e006      	b.n	80021b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d1e9      	bne.n	8002186 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d003      	beq.n	80021c8 <I2C_IsErrorOccurred+0xe0>
 80021c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0aa      	beq.n	800211e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d103      	bne.n	80021d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2220      	movs	r2, #32
 80021d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00b      	beq.n	8002210 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002208:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f043 0308 	orr.w	r3, r3, #8
 8002220:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800222a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00b      	beq.n	8002254 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	f043 0302 	orr.w	r3, r3, #2
 8002242:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800224c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01c      	beq.n	8002296 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f7ff fe3b 	bl	8001ed8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b0d      	ldr	r3, [pc, #52]	@ (80022a4 <I2C_IsErrorOccurred+0x1bc>)
 800226e:	400b      	ands	r3, r1
 8002270:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	431a      	orrs	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002296:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800229a:	4618      	mov	r0, r3
 800229c:	3728      	adds	r7, #40	@ 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	fe00e800 	.word	0xfe00e800

080022a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	817b      	strh	r3, [r7, #10]
 80022b6:	4613      	mov	r3, r2
 80022b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022ba:	897b      	ldrh	r3, [r7, #10]
 80022bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022c0:	7a7b      	ldrb	r3, [r7, #9]
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	0d5b      	lsrs	r3, r3, #21
 80022e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <I2C_TransferConfig+0x60>)
 80022e8:	430b      	orrs	r3, r1
 80022ea:	43db      	mvns	r3, r3
 80022ec:	ea02 0103 	and.w	r1, r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	03ff63ff 	.word	0x03ff63ff

0800230c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b20      	cmp	r3, #32
 8002320:	d138      	bne.n	8002394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800232c:	2302      	movs	r3, #2
 800232e:	e032      	b.n	8002396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2224      	movs	r2, #36	@ 0x24
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800235e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6819      	ldr	r1, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	e000      	b.n	8002396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002394:	2302      	movs	r3, #2
  }
}
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d139      	bne.n	800242c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e033      	b.n	800242e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2224      	movs	r2, #36	@ 0x24
 80023d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	e000      	b.n	800242e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800242c:	2302      	movs	r3, #2
  }
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002440:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <HAL_PWREx_GetVoltageRange+0x18>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40007000 	.word	0x40007000

08002458 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002466:	d130      	bne.n	80024ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002468:	4b23      	ldr	r3, [pc, #140]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002474:	d038      	beq.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002476:	4b20      	ldr	r3, [pc, #128]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800247e:	4a1e      	ldr	r2, [pc, #120]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002480:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002484:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002486:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2232      	movs	r2, #50	@ 0x32
 800248c:	fb02 f303 	mul.w	r3, r2, r3
 8002490:	4a1b      	ldr	r2, [pc, #108]	@ (8002500 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9b      	lsrs	r3, r3, #18
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800249c:	e002      	b.n	80024a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a4:	4b14      	ldr	r3, [pc, #80]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b0:	d102      	bne.n	80024b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f2      	bne.n	800249e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024b8:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024c4:	d110      	bne.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e00f      	b.n	80024ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ca:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d6:	d007      	beq.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024d8:	4b07      	ldr	r3, [pc, #28]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024e0:	4a05      	ldr	r2, [pc, #20]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40007000 	.word	0x40007000
 80024fc:	20000000 	.word	0x20000000
 8002500:	431bde83 	.word	0x431bde83

08002504 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e3ca      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002516:	4b97      	ldr	r3, [pc, #604]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002520:	4b94      	ldr	r3, [pc, #592]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80e4 	beq.w	8002700 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_RCC_OscConfig+0x4a>
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b0c      	cmp	r3, #12
 8002542:	f040 808b 	bne.w	800265c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b01      	cmp	r3, #1
 800254a:	f040 8087 	bne.w	800265c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800254e:	4b89      	ldr	r3, [pc, #548]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x62>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e3a2      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1a      	ldr	r2, [r3, #32]
 800256a:	4b82      	ldr	r3, [pc, #520]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d004      	beq.n	8002580 <HAL_RCC_OscConfig+0x7c>
 8002576:	4b7f      	ldr	r3, [pc, #508]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800257e:	e005      	b.n	800258c <HAL_RCC_OscConfig+0x88>
 8002580:	4b7c      	ldr	r3, [pc, #496]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800258c:	4293      	cmp	r3, r2
 800258e:	d223      	bcs.n	80025d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fd55 	bl	8003044 <RCC_SetFlashLatencyFromMSIRange>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e383      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a4:	4b73      	ldr	r3, [pc, #460]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a72      	ldr	r2, [pc, #456]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025aa:	f043 0308 	orr.w	r3, r3, #8
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b70      	ldr	r3, [pc, #448]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	496d      	ldr	r1, [pc, #436]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	4968      	ldr	r1, [pc, #416]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
 80025d6:	e025      	b.n	8002624 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d8:	4b66      	ldr	r3, [pc, #408]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a65      	ldr	r2, [pc, #404]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b63      	ldr	r3, [pc, #396]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4960      	ldr	r1, [pc, #384]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	495b      	ldr	r1, [pc, #364]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fd15 	bl	8003044 <RCC_SetFlashLatencyFromMSIRange>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e343      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002624:	f000 fc4a 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b52      	ldr	r3, [pc, #328]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	4950      	ldr	r1, [pc, #320]	@ (8002778 <HAL_RCC_OscConfig+0x274>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
 8002640:	4a4e      	ldr	r2, [pc, #312]	@ (800277c <HAL_RCC_OscConfig+0x278>)
 8002642:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002644:	4b4e      	ldr	r3, [pc, #312]	@ (8002780 <HAL_RCC_OscConfig+0x27c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fe65 	bl	8001318 <HAL_InitTick>
 800264e:	4603      	mov	r3, r0
 8002650:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d052      	beq.n	80026fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	e327      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d032      	beq.n	80026ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002664:	4b43      	ldr	r3, [pc, #268]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a42      	ldr	r2, [pc, #264]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002670:	f7fe fea2 	bl	80013b8 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002678:	f7fe fe9e 	bl	80013b8 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e310      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800268a:	4b3a      	ldr	r3, [pc, #232]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002696:	4b37      	ldr	r3, [pc, #220]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a36      	ldr	r2, [pc, #216]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b34      	ldr	r3, [pc, #208]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4931      	ldr	r1, [pc, #196]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	492c      	ldr	r1, [pc, #176]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
 80026c8:	e01a      	b.n	8002700 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a29      	ldr	r2, [pc, #164]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026d6:	f7fe fe6f 	bl	80013b8 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026de:	f7fe fe6b 	bl	80013b8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e2dd      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026f0:	4b20      	ldr	r3, [pc, #128]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x1da>
 80026fc:	e000      	b.n	8002700 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d074      	beq.n	80027f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x21a>
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	d10e      	bne.n	8002736 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d10b      	bne.n	8002736 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271e:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d064      	beq.n	80027f4 <HAL_RCC_OscConfig+0x2f0>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d160      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e2ba      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x24a>
 8002740:	4b0c      	ldr	r3, [pc, #48]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0b      	ldr	r2, [pc, #44]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	e026      	b.n	800279c <HAL_RCC_OscConfig+0x298>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002756:	d115      	bne.n	8002784 <HAL_RCC_OscConfig+0x280>
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a05      	ldr	r2, [pc, #20]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800275e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a02      	ldr	r2, [pc, #8]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800276a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x298>
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	08005370 	.word	0x08005370
 800277c:	20000000 	.word	0x20000000
 8002780:	20000004 	.word	0x20000004
 8002784:	4ba0      	ldr	r3, [pc, #640]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a9f      	ldr	r2, [pc, #636]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800278a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b9d      	ldr	r3, [pc, #628]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a9c      	ldr	r2, [pc, #624]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002796:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800279a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fe08 	bl	80013b8 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fe04 	bl	80013b8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	@ 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e276      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027be:	4b92      	ldr	r3, [pc, #584]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x2a8>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fdf4 	bl	80013b8 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fdf0 	bl	80013b8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	@ 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e262      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e6:	4b88      	ldr	r3, [pc, #544]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x2d0>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d060      	beq.n	80028c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	2b04      	cmp	r3, #4
 8002806:	d005      	beq.n	8002814 <HAL_RCC_OscConfig+0x310>
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d119      	bne.n	8002842 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d116      	bne.n	8002842 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002814:	4b7c      	ldr	r3, [pc, #496]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_OscConfig+0x328>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e23f      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282c:	4b76      	ldr	r3, [pc, #472]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	4973      	ldr	r1, [pc, #460]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002840:	e040      	b.n	80028c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d023      	beq.n	8002892 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fdaf 	bl	80013b8 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe fdab 	bl	80013b8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e21d      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002870:	4b65      	ldr	r3, [pc, #404]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b62      	ldr	r3, [pc, #392]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	495f      	ldr	r1, [pc, #380]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
 8002890:	e018      	b.n	80028c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002892:	4b5d      	ldr	r3, [pc, #372]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a5c      	ldr	r2, [pc, #368]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800289c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe fd8b 	bl	80013b8 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a6:	f7fe fd87 	bl	80013b8 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1f9      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b8:	4b53      	ldr	r3, [pc, #332]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d03c      	beq.n	800294a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01c      	beq.n	8002912 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80028da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028de:	4a4a      	ldr	r2, [pc, #296]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe fd66 	bl	80013b8 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f0:	f7fe fd62 	bl	80013b8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1d4      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002902:	4b41      	ldr	r3, [pc, #260]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002904:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ef      	beq.n	80028f0 <HAL_RCC_OscConfig+0x3ec>
 8002910:	e01b      	b.n	800294a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002912:	4b3d      	ldr	r3, [pc, #244]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002918:	4a3b      	ldr	r2, [pc, #236]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fe fd49 	bl	80013b8 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292a:	f7fe fd45 	bl	80013b8 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e1b7      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800293c:	4b32      	ldr	r3, [pc, #200]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800293e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ef      	bne.n	800292a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80a6 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002958:	2300      	movs	r3, #0
 800295a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800295c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10d      	bne.n	8002984 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002968:	4b27      	ldr	r3, [pc, #156]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	4a26      	ldr	r2, [pc, #152]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800296e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002972:	6593      	str	r3, [r2, #88]	@ 0x58
 8002974:	4b24      	ldr	r3, [pc, #144]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002980:	2301      	movs	r3, #1
 8002982:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002984:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <HAL_RCC_OscConfig+0x508>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d118      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002990:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <HAL_RCC_OscConfig+0x508>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1d      	ldr	r2, [pc, #116]	@ (8002a0c <HAL_RCC_OscConfig+0x508>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299c:	f7fe fd0c 	bl	80013b8 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7fe fd08 	bl	80013b8 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e17a      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b6:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <HAL_RCC_OscConfig+0x508>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d108      	bne.n	80029dc <HAL_RCC_OscConfig+0x4d8>
 80029ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029da:	e029      	b.n	8002a30 <HAL_RCC_OscConfig+0x52c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d115      	bne.n	8002a10 <HAL_RCC_OscConfig+0x50c>
 80029e4:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ea:	4a07      	ldr	r2, [pc, #28]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80029ec:	f043 0304 	orr.w	r3, r3, #4
 80029f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029f4:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fa:	4a03      	ldr	r2, [pc, #12]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a04:	e014      	b.n	8002a30 <HAL_RCC_OscConfig+0x52c>
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	4b9c      	ldr	r3, [pc, #624]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a16:	4a9b      	ldr	r2, [pc, #620]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a20:	4b98      	ldr	r3, [pc, #608]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a26:	4a97      	ldr	r2, [pc, #604]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d016      	beq.n	8002a66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7fe fcbe 	bl	80013b8 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a40:	f7fe fcba 	bl	80013b8 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e12a      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a56:	4b8b      	ldr	r3, [pc, #556]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ed      	beq.n	8002a40 <HAL_RCC_OscConfig+0x53c>
 8002a64:	e015      	b.n	8002a92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7fe fca7 	bl	80013b8 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6e:	f7fe fca3 	bl	80013b8 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e113      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a84:	4b7f      	ldr	r3, [pc, #508]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1ed      	bne.n	8002a6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a92:	7ffb      	ldrb	r3, [r7, #31]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a98:	4b7a      	ldr	r3, [pc, #488]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	4a79      	ldr	r2, [pc, #484]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80fe 	beq.w	8002caa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	f040 80d0 	bne.w	8002c58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ab8:	4b72      	ldr	r3, [pc, #456]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f003 0203 	and.w	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d130      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d127      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d11f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002af8:	2a07      	cmp	r2, #7
 8002afa:	bf14      	ite	ne
 8002afc:	2201      	movne	r2, #1
 8002afe:	2200      	moveq	r2, #0
 8002b00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d113      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	3b01      	subs	r3, #1
 8002b14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	3b01      	subs	r3, #1
 8002b28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d06e      	beq.n	8002c0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	d069      	beq.n	8002c08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b34:	4b53      	ldr	r3, [pc, #332]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b40:	4b50      	ldr	r3, [pc, #320]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0ad      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b50:	4b4c      	ldr	r3, [pc, #304]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a4b      	ldr	r2, [pc, #300]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002b56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b5c:	f7fe fc2c 	bl	80013b8 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fc28 	bl	80013b8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e09a      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b76:	4b43      	ldr	r3, [pc, #268]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b82:	4b40      	ldr	r3, [pc, #256]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	4b40      	ldr	r3, [pc, #256]	@ (8002c88 <HAL_RCC_OscConfig+0x784>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b92:	3a01      	subs	r2, #1
 8002b94:	0112      	lsls	r2, r2, #4
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b9c:	0212      	lsls	r2, r2, #8
 8002b9e:	4311      	orrs	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ba4:	0852      	lsrs	r2, r2, #1
 8002ba6:	3a01      	subs	r2, #1
 8002ba8:	0552      	lsls	r2, r2, #21
 8002baa:	4311      	orrs	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002bb0:	0852      	lsrs	r2, r2, #1
 8002bb2:	3a01      	subs	r2, #1
 8002bb4:	0652      	lsls	r2, r2, #25
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bbc:	0912      	lsrs	r2, r2, #4
 8002bbe:	0452      	lsls	r2, r2, #17
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	4930      	ldr	r1, [pc, #192]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be0:	f7fe fbea 	bl	80013b8 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe fbe6 	bl	80013b8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e058      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfa:	4b22      	ldr	r3, [pc, #136]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c06:	e050      	b.n	8002caa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e04f      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d148      	bne.n	8002caa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c18:	4b1a      	ldr	r3, [pc, #104]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c24:	4b17      	ldr	r3, [pc, #92]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a16      	ldr	r2, [pc, #88]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c30:	f7fe fbc2 	bl	80013b8 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fbbe 	bl	80013b8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e030      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x734>
 8002c56:	e028      	b.n	8002caa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d023      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a08      	ldr	r2, [pc, #32]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7fe fba5 	bl	80013b8 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c70:	e00c      	b.n	8002c8c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c72:	f7fe fba1 	bl	80013b8 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d905      	bls.n	8002c8c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e013      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
 8002c84:	40021000 	.word	0x40021000
 8002c88:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_RCC_OscConfig+0x7b0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1ec      	bne.n	8002c72 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c98:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_RCC_OscConfig+0x7b0>)
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	4905      	ldr	r1, [pc, #20]	@ (8002cb4 <HAL_RCC_OscConfig+0x7b0>)
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_RCC_OscConfig+0x7b4>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60cb      	str	r3, [r1, #12]
 8002ca4:	e001      	b.n	8002caa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	feeefffc 	.word	0xfeeefffc

08002cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0e7      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b75      	ldr	r3, [pc, #468]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d910      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b72      	ldr	r3, [pc, #456]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 0207 	bic.w	r2, r3, #7
 8002ce6:	4970      	ldr	r1, [pc, #448]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b6e      	ldr	r3, [pc, #440]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0cf      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b66      	ldr	r3, [pc, #408]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d908      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b63      	ldr	r3, [pc, #396]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4960      	ldr	r1, [pc, #384]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d04c      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d42:	4b5a      	ldr	r3, [pc, #360]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d121      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0a6      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d5a:	4b54      	ldr	r3, [pc, #336]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d115      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e09a      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d72:	4b4e      	ldr	r3, [pc, #312]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e08e      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d82:	4b4a      	ldr	r3, [pc, #296]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e086      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d92:	4b46      	ldr	r3, [pc, #280]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4943      	ldr	r1, [pc, #268]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da4:	f7fe fb08 	bl	80013b8 <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7fe fb04 	bl	80013b8 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e06e      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 020c 	and.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1eb      	bne.n	8002dac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d010      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d208      	bcs.n	8002e02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df0:	4b2e      	ldr	r3, [pc, #184]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	492b      	ldr	r1, [pc, #172]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e02:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d210      	bcs.n	8002e32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e10:	4b25      	ldr	r3, [pc, #148]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 0207 	bic.w	r2, r3, #7
 8002e18:	4923      	ldr	r1, [pc, #140]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e20:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e036      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4918      	ldr	r1, [pc, #96]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4910      	ldr	r1, [pc, #64]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e70:	f000 f824 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	490b      	ldr	r1, [pc, #44]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8c:	4a09      	ldr	r2, [pc, #36]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e90:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1fc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe fa3f 	bl	8001318 <HAL_InitTick>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e9e:	7afb      	ldrb	r3, [r7, #11]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40022000 	.word	0x40022000
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	08005370 	.word	0x08005370
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	@ 0x24
 8002ec0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eca:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d121      	bne.n	8002f2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d11e      	bne.n	8002f2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ef0:	4b34      	ldr	r3, [pc, #208]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002efc:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e005      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f18:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10d      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d102      	bne.n	8002f3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f34:	4b25      	ldr	r3, [pc, #148]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	e004      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f40:	4b23      	ldr	r3, [pc, #140]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d134      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d003      	beq.n	8002f62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d003      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0xac>
 8002f60:	e005      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f62:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f64:	617b      	str	r3, [r7, #20]
      break;
 8002f66:	e005      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f68:	4b19      	ldr	r3, [pc, #100]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f6a:	617b      	str	r3, [r7, #20]
      break;
 8002f6c:	e002      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	617b      	str	r3, [r7, #20]
      break;
 8002f72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f74:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	3301      	adds	r3, #1
 8002f80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f82:	4b10      	ldr	r3, [pc, #64]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	fb03 f202 	mul.w	r2, r3, r2
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	0e5b      	lsrs	r3, r3, #25
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3724      	adds	r7, #36	@ 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	08005388 	.word	0x08005388
 8002fcc:	00f42400 	.word	0x00f42400
 8002fd0:	007a1200 	.word	0x007a1200

08002fd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000000 	.word	0x20000000

08002fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ff0:	f7ff fff0 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4904      	ldr	r1, [pc, #16]	@ (8003014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	08005380 	.word	0x08005380

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800301c:	f7ff ffda 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0adb      	lsrs	r3, r3, #11
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4904      	ldr	r1, [pc, #16]	@ (8003040 <HAL_RCC_GetPCLK2Freq+0x28>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	08005380 	.word	0x08005380

08003044 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003050:	4b2a      	ldr	r3, [pc, #168]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800305c:	f7ff f9ee 	bl	800243c <HAL_PWREx_GetVoltageRange>
 8003060:	6178      	str	r0, [r7, #20]
 8003062:	e014      	b.n	800308e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	4b25      	ldr	r3, [pc, #148]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	4a24      	ldr	r2, [pc, #144]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003070:	4b22      	ldr	r3, [pc, #136]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800307c:	f7ff f9de 	bl	800243c <HAL_PWREx_GetVoltageRange>
 8003080:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b1e      	ldr	r3, [pc, #120]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003086:	4a1d      	ldr	r2, [pc, #116]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800308c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003094:	d10b      	bne.n	80030ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b80      	cmp	r3, #128	@ 0x80
 800309a:	d919      	bls.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2ba0      	cmp	r3, #160	@ 0xa0
 80030a0:	d902      	bls.n	80030a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030a2:	2302      	movs	r3, #2
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	e013      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a8:	2301      	movs	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	e010      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b80      	cmp	r3, #128	@ 0x80
 80030b2:	d902      	bls.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030b4:	2303      	movs	r3, #3
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	e00a      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b80      	cmp	r3, #128	@ 0x80
 80030be:	d102      	bne.n	80030c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c0:	2302      	movs	r3, #2
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e004      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b70      	cmp	r3, #112	@ 0x70
 80030ca:	d101      	bne.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030cc:	2301      	movs	r3, #1
 80030ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 0207 	bic.w	r2, r3, #7
 80030d8:	4909      	ldr	r1, [pc, #36]	@ (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030e0:	4b07      	ldr	r3, [pc, #28]	@ (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d001      	beq.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	40022000 	.word	0x40022000

08003104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800310c:	2300      	movs	r3, #0
 800310e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003110:	2300      	movs	r3, #0
 8003112:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800311c:	2b00      	cmp	r3, #0
 800311e:	d041      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003124:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003128:	d02a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800312a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800312e:	d824      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003130:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003136:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800313a:	d81e      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003140:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003144:	d010      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003146:	e018      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003148:	4b86      	ldr	r3, [pc, #536]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a85      	ldr	r2, [pc, #532]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003152:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003154:	e015      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fabb 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003166:	e00c      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3320      	adds	r3, #32
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fba6 	bl	80038c0 <RCCEx_PLLSAI2_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003178:	e003      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	74fb      	strb	r3, [r7, #19]
      break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003188:	4b76      	ldr	r3, [pc, #472]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003196:	4973      	ldr	r1, [pc, #460]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800319e:	e001      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d041      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031b8:	d02a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031be:	d824      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031c4:	d008      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031ca:	d81e      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031d4:	d010      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031d6:	e018      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031d8:	4b62      	ldr	r3, [pc, #392]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a61      	ldr	r2, [pc, #388]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e4:	e015      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fa73 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031f6:	e00c      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3320      	adds	r3, #32
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fb5e 	bl	80038c0 <RCCEx_PLLSAI2_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003208:	e003      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	74fb      	strb	r3, [r7, #19]
      break;
 800320e:	e000      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003218:	4b52      	ldr	r3, [pc, #328]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003226:	494f      	ldr	r1, [pc, #316]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800322e:	e001      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80a0 	beq.w	8003382 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003246:	4b47      	ldr	r3, [pc, #284]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003256:	2300      	movs	r3, #0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b41      	ldr	r3, [pc, #260]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	4a40      	ldr	r2, [pc, #256]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003266:	6593      	str	r3, [r2, #88]	@ 0x58
 8003268:	4b3e      	ldr	r3, [pc, #248]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003274:	2301      	movs	r3, #1
 8003276:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003278:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3a      	ldr	r2, [pc, #232]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003282:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003284:	f7fe f898 	bl	80013b8 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800328a:	e009      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328c:	f7fe f894 	bl	80013b8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d902      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	74fb      	strb	r3, [r7, #19]
        break;
 800329e:	e005      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032a0:	4b31      	ldr	r3, [pc, #196]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ef      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d15c      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01f      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d019      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d0:	4b24      	ldr	r3, [pc, #144]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032dc:	4b21      	ldr	r3, [pc, #132]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e2:	4a20      	ldr	r2, [pc, #128]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032fc:	4a19      	ldr	r2, [pc, #100]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe f853 	bl	80013b8 <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003314:	e00b      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe f84f 	bl	80013b8 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d902      	bls.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	74fb      	strb	r3, [r7, #19]
            break;
 800332c:	e006      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332e:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ec      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003342:	4b08      	ldr	r3, [pc, #32]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003348:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003352:	4904      	ldr	r1, [pc, #16]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800335a:	e009      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	74bb      	strb	r3, [r7, #18]
 8003360:	e006      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003370:	7c7b      	ldrb	r3, [r7, #17]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b9e      	ldr	r3, [pc, #632]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337a:	4a9d      	ldr	r2, [pc, #628]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800338e:	4b98      	ldr	r3, [pc, #608]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003394:	f023 0203 	bic.w	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	4994      	ldr	r1, [pc, #592]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033b0:	4b8f      	ldr	r3, [pc, #572]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b6:	f023 020c 	bic.w	r2, r3, #12
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033be:	498c      	ldr	r1, [pc, #560]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033d2:	4b87      	ldr	r3, [pc, #540]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	4983      	ldr	r1, [pc, #524]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f4:	4b7e      	ldr	r3, [pc, #504]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	497b      	ldr	r1, [pc, #492]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003416:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003424:	4972      	ldr	r1, [pc, #456]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003438:	4b6d      	ldr	r3, [pc, #436]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003446:	496a      	ldr	r1, [pc, #424]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800345a:	4b65      	ldr	r3, [pc, #404]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003460:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003468:	4961      	ldr	r1, [pc, #388]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800347c:	4b5c      	ldr	r3, [pc, #368]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003482:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348a:	4959      	ldr	r1, [pc, #356]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349e:	4b54      	ldr	r3, [pc, #336]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ac:	4950      	ldr	r1, [pc, #320]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034c0:	4b4b      	ldr	r3, [pc, #300]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ce:	4948      	ldr	r1, [pc, #288]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e2:	4b43      	ldr	r3, [pc, #268]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f0:	493f      	ldr	r1, [pc, #252]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d028      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003504:	4b3a      	ldr	r3, [pc, #232]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003512:	4937      	ldr	r1, [pc, #220]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800351e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003522:	d106      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003524:	4b32      	ldr	r3, [pc, #200]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a31      	ldr	r2, [pc, #196]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800352e:	60d3      	str	r3, [r2, #12]
 8003530:	e011      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003536:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800353a:	d10c      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	2101      	movs	r1, #1
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f8c8 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d028      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003562:	4b23      	ldr	r3, [pc, #140]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003568:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003570:	491f      	ldr	r1, [pc, #124]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003580:	d106      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003582:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4a1a      	ldr	r2, [pc, #104]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800358c:	60d3      	str	r3, [r2, #12]
 800358e:	e011      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003594:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003598:	d10c      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f899 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d02b      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ce:	4908      	ldr	r1, [pc, #32]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035de:	d109      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e0:	4b03      	ldr	r3, [pc, #12]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a02      	ldr	r2, [pc, #8]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ea:	60d3      	str	r3, [r2, #12]
 80035ec:	e014      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	2101      	movs	r1, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f867 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800360e:	7cfb      	ldrb	r3, [r7, #19]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d02f      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003624:	4b2b      	ldr	r3, [pc, #172]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003632:	4928      	ldr	r1, [pc, #160]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800363e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003642:	d10d      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	2102      	movs	r1, #2
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f844 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d014      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	74bb      	strb	r3, [r7, #18]
 800365e:	e011      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003664:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003668:	d10c      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3320      	adds	r3, #32
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f925 	bl	80038c0 <RCCEx_PLLSAI2_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003690:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003696:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800369e:	490d      	ldr	r1, [pc, #52]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036b2:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036c2:	4904      	ldr	r1, [pc, #16]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000

080036d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036e6:	4b75      	ldr	r3, [pc, #468]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d018      	beq.n	8003724 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036f2:	4b72      	ldr	r3, [pc, #456]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0203 	and.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d10d      	bne.n	800371e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
       ||
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800370a:	4b6c      	ldr	r3, [pc, #432]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
       ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d047      	beq.n	80037ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
 8003722:	e044      	b.n	80037ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d018      	beq.n	800375e <RCCEx_PLLSAI1_Config+0x86>
 800372c:	2b03      	cmp	r3, #3
 800372e:	d825      	bhi.n	800377c <RCCEx_PLLSAI1_Config+0xa4>
 8003730:	2b01      	cmp	r3, #1
 8003732:	d002      	beq.n	800373a <RCCEx_PLLSAI1_Config+0x62>
 8003734:	2b02      	cmp	r3, #2
 8003736:	d009      	beq.n	800374c <RCCEx_PLLSAI1_Config+0x74>
 8003738:	e020      	b.n	800377c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800373a:	4b60      	ldr	r3, [pc, #384]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11d      	bne.n	8003782 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374a:	e01a      	b.n	8003782 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800374c:	4b5b      	ldr	r3, [pc, #364]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d116      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375c:	e013      	b.n	8003786 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800375e:	4b57      	ldr	r3, [pc, #348]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800376a:	4b54      	ldr	r3, [pc, #336]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800377a:	e006      	b.n	800378a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      break;
 8003780:	e004      	b.n	800378c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003782:	bf00      	nop
 8003784:	e002      	b.n	800378c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800378a:	bf00      	nop
    }

    if(status == HAL_OK)
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10d      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003792:	4b4a      	ldr	r3, [pc, #296]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	430b      	orrs	r3, r1
 80037a8:	4944      	ldr	r1, [pc, #272]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d17d      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037b4:	4b41      	ldr	r3, [pc, #260]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a40      	ldr	r2, [pc, #256]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c0:	f7fd fdfa 	bl	80013b8 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037c6:	e009      	b.n	80037dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037c8:	f7fd fdf6 	bl	80013b8 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	73fb      	strb	r3, [r7, #15]
        break;
 80037da:	e005      	b.n	80037e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037dc:	4b37      	ldr	r3, [pc, #220]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ef      	bne.n	80037c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d160      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d111      	bne.n	8003818 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037f4:	4b31      	ldr	r3, [pc, #196]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6892      	ldr	r2, [r2, #8]
 8003804:	0211      	lsls	r1, r2, #8
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68d2      	ldr	r2, [r2, #12]
 800380a:	0912      	lsrs	r2, r2, #4
 800380c:	0452      	lsls	r2, r2, #17
 800380e:	430a      	orrs	r2, r1
 8003810:	492a      	ldr	r1, [pc, #168]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003812:	4313      	orrs	r3, r2
 8003814:	610b      	str	r3, [r1, #16]
 8003816:	e027      	b.n	8003868 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d112      	bne.n	8003844 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800381e:	4b27      	ldr	r3, [pc, #156]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003826:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	0211      	lsls	r1, r2, #8
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6912      	ldr	r2, [r2, #16]
 8003834:	0852      	lsrs	r2, r2, #1
 8003836:	3a01      	subs	r2, #1
 8003838:	0552      	lsls	r2, r2, #21
 800383a:	430a      	orrs	r2, r1
 800383c:	491f      	ldr	r1, [pc, #124]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800383e:	4313      	orrs	r3, r2
 8003840:	610b      	str	r3, [r1, #16]
 8003842:	e011      	b.n	8003868 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003844:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800384c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6892      	ldr	r2, [r2, #8]
 8003854:	0211      	lsls	r1, r2, #8
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6952      	ldr	r2, [r2, #20]
 800385a:	0852      	lsrs	r2, r2, #1
 800385c:	3a01      	subs	r2, #1
 800385e:	0652      	lsls	r2, r2, #25
 8003860:	430a      	orrs	r2, r1
 8003862:	4916      	ldr	r1, [pc, #88]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003868:	4b14      	ldr	r3, [pc, #80]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a13      	ldr	r2, [pc, #76]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800386e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003872:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fd fda0 	bl	80013b8 <HAL_GetTick>
 8003878:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800387a:	e009      	b.n	8003890 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800387c:	f7fd fd9c 	bl	80013b8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d902      	bls.n	8003890 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	73fb      	strb	r3, [r7, #15]
          break;
 800388e:	e005      	b.n	800389c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003890:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ef      	beq.n	800387c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	4904      	ldr	r1, [pc, #16]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000

080038c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d018      	beq.n	800390c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038da:	4b67      	ldr	r3, [pc, #412]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0203 	and.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d10d      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
       ||
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038f2:	4b61      	ldr	r3, [pc, #388]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
       ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d047      	beq.n	8003996 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	e044      	b.n	8003996 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d018      	beq.n	8003946 <RCCEx_PLLSAI2_Config+0x86>
 8003914:	2b03      	cmp	r3, #3
 8003916:	d825      	bhi.n	8003964 <RCCEx_PLLSAI2_Config+0xa4>
 8003918:	2b01      	cmp	r3, #1
 800391a:	d002      	beq.n	8003922 <RCCEx_PLLSAI2_Config+0x62>
 800391c:	2b02      	cmp	r3, #2
 800391e:	d009      	beq.n	8003934 <RCCEx_PLLSAI2_Config+0x74>
 8003920:	e020      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003922:	4b55      	ldr	r3, [pc, #340]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d11d      	bne.n	800396a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003932:	e01a      	b.n	800396a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003934:	4b50      	ldr	r3, [pc, #320]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d116      	bne.n	800396e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003944:	e013      	b.n	800396e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003946:	4b4c      	ldr	r3, [pc, #304]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003952:	4b49      	ldr	r3, [pc, #292]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003962:	e006      	b.n	8003972 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      break;
 8003968:	e004      	b.n	8003974 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003972:	bf00      	nop
    }

    if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10d      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800397a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6819      	ldr	r1, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	430b      	orrs	r3, r1
 8003990:	4939      	ldr	r1, [pc, #228]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d167      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800399c:	4b36      	ldr	r3, [pc, #216]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a35      	ldr	r2, [pc, #212]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a8:	f7fd fd06 	bl	80013b8 <HAL_GetTick>
 80039ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ae:	e009      	b.n	80039c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039b0:	f7fd fd02 	bl	80013b8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d902      	bls.n	80039c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	73fb      	strb	r3, [r7, #15]
        break;
 80039c2:	e005      	b.n	80039d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ef      	bne.n	80039b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d14a      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d111      	bne.n	8003a00 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039dc:	4b26      	ldr	r3, [pc, #152]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6892      	ldr	r2, [r2, #8]
 80039ec:	0211      	lsls	r1, r2, #8
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68d2      	ldr	r2, [r2, #12]
 80039f2:	0912      	lsrs	r2, r2, #4
 80039f4:	0452      	lsls	r2, r2, #17
 80039f6:	430a      	orrs	r2, r1
 80039f8:	491f      	ldr	r1, [pc, #124]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	614b      	str	r3, [r1, #20]
 80039fe:	e011      	b.n	8003a24 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a00:	4b1d      	ldr	r3, [pc, #116]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6892      	ldr	r2, [r2, #8]
 8003a10:	0211      	lsls	r1, r2, #8
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6912      	ldr	r2, [r2, #16]
 8003a16:	0852      	lsrs	r2, r2, #1
 8003a18:	3a01      	subs	r2, #1
 8003a1a:	0652      	lsls	r2, r2, #25
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	4916      	ldr	r1, [pc, #88]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a24:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a13      	ldr	r2, [pc, #76]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fd fcc2 	bl	80013b8 <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a36:	e009      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a38:	f7fd fcbe 	bl	80013b8 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d902      	bls.n	8003a4c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	73fb      	strb	r3, [r7, #15]
          break;
 8003a4a:	e005      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ef      	beq.n	8003a38 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a5e:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	4904      	ldr	r1, [pc, #16]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000

08003a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e049      	b.n	8003b22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd fb42 	bl	800112c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4610      	mov	r0, r2
 8003abc:	f000 f89e 	bl	8003bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d001      	beq.n	8003b44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e047      	b.n	8003bd4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a23      	ldr	r2, [pc, #140]	@ (8003be0 <HAL_TIM_Base_Start+0xb4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01d      	beq.n	8003b92 <HAL_TIM_Base_Start+0x66>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5e:	d018      	beq.n	8003b92 <HAL_TIM_Base_Start+0x66>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1f      	ldr	r2, [pc, #124]	@ (8003be4 <HAL_TIM_Base_Start+0xb8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <HAL_TIM_Base_Start+0x66>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003be8 <HAL_TIM_Base_Start+0xbc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00e      	beq.n	8003b92 <HAL_TIM_Base_Start+0x66>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1c      	ldr	r2, [pc, #112]	@ (8003bec <HAL_TIM_Base_Start+0xc0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d009      	beq.n	8003b92 <HAL_TIM_Base_Start+0x66>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf0 <HAL_TIM_Base_Start+0xc4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d004      	beq.n	8003b92 <HAL_TIM_Base_Start+0x66>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a19      	ldr	r2, [pc, #100]	@ (8003bf4 <HAL_TIM_Base_Start+0xc8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d115      	bne.n	8003bbe <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	4b17      	ldr	r3, [pc, #92]	@ (8003bf8 <HAL_TIM_Base_Start+0xcc>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b06      	cmp	r3, #6
 8003ba2:	d015      	beq.n	8003bd0 <HAL_TIM_Base_Start+0xa4>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003baa:	d011      	beq.n	8003bd0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbc:	e008      	b.n	8003bd0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0201 	orr.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e000      	b.n	8003bd2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800
 8003bec:	40000c00 	.word	0x40000c00
 8003bf0:	40013400 	.word	0x40013400
 8003bf4:	40014000 	.word	0x40014000
 8003bf8:	00010007 	.word	0x00010007

08003bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a46      	ldr	r2, [pc, #280]	@ (8003d28 <TIM_Base_SetConfig+0x12c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d013      	beq.n	8003c3c <TIM_Base_SetConfig+0x40>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c1a:	d00f      	beq.n	8003c3c <TIM_Base_SetConfig+0x40>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a43      	ldr	r2, [pc, #268]	@ (8003d2c <TIM_Base_SetConfig+0x130>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00b      	beq.n	8003c3c <TIM_Base_SetConfig+0x40>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a42      	ldr	r2, [pc, #264]	@ (8003d30 <TIM_Base_SetConfig+0x134>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d007      	beq.n	8003c3c <TIM_Base_SetConfig+0x40>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a41      	ldr	r2, [pc, #260]	@ (8003d34 <TIM_Base_SetConfig+0x138>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_Base_SetConfig+0x40>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a40      	ldr	r2, [pc, #256]	@ (8003d38 <TIM_Base_SetConfig+0x13c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d108      	bne.n	8003c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a35      	ldr	r2, [pc, #212]	@ (8003d28 <TIM_Base_SetConfig+0x12c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d01f      	beq.n	8003c96 <TIM_Base_SetConfig+0x9a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c5c:	d01b      	beq.n	8003c96 <TIM_Base_SetConfig+0x9a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a32      	ldr	r2, [pc, #200]	@ (8003d2c <TIM_Base_SetConfig+0x130>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d017      	beq.n	8003c96 <TIM_Base_SetConfig+0x9a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a31      	ldr	r2, [pc, #196]	@ (8003d30 <TIM_Base_SetConfig+0x134>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <TIM_Base_SetConfig+0x9a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a30      	ldr	r2, [pc, #192]	@ (8003d34 <TIM_Base_SetConfig+0x138>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00f      	beq.n	8003c96 <TIM_Base_SetConfig+0x9a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2f      	ldr	r2, [pc, #188]	@ (8003d38 <TIM_Base_SetConfig+0x13c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <TIM_Base_SetConfig+0x9a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a2e      	ldr	r2, [pc, #184]	@ (8003d3c <TIM_Base_SetConfig+0x140>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <TIM_Base_SetConfig+0x9a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a2d      	ldr	r2, [pc, #180]	@ (8003d40 <TIM_Base_SetConfig+0x144>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_Base_SetConfig+0x9a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2c      	ldr	r2, [pc, #176]	@ (8003d44 <TIM_Base_SetConfig+0x148>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d108      	bne.n	8003ca8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a16      	ldr	r2, [pc, #88]	@ (8003d28 <TIM_Base_SetConfig+0x12c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00f      	beq.n	8003cf4 <TIM_Base_SetConfig+0xf8>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a18      	ldr	r2, [pc, #96]	@ (8003d38 <TIM_Base_SetConfig+0x13c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <TIM_Base_SetConfig+0xf8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a17      	ldr	r2, [pc, #92]	@ (8003d3c <TIM_Base_SetConfig+0x140>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d007      	beq.n	8003cf4 <TIM_Base_SetConfig+0xf8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a16      	ldr	r2, [pc, #88]	@ (8003d40 <TIM_Base_SetConfig+0x144>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_Base_SetConfig+0xf8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a15      	ldr	r2, [pc, #84]	@ (8003d44 <TIM_Base_SetConfig+0x148>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d103      	bne.n	8003cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d105      	bne.n	8003d1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f023 0201 	bic.w	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	611a      	str	r2, [r3, #16]
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40000800 	.word	0x40000800
 8003d34:	40000c00 	.word	0x40000c00
 8003d38:	40013400 	.word	0x40013400
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800

08003d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e068      	b.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a2e      	ldr	r2, [pc, #184]	@ (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d108      	bne.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01d      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd2:	d018      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a18      	ldr	r2, [pc, #96]	@ (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a13      	ldr	r2, [pc, #76]	@ (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a14      	ldr	r2, [pc, #80]	@ (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10c      	bne.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40013400 	.word	0x40013400
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40000c00 	.word	0x40000c00
 8003e54:	40014000 	.word	0x40014000

08003e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e040      	b.n	8003eec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fd f9a6 	bl	80011cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2224      	movs	r2, #36	@ 0x24
 8003e84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fb6a 	bl	8004578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f8af 	bl	8004008 <UART_SetConfig>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e01b      	b.n	8003eec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 fbe9 	bl	80046bc <UART_CheckIdleState>
 8003eea:	4603      	mov	r3, r0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	@ 0x28
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d177      	bne.n	8003ffc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_UART_Transmit+0x24>
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e070      	b.n	8003ffe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2221      	movs	r2, #33	@ 0x21
 8003f28:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f2a:	f7fd fa45 	bl	80013b8 <HAL_GetTick>
 8003f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	88fa      	ldrh	r2, [r7, #6]
 8003f34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	88fa      	ldrh	r2, [r7, #6]
 8003f3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f48:	d108      	bne.n	8003f5c <HAL_UART_Transmit+0x68>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	e003      	b.n	8003f64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f64:	e02f      	b.n	8003fc6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2180      	movs	r1, #128	@ 0x80
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 fc4b 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e03b      	b.n	8003ffe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	881a      	ldrh	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	3302      	adds	r3, #2
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	e007      	b.n	8003fb4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1c9      	bne.n	8003f66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2140      	movs	r1, #64	@ 0x40
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fc15 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d004      	beq.n	8003ff2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e005      	b.n	8003ffe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e000      	b.n	8003ffe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800400c:	b08a      	sub	sp, #40	@ 0x28
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	431a      	orrs	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	4313      	orrs	r3, r2
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4ba4      	ldr	r3, [pc, #656]	@ (80042c8 <UART_SetConfig+0x2c0>)
 8004038:	4013      	ands	r3, r2
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004040:	430b      	orrs	r3, r1
 8004042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a99      	ldr	r2, [pc, #612]	@ (80042cc <UART_SetConfig+0x2c4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004070:	4313      	orrs	r3, r2
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004084:	430a      	orrs	r2, r1
 8004086:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a90      	ldr	r2, [pc, #576]	@ (80042d0 <UART_SetConfig+0x2c8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d126      	bne.n	80040e0 <UART_SetConfig+0xd8>
 8004092:	4b90      	ldr	r3, [pc, #576]	@ (80042d4 <UART_SetConfig+0x2cc>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	2b03      	cmp	r3, #3
 800409e:	d81b      	bhi.n	80040d8 <UART_SetConfig+0xd0>
 80040a0:	a201      	add	r2, pc, #4	@ (adr r2, 80040a8 <UART_SetConfig+0xa0>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040b9 	.word	0x080040b9
 80040ac:	080040c9 	.word	0x080040c9
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040d1 	.word	0x080040d1
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040be:	e116      	b.n	80042ee <UART_SetConfig+0x2e6>
 80040c0:	2302      	movs	r3, #2
 80040c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040c6:	e112      	b.n	80042ee <UART_SetConfig+0x2e6>
 80040c8:	2304      	movs	r3, #4
 80040ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ce:	e10e      	b.n	80042ee <UART_SetConfig+0x2e6>
 80040d0:	2308      	movs	r3, #8
 80040d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040d6:	e10a      	b.n	80042ee <UART_SetConfig+0x2e6>
 80040d8:	2310      	movs	r3, #16
 80040da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040de:	e106      	b.n	80042ee <UART_SetConfig+0x2e6>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a7c      	ldr	r2, [pc, #496]	@ (80042d8 <UART_SetConfig+0x2d0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d138      	bne.n	800415c <UART_SetConfig+0x154>
 80040ea:	4b7a      	ldr	r3, [pc, #488]	@ (80042d4 <UART_SetConfig+0x2cc>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f0:	f003 030c 	and.w	r3, r3, #12
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d82d      	bhi.n	8004154 <UART_SetConfig+0x14c>
 80040f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004100 <UART_SetConfig+0xf8>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	08004135 	.word	0x08004135
 8004104:	08004155 	.word	0x08004155
 8004108:	08004155 	.word	0x08004155
 800410c:	08004155 	.word	0x08004155
 8004110:	08004145 	.word	0x08004145
 8004114:	08004155 	.word	0x08004155
 8004118:	08004155 	.word	0x08004155
 800411c:	08004155 	.word	0x08004155
 8004120:	0800413d 	.word	0x0800413d
 8004124:	08004155 	.word	0x08004155
 8004128:	08004155 	.word	0x08004155
 800412c:	08004155 	.word	0x08004155
 8004130:	0800414d 	.word	0x0800414d
 8004134:	2300      	movs	r3, #0
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800413a:	e0d8      	b.n	80042ee <UART_SetConfig+0x2e6>
 800413c:	2302      	movs	r3, #2
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004142:	e0d4      	b.n	80042ee <UART_SetConfig+0x2e6>
 8004144:	2304      	movs	r3, #4
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800414a:	e0d0      	b.n	80042ee <UART_SetConfig+0x2e6>
 800414c:	2308      	movs	r3, #8
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004152:	e0cc      	b.n	80042ee <UART_SetConfig+0x2e6>
 8004154:	2310      	movs	r3, #16
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800415a:	e0c8      	b.n	80042ee <UART_SetConfig+0x2e6>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a5e      	ldr	r2, [pc, #376]	@ (80042dc <UART_SetConfig+0x2d4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d125      	bne.n	80041b2 <UART_SetConfig+0x1aa>
 8004166:	4b5b      	ldr	r3, [pc, #364]	@ (80042d4 <UART_SetConfig+0x2cc>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004170:	2b30      	cmp	r3, #48	@ 0x30
 8004172:	d016      	beq.n	80041a2 <UART_SetConfig+0x19a>
 8004174:	2b30      	cmp	r3, #48	@ 0x30
 8004176:	d818      	bhi.n	80041aa <UART_SetConfig+0x1a2>
 8004178:	2b20      	cmp	r3, #32
 800417a:	d00a      	beq.n	8004192 <UART_SetConfig+0x18a>
 800417c:	2b20      	cmp	r3, #32
 800417e:	d814      	bhi.n	80041aa <UART_SetConfig+0x1a2>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <UART_SetConfig+0x182>
 8004184:	2b10      	cmp	r3, #16
 8004186:	d008      	beq.n	800419a <UART_SetConfig+0x192>
 8004188:	e00f      	b.n	80041aa <UART_SetConfig+0x1a2>
 800418a:	2300      	movs	r3, #0
 800418c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004190:	e0ad      	b.n	80042ee <UART_SetConfig+0x2e6>
 8004192:	2302      	movs	r3, #2
 8004194:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004198:	e0a9      	b.n	80042ee <UART_SetConfig+0x2e6>
 800419a:	2304      	movs	r3, #4
 800419c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041a0:	e0a5      	b.n	80042ee <UART_SetConfig+0x2e6>
 80041a2:	2308      	movs	r3, #8
 80041a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041a8:	e0a1      	b.n	80042ee <UART_SetConfig+0x2e6>
 80041aa:	2310      	movs	r3, #16
 80041ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041b0:	e09d      	b.n	80042ee <UART_SetConfig+0x2e6>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a4a      	ldr	r2, [pc, #296]	@ (80042e0 <UART_SetConfig+0x2d8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d125      	bne.n	8004208 <UART_SetConfig+0x200>
 80041bc:	4b45      	ldr	r3, [pc, #276]	@ (80042d4 <UART_SetConfig+0x2cc>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80041c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80041c8:	d016      	beq.n	80041f8 <UART_SetConfig+0x1f0>
 80041ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80041cc:	d818      	bhi.n	8004200 <UART_SetConfig+0x1f8>
 80041ce:	2b80      	cmp	r3, #128	@ 0x80
 80041d0:	d00a      	beq.n	80041e8 <UART_SetConfig+0x1e0>
 80041d2:	2b80      	cmp	r3, #128	@ 0x80
 80041d4:	d814      	bhi.n	8004200 <UART_SetConfig+0x1f8>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <UART_SetConfig+0x1d8>
 80041da:	2b40      	cmp	r3, #64	@ 0x40
 80041dc:	d008      	beq.n	80041f0 <UART_SetConfig+0x1e8>
 80041de:	e00f      	b.n	8004200 <UART_SetConfig+0x1f8>
 80041e0:	2300      	movs	r3, #0
 80041e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041e6:	e082      	b.n	80042ee <UART_SetConfig+0x2e6>
 80041e8:	2302      	movs	r3, #2
 80041ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ee:	e07e      	b.n	80042ee <UART_SetConfig+0x2e6>
 80041f0:	2304      	movs	r3, #4
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041f6:	e07a      	b.n	80042ee <UART_SetConfig+0x2e6>
 80041f8:	2308      	movs	r3, #8
 80041fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041fe:	e076      	b.n	80042ee <UART_SetConfig+0x2e6>
 8004200:	2310      	movs	r3, #16
 8004202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004206:	e072      	b.n	80042ee <UART_SetConfig+0x2e6>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a35      	ldr	r2, [pc, #212]	@ (80042e4 <UART_SetConfig+0x2dc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d12a      	bne.n	8004268 <UART_SetConfig+0x260>
 8004212:	4b30      	ldr	r3, [pc, #192]	@ (80042d4 <UART_SetConfig+0x2cc>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800421c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004220:	d01a      	beq.n	8004258 <UART_SetConfig+0x250>
 8004222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004226:	d81b      	bhi.n	8004260 <UART_SetConfig+0x258>
 8004228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800422c:	d00c      	beq.n	8004248 <UART_SetConfig+0x240>
 800422e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004232:	d815      	bhi.n	8004260 <UART_SetConfig+0x258>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <UART_SetConfig+0x238>
 8004238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800423c:	d008      	beq.n	8004250 <UART_SetConfig+0x248>
 800423e:	e00f      	b.n	8004260 <UART_SetConfig+0x258>
 8004240:	2300      	movs	r3, #0
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004246:	e052      	b.n	80042ee <UART_SetConfig+0x2e6>
 8004248:	2302      	movs	r3, #2
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800424e:	e04e      	b.n	80042ee <UART_SetConfig+0x2e6>
 8004250:	2304      	movs	r3, #4
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004256:	e04a      	b.n	80042ee <UART_SetConfig+0x2e6>
 8004258:	2308      	movs	r3, #8
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425e:	e046      	b.n	80042ee <UART_SetConfig+0x2e6>
 8004260:	2310      	movs	r3, #16
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004266:	e042      	b.n	80042ee <UART_SetConfig+0x2e6>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a17      	ldr	r2, [pc, #92]	@ (80042cc <UART_SetConfig+0x2c4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d13a      	bne.n	80042e8 <UART_SetConfig+0x2e0>
 8004272:	4b18      	ldr	r3, [pc, #96]	@ (80042d4 <UART_SetConfig+0x2cc>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004278:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800427c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004280:	d01a      	beq.n	80042b8 <UART_SetConfig+0x2b0>
 8004282:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004286:	d81b      	bhi.n	80042c0 <UART_SetConfig+0x2b8>
 8004288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800428c:	d00c      	beq.n	80042a8 <UART_SetConfig+0x2a0>
 800428e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004292:	d815      	bhi.n	80042c0 <UART_SetConfig+0x2b8>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <UART_SetConfig+0x298>
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429c:	d008      	beq.n	80042b0 <UART_SetConfig+0x2a8>
 800429e:	e00f      	b.n	80042c0 <UART_SetConfig+0x2b8>
 80042a0:	2300      	movs	r3, #0
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a6:	e022      	b.n	80042ee <UART_SetConfig+0x2e6>
 80042a8:	2302      	movs	r3, #2
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ae:	e01e      	b.n	80042ee <UART_SetConfig+0x2e6>
 80042b0:	2304      	movs	r3, #4
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b6:	e01a      	b.n	80042ee <UART_SetConfig+0x2e6>
 80042b8:	2308      	movs	r3, #8
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042be:	e016      	b.n	80042ee <UART_SetConfig+0x2e6>
 80042c0:	2310      	movs	r3, #16
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042c6:	e012      	b.n	80042ee <UART_SetConfig+0x2e6>
 80042c8:	efff69f3 	.word	0xefff69f3
 80042cc:	40008000 	.word	0x40008000
 80042d0:	40013800 	.word	0x40013800
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40004400 	.word	0x40004400
 80042dc:	40004800 	.word	0x40004800
 80042e0:	40004c00 	.word	0x40004c00
 80042e4:	40005000 	.word	0x40005000
 80042e8:	2310      	movs	r3, #16
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a9f      	ldr	r2, [pc, #636]	@ (8004570 <UART_SetConfig+0x568>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d17a      	bne.n	80043ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d824      	bhi.n	800434a <UART_SetConfig+0x342>
 8004300:	a201      	add	r2, pc, #4	@ (adr r2, 8004308 <UART_SetConfig+0x300>)
 8004302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004306:	bf00      	nop
 8004308:	0800432d 	.word	0x0800432d
 800430c:	0800434b 	.word	0x0800434b
 8004310:	08004335 	.word	0x08004335
 8004314:	0800434b 	.word	0x0800434b
 8004318:	0800433b 	.word	0x0800433b
 800431c:	0800434b 	.word	0x0800434b
 8004320:	0800434b 	.word	0x0800434b
 8004324:	0800434b 	.word	0x0800434b
 8004328:	08004343 	.word	0x08004343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800432c:	f7fe fe5e 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8004330:	61f8      	str	r0, [r7, #28]
        break;
 8004332:	e010      	b.n	8004356 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004334:	4b8f      	ldr	r3, [pc, #572]	@ (8004574 <UART_SetConfig+0x56c>)
 8004336:	61fb      	str	r3, [r7, #28]
        break;
 8004338:	e00d      	b.n	8004356 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800433a:	f7fe fdbf 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 800433e:	61f8      	str	r0, [r7, #28]
        break;
 8004340:	e009      	b.n	8004356 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004346:	61fb      	str	r3, [r7, #28]
        break;
 8004348:	e005      	b.n	8004356 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004354:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80fb 	beq.w	8004554 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	429a      	cmp	r2, r3
 800436c:	d305      	bcc.n	800437a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	429a      	cmp	r2, r3
 8004378:	d903      	bls.n	8004382 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004380:	e0e8      	b.n	8004554 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	2200      	movs	r2, #0
 8004386:	461c      	mov	r4, r3
 8004388:	4615      	mov	r5, r2
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	022b      	lsls	r3, r5, #8
 8004394:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004398:	0222      	lsls	r2, r4, #8
 800439a:	68f9      	ldr	r1, [r7, #12]
 800439c:	6849      	ldr	r1, [r1, #4]
 800439e:	0849      	lsrs	r1, r1, #1
 80043a0:	2000      	movs	r0, #0
 80043a2:	4688      	mov	r8, r1
 80043a4:	4681      	mov	r9, r0
 80043a6:	eb12 0a08 	adds.w	sl, r2, r8
 80043aa:	eb43 0b09 	adc.w	fp, r3, r9
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	603b      	str	r3, [r7, #0]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043bc:	4650      	mov	r0, sl
 80043be:	4659      	mov	r1, fp
 80043c0:	f7fb ff56 	bl	8000270 <__aeabi_uldivmod>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4613      	mov	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d2:	d308      	bcc.n	80043e6 <UART_SetConfig+0x3de>
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043da:	d204      	bcs.n	80043e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	60da      	str	r2, [r3, #12]
 80043e4:	e0b6      	b.n	8004554 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043ec:	e0b2      	b.n	8004554 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f6:	d15e      	bne.n	80044b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80043f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d828      	bhi.n	8004452 <UART_SetConfig+0x44a>
 8004400:	a201      	add	r2, pc, #4	@ (adr r2, 8004408 <UART_SetConfig+0x400>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	08004453 	.word	0x08004453
 8004418:	08004443 	.word	0x08004443
 800441c:	08004453 	.word	0x08004453
 8004420:	08004453 	.word	0x08004453
 8004424:	08004453 	.word	0x08004453
 8004428:	0800444b 	.word	0x0800444b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800442c:	f7fe fdde 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8004430:	61f8      	str	r0, [r7, #28]
        break;
 8004432:	e014      	b.n	800445e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004434:	f7fe fdf0 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8004438:	61f8      	str	r0, [r7, #28]
        break;
 800443a:	e010      	b.n	800445e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800443c:	4b4d      	ldr	r3, [pc, #308]	@ (8004574 <UART_SetConfig+0x56c>)
 800443e:	61fb      	str	r3, [r7, #28]
        break;
 8004440:	e00d      	b.n	800445e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004442:	f7fe fd3b 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8004446:	61f8      	str	r0, [r7, #28]
        break;
 8004448:	e009      	b.n	800445e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800444e:	61fb      	str	r3, [r7, #28]
        break;
 8004450:	e005      	b.n	800445e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800445c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d077      	beq.n	8004554 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	005a      	lsls	r2, r3, #1
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	441a      	add	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b0f      	cmp	r3, #15
 800447e:	d916      	bls.n	80044ae <UART_SetConfig+0x4a6>
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004486:	d212      	bcs.n	80044ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	b29b      	uxth	r3, r3
 800448c:	f023 030f 	bic.w	r3, r3, #15
 8004490:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	b29b      	uxth	r3, r3
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	b29a      	uxth	r2, r3
 800449e:	8afb      	ldrh	r3, [r7, #22]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	8afa      	ldrh	r2, [r7, #22]
 80044aa:	60da      	str	r2, [r3, #12]
 80044ac:	e052      	b.n	8004554 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044b4:	e04e      	b.n	8004554 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d827      	bhi.n	800450e <UART_SetConfig+0x506>
 80044be:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <UART_SetConfig+0x4bc>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	080044f1 	.word	0x080044f1
 80044cc:	080044f9 	.word	0x080044f9
 80044d0:	0800450f 	.word	0x0800450f
 80044d4:	080044ff 	.word	0x080044ff
 80044d8:	0800450f 	.word	0x0800450f
 80044dc:	0800450f 	.word	0x0800450f
 80044e0:	0800450f 	.word	0x0800450f
 80044e4:	08004507 	.word	0x08004507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e8:	f7fe fd80 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 80044ec:	61f8      	str	r0, [r7, #28]
        break;
 80044ee:	e014      	b.n	800451a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f0:	f7fe fd92 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 80044f4:	61f8      	str	r0, [r7, #28]
        break;
 80044f6:	e010      	b.n	800451a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004574 <UART_SetConfig+0x56c>)
 80044fa:	61fb      	str	r3, [r7, #28]
        break;
 80044fc:	e00d      	b.n	800451a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fe:	f7fe fcdd 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8004502:	61f8      	str	r0, [r7, #28]
        break;
 8004504:	e009      	b.n	800451a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800450a:	61fb      	str	r3, [r7, #28]
        break;
 800450c:	e005      	b.n	800451a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004518:	bf00      	nop
    }

    if (pclk != 0U)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d019      	beq.n	8004554 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	085a      	lsrs	r2, r3, #1
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	441a      	add	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004532:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	d909      	bls.n	800454e <UART_SetConfig+0x546>
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004540:	d205      	bcs.n	800454e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60da      	str	r2, [r3, #12]
 800454c:	e002      	b.n	8004554 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004560:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004564:	4618      	mov	r0, r3
 8004566:	3728      	adds	r7, #40	@ 0x28
 8004568:	46bd      	mov	sp, r7
 800456a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800456e:	bf00      	nop
 8004570:	40008000 	.word	0x40008000
 8004574:	00f42400 	.word	0x00f42400

08004578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01a      	beq.n	800468e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004676:	d10a      	bne.n	800468e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	605a      	str	r2, [r3, #4]
  }
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b098      	sub	sp, #96	@ 0x60
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046cc:	f7fc fe74 	bl	80013b8 <HAL_GetTick>
 80046d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d12e      	bne.n	800473e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e8:	2200      	movs	r2, #0
 80046ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f88c 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d021      	beq.n	800473e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800470e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004718:	647b      	str	r3, [r7, #68]	@ 0x44
 800471a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800471e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e6      	bne.n	80046fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e062      	b.n	8004804 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b04      	cmp	r3, #4
 800474a:	d149      	bne.n	80047e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004754:	2200      	movs	r2, #0
 8004756:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f856 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d03c      	beq.n	80047e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	623b      	str	r3, [r7, #32]
   return(result);
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800477a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004784:	633b      	str	r3, [r7, #48]	@ 0x30
 8004786:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800478a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e6      	bne.n	8004766 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3308      	adds	r3, #8
 80047b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047b8:	61fa      	str	r2, [r7, #28]
 80047ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	69b9      	ldr	r1, [r7, #24]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	617b      	str	r3, [r7, #20]
   return(result);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e5      	bne.n	8004798 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e011      	b.n	8004804 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3758      	adds	r7, #88	@ 0x58
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481c:	e04f      	b.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d04b      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004826:	f7fc fdc7 	bl	80013b8 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <UART_WaitOnFlagUntilTimeout+0x30>
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e04e      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d037      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b80      	cmp	r3, #128	@ 0x80
 8004852:	d034      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b40      	cmp	r3, #64	@ 0x40
 8004858:	d031      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b08      	cmp	r3, #8
 8004866:	d110      	bne.n	800488a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2208      	movs	r2, #8
 800486e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f838 	bl	80048e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2208      	movs	r2, #8
 800487a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e029      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004898:	d111      	bne.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f81e 	bl	80048e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e00f      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4013      	ands	r3, r2
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d0a0      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b095      	sub	sp, #84	@ 0x54
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800490c:	643b      	str	r3, [r7, #64]	@ 0x40
 800490e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004912:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e6      	bne.n	80048ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3308      	adds	r3, #8
 800493e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004940:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004958:	2b01      	cmp	r3, #1
 800495a:	d118      	bne.n	800498e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	60bb      	str	r3, [r7, #8]
   return(result);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f023 0310 	bic.w	r3, r3, #16
 8004970:	647b      	str	r3, [r7, #68]	@ 0x44
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6979      	ldr	r1, [r7, #20]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	613b      	str	r3, [r7, #16]
   return(result);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e6      	bne.n	800495c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049a2:	bf00      	nop
 80049a4:	3754      	adds	r7, #84	@ 0x54
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <siprintf>:
 80049b0:	b40e      	push	{r1, r2, r3}
 80049b2:	b500      	push	{lr}
 80049b4:	b09c      	sub	sp, #112	@ 0x70
 80049b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80049b8:	9002      	str	r0, [sp, #8]
 80049ba:	9006      	str	r0, [sp, #24]
 80049bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049c0:	4809      	ldr	r0, [pc, #36]	@ (80049e8 <siprintf+0x38>)
 80049c2:	9107      	str	r1, [sp, #28]
 80049c4:	9104      	str	r1, [sp, #16]
 80049c6:	4909      	ldr	r1, [pc, #36]	@ (80049ec <siprintf+0x3c>)
 80049c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049cc:	9105      	str	r1, [sp, #20]
 80049ce:	6800      	ldr	r0, [r0, #0]
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	a902      	add	r1, sp, #8
 80049d4:	f000 f994 	bl	8004d00 <_svfiprintf_r>
 80049d8:	9b02      	ldr	r3, [sp, #8]
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
 80049de:	b01c      	add	sp, #112	@ 0x70
 80049e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049e4:	b003      	add	sp, #12
 80049e6:	4770      	bx	lr
 80049e8:	2000000c 	.word	0x2000000c
 80049ec:	ffff0208 	.word	0xffff0208

080049f0 <memset>:
 80049f0:	4402      	add	r2, r0
 80049f2:	4603      	mov	r3, r0
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d100      	bne.n	80049fa <memset+0xa>
 80049f8:	4770      	bx	lr
 80049fa:	f803 1b01 	strb.w	r1, [r3], #1
 80049fe:	e7f9      	b.n	80049f4 <memset+0x4>

08004a00 <__errno>:
 8004a00:	4b01      	ldr	r3, [pc, #4]	@ (8004a08 <__errno+0x8>)
 8004a02:	6818      	ldr	r0, [r3, #0]
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	2000000c 	.word	0x2000000c

08004a0c <__libc_init_array>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8004a44 <__libc_init_array+0x38>)
 8004a10:	4c0d      	ldr	r4, [pc, #52]	@ (8004a48 <__libc_init_array+0x3c>)
 8004a12:	1b64      	subs	r4, r4, r5
 8004a14:	10a4      	asrs	r4, r4, #2
 8004a16:	2600      	movs	r6, #0
 8004a18:	42a6      	cmp	r6, r4
 8004a1a:	d109      	bne.n	8004a30 <__libc_init_array+0x24>
 8004a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8004a4c <__libc_init_array+0x40>)
 8004a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8004a50 <__libc_init_array+0x44>)
 8004a20:	f000 fc66 	bl	80052f0 <_init>
 8004a24:	1b64      	subs	r4, r4, r5
 8004a26:	10a4      	asrs	r4, r4, #2
 8004a28:	2600      	movs	r6, #0
 8004a2a:	42a6      	cmp	r6, r4
 8004a2c:	d105      	bne.n	8004a3a <__libc_init_array+0x2e>
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a34:	4798      	blx	r3
 8004a36:	3601      	adds	r6, #1
 8004a38:	e7ee      	b.n	8004a18 <__libc_init_array+0xc>
 8004a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3e:	4798      	blx	r3
 8004a40:	3601      	adds	r6, #1
 8004a42:	e7f2      	b.n	8004a2a <__libc_init_array+0x1e>
 8004a44:	080053f4 	.word	0x080053f4
 8004a48:	080053f4 	.word	0x080053f4
 8004a4c:	080053f4 	.word	0x080053f4
 8004a50:	080053f8 	.word	0x080053f8

08004a54 <__retarget_lock_acquire_recursive>:
 8004a54:	4770      	bx	lr

08004a56 <__retarget_lock_release_recursive>:
 8004a56:	4770      	bx	lr

08004a58 <_free_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	2900      	cmp	r1, #0
 8004a5e:	d041      	beq.n	8004ae4 <_free_r+0x8c>
 8004a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a64:	1f0c      	subs	r4, r1, #4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bfb8      	it	lt
 8004a6a:	18e4      	addlt	r4, r4, r3
 8004a6c:	f000 f8e0 	bl	8004c30 <__malloc_lock>
 8004a70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae8 <_free_r+0x90>)
 8004a72:	6813      	ldr	r3, [r2, #0]
 8004a74:	b933      	cbnz	r3, 8004a84 <_free_r+0x2c>
 8004a76:	6063      	str	r3, [r4, #4]
 8004a78:	6014      	str	r4, [r2, #0]
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a80:	f000 b8dc 	b.w	8004c3c <__malloc_unlock>
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	d908      	bls.n	8004a9a <_free_r+0x42>
 8004a88:	6820      	ldr	r0, [r4, #0]
 8004a8a:	1821      	adds	r1, r4, r0
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	bf01      	itttt	eq
 8004a90:	6819      	ldreq	r1, [r3, #0]
 8004a92:	685b      	ldreq	r3, [r3, #4]
 8004a94:	1809      	addeq	r1, r1, r0
 8004a96:	6021      	streq	r1, [r4, #0]
 8004a98:	e7ed      	b.n	8004a76 <_free_r+0x1e>
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	b10b      	cbz	r3, 8004aa4 <_free_r+0x4c>
 8004aa0:	42a3      	cmp	r3, r4
 8004aa2:	d9fa      	bls.n	8004a9a <_free_r+0x42>
 8004aa4:	6811      	ldr	r1, [r2, #0]
 8004aa6:	1850      	adds	r0, r2, r1
 8004aa8:	42a0      	cmp	r0, r4
 8004aaa:	d10b      	bne.n	8004ac4 <_free_r+0x6c>
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	4401      	add	r1, r0
 8004ab0:	1850      	adds	r0, r2, r1
 8004ab2:	4283      	cmp	r3, r0
 8004ab4:	6011      	str	r1, [r2, #0]
 8004ab6:	d1e0      	bne.n	8004a7a <_free_r+0x22>
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	6053      	str	r3, [r2, #4]
 8004abe:	4408      	add	r0, r1
 8004ac0:	6010      	str	r0, [r2, #0]
 8004ac2:	e7da      	b.n	8004a7a <_free_r+0x22>
 8004ac4:	d902      	bls.n	8004acc <_free_r+0x74>
 8004ac6:	230c      	movs	r3, #12
 8004ac8:	602b      	str	r3, [r5, #0]
 8004aca:	e7d6      	b.n	8004a7a <_free_r+0x22>
 8004acc:	6820      	ldr	r0, [r4, #0]
 8004ace:	1821      	adds	r1, r4, r0
 8004ad0:	428b      	cmp	r3, r1
 8004ad2:	bf04      	itt	eq
 8004ad4:	6819      	ldreq	r1, [r3, #0]
 8004ad6:	685b      	ldreq	r3, [r3, #4]
 8004ad8:	6063      	str	r3, [r4, #4]
 8004ada:	bf04      	itt	eq
 8004adc:	1809      	addeq	r1, r1, r0
 8004ade:	6021      	streq	r1, [r4, #0]
 8004ae0:	6054      	str	r4, [r2, #4]
 8004ae2:	e7ca      	b.n	8004a7a <_free_r+0x22>
 8004ae4:	bd38      	pop	{r3, r4, r5, pc}
 8004ae6:	bf00      	nop
 8004ae8:	200002f4 	.word	0x200002f4

08004aec <sbrk_aligned>:
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	4e0f      	ldr	r6, [pc, #60]	@ (8004b2c <sbrk_aligned+0x40>)
 8004af0:	460c      	mov	r4, r1
 8004af2:	6831      	ldr	r1, [r6, #0]
 8004af4:	4605      	mov	r5, r0
 8004af6:	b911      	cbnz	r1, 8004afe <sbrk_aligned+0x12>
 8004af8:	f000 fba6 	bl	8005248 <_sbrk_r>
 8004afc:	6030      	str	r0, [r6, #0]
 8004afe:	4621      	mov	r1, r4
 8004b00:	4628      	mov	r0, r5
 8004b02:	f000 fba1 	bl	8005248 <_sbrk_r>
 8004b06:	1c43      	adds	r3, r0, #1
 8004b08:	d103      	bne.n	8004b12 <sbrk_aligned+0x26>
 8004b0a:	f04f 34ff 	mov.w	r4, #4294967295
 8004b0e:	4620      	mov	r0, r4
 8004b10:	bd70      	pop	{r4, r5, r6, pc}
 8004b12:	1cc4      	adds	r4, r0, #3
 8004b14:	f024 0403 	bic.w	r4, r4, #3
 8004b18:	42a0      	cmp	r0, r4
 8004b1a:	d0f8      	beq.n	8004b0e <sbrk_aligned+0x22>
 8004b1c:	1a21      	subs	r1, r4, r0
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f000 fb92 	bl	8005248 <_sbrk_r>
 8004b24:	3001      	adds	r0, #1
 8004b26:	d1f2      	bne.n	8004b0e <sbrk_aligned+0x22>
 8004b28:	e7ef      	b.n	8004b0a <sbrk_aligned+0x1e>
 8004b2a:	bf00      	nop
 8004b2c:	200002f0 	.word	0x200002f0

08004b30 <_malloc_r>:
 8004b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b34:	1ccd      	adds	r5, r1, #3
 8004b36:	f025 0503 	bic.w	r5, r5, #3
 8004b3a:	3508      	adds	r5, #8
 8004b3c:	2d0c      	cmp	r5, #12
 8004b3e:	bf38      	it	cc
 8004b40:	250c      	movcc	r5, #12
 8004b42:	2d00      	cmp	r5, #0
 8004b44:	4606      	mov	r6, r0
 8004b46:	db01      	blt.n	8004b4c <_malloc_r+0x1c>
 8004b48:	42a9      	cmp	r1, r5
 8004b4a:	d904      	bls.n	8004b56 <_malloc_r+0x26>
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	6033      	str	r3, [r6, #0]
 8004b50:	2000      	movs	r0, #0
 8004b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c2c <_malloc_r+0xfc>
 8004b5a:	f000 f869 	bl	8004c30 <__malloc_lock>
 8004b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b62:	461c      	mov	r4, r3
 8004b64:	bb44      	cbnz	r4, 8004bb8 <_malloc_r+0x88>
 8004b66:	4629      	mov	r1, r5
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f7ff ffbf 	bl	8004aec <sbrk_aligned>
 8004b6e:	1c43      	adds	r3, r0, #1
 8004b70:	4604      	mov	r4, r0
 8004b72:	d158      	bne.n	8004c26 <_malloc_r+0xf6>
 8004b74:	f8d8 4000 	ldr.w	r4, [r8]
 8004b78:	4627      	mov	r7, r4
 8004b7a:	2f00      	cmp	r7, #0
 8004b7c:	d143      	bne.n	8004c06 <_malloc_r+0xd6>
 8004b7e:	2c00      	cmp	r4, #0
 8004b80:	d04b      	beq.n	8004c1a <_malloc_r+0xea>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	4639      	mov	r1, r7
 8004b86:	4630      	mov	r0, r6
 8004b88:	eb04 0903 	add.w	r9, r4, r3
 8004b8c:	f000 fb5c 	bl	8005248 <_sbrk_r>
 8004b90:	4581      	cmp	r9, r0
 8004b92:	d142      	bne.n	8004c1a <_malloc_r+0xea>
 8004b94:	6821      	ldr	r1, [r4, #0]
 8004b96:	1a6d      	subs	r5, r5, r1
 8004b98:	4629      	mov	r1, r5
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	f7ff ffa6 	bl	8004aec <sbrk_aligned>
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d03a      	beq.n	8004c1a <_malloc_r+0xea>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	442b      	add	r3, r5
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	f8d8 3000 	ldr.w	r3, [r8]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	bb62      	cbnz	r2, 8004c0c <_malloc_r+0xdc>
 8004bb2:	f8c8 7000 	str.w	r7, [r8]
 8004bb6:	e00f      	b.n	8004bd8 <_malloc_r+0xa8>
 8004bb8:	6822      	ldr	r2, [r4, #0]
 8004bba:	1b52      	subs	r2, r2, r5
 8004bbc:	d420      	bmi.n	8004c00 <_malloc_r+0xd0>
 8004bbe:	2a0b      	cmp	r2, #11
 8004bc0:	d917      	bls.n	8004bf2 <_malloc_r+0xc2>
 8004bc2:	1961      	adds	r1, r4, r5
 8004bc4:	42a3      	cmp	r3, r4
 8004bc6:	6025      	str	r5, [r4, #0]
 8004bc8:	bf18      	it	ne
 8004bca:	6059      	strne	r1, [r3, #4]
 8004bcc:	6863      	ldr	r3, [r4, #4]
 8004bce:	bf08      	it	eq
 8004bd0:	f8c8 1000 	streq.w	r1, [r8]
 8004bd4:	5162      	str	r2, [r4, r5]
 8004bd6:	604b      	str	r3, [r1, #4]
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f000 f82f 	bl	8004c3c <__malloc_unlock>
 8004bde:	f104 000b 	add.w	r0, r4, #11
 8004be2:	1d23      	adds	r3, r4, #4
 8004be4:	f020 0007 	bic.w	r0, r0, #7
 8004be8:	1ac2      	subs	r2, r0, r3
 8004bea:	bf1c      	itt	ne
 8004bec:	1a1b      	subne	r3, r3, r0
 8004bee:	50a3      	strne	r3, [r4, r2]
 8004bf0:	e7af      	b.n	8004b52 <_malloc_r+0x22>
 8004bf2:	6862      	ldr	r2, [r4, #4]
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	bf0c      	ite	eq
 8004bf8:	f8c8 2000 	streq.w	r2, [r8]
 8004bfc:	605a      	strne	r2, [r3, #4]
 8004bfe:	e7eb      	b.n	8004bd8 <_malloc_r+0xa8>
 8004c00:	4623      	mov	r3, r4
 8004c02:	6864      	ldr	r4, [r4, #4]
 8004c04:	e7ae      	b.n	8004b64 <_malloc_r+0x34>
 8004c06:	463c      	mov	r4, r7
 8004c08:	687f      	ldr	r7, [r7, #4]
 8004c0a:	e7b6      	b.n	8004b7a <_malloc_r+0x4a>
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d1fb      	bne.n	8004c0c <_malloc_r+0xdc>
 8004c14:	2300      	movs	r3, #0
 8004c16:	6053      	str	r3, [r2, #4]
 8004c18:	e7de      	b.n	8004bd8 <_malloc_r+0xa8>
 8004c1a:	230c      	movs	r3, #12
 8004c1c:	6033      	str	r3, [r6, #0]
 8004c1e:	4630      	mov	r0, r6
 8004c20:	f000 f80c 	bl	8004c3c <__malloc_unlock>
 8004c24:	e794      	b.n	8004b50 <_malloc_r+0x20>
 8004c26:	6005      	str	r5, [r0, #0]
 8004c28:	e7d6      	b.n	8004bd8 <_malloc_r+0xa8>
 8004c2a:	bf00      	nop
 8004c2c:	200002f4 	.word	0x200002f4

08004c30 <__malloc_lock>:
 8004c30:	4801      	ldr	r0, [pc, #4]	@ (8004c38 <__malloc_lock+0x8>)
 8004c32:	f7ff bf0f 	b.w	8004a54 <__retarget_lock_acquire_recursive>
 8004c36:	bf00      	nop
 8004c38:	200002ec 	.word	0x200002ec

08004c3c <__malloc_unlock>:
 8004c3c:	4801      	ldr	r0, [pc, #4]	@ (8004c44 <__malloc_unlock+0x8>)
 8004c3e:	f7ff bf0a 	b.w	8004a56 <__retarget_lock_release_recursive>
 8004c42:	bf00      	nop
 8004c44:	200002ec 	.word	0x200002ec

08004c48 <__ssputs_r>:
 8004c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c4c:	688e      	ldr	r6, [r1, #8]
 8004c4e:	461f      	mov	r7, r3
 8004c50:	42be      	cmp	r6, r7
 8004c52:	680b      	ldr	r3, [r1, #0]
 8004c54:	4682      	mov	sl, r0
 8004c56:	460c      	mov	r4, r1
 8004c58:	4690      	mov	r8, r2
 8004c5a:	d82d      	bhi.n	8004cb8 <__ssputs_r+0x70>
 8004c5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c64:	d026      	beq.n	8004cb4 <__ssputs_r+0x6c>
 8004c66:	6965      	ldr	r5, [r4, #20]
 8004c68:	6909      	ldr	r1, [r1, #16]
 8004c6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c6e:	eba3 0901 	sub.w	r9, r3, r1
 8004c72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c76:	1c7b      	adds	r3, r7, #1
 8004c78:	444b      	add	r3, r9
 8004c7a:	106d      	asrs	r5, r5, #1
 8004c7c:	429d      	cmp	r5, r3
 8004c7e:	bf38      	it	cc
 8004c80:	461d      	movcc	r5, r3
 8004c82:	0553      	lsls	r3, r2, #21
 8004c84:	d527      	bpl.n	8004cd6 <__ssputs_r+0x8e>
 8004c86:	4629      	mov	r1, r5
 8004c88:	f7ff ff52 	bl	8004b30 <_malloc_r>
 8004c8c:	4606      	mov	r6, r0
 8004c8e:	b360      	cbz	r0, 8004cea <__ssputs_r+0xa2>
 8004c90:	6921      	ldr	r1, [r4, #16]
 8004c92:	464a      	mov	r2, r9
 8004c94:	f000 fae8 	bl	8005268 <memcpy>
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca2:	81a3      	strh	r3, [r4, #12]
 8004ca4:	6126      	str	r6, [r4, #16]
 8004ca6:	6165      	str	r5, [r4, #20]
 8004ca8:	444e      	add	r6, r9
 8004caa:	eba5 0509 	sub.w	r5, r5, r9
 8004cae:	6026      	str	r6, [r4, #0]
 8004cb0:	60a5      	str	r5, [r4, #8]
 8004cb2:	463e      	mov	r6, r7
 8004cb4:	42be      	cmp	r6, r7
 8004cb6:	d900      	bls.n	8004cba <__ssputs_r+0x72>
 8004cb8:	463e      	mov	r6, r7
 8004cba:	6820      	ldr	r0, [r4, #0]
 8004cbc:	4632      	mov	r2, r6
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	f000 faa8 	bl	8005214 <memmove>
 8004cc4:	68a3      	ldr	r3, [r4, #8]
 8004cc6:	1b9b      	subs	r3, r3, r6
 8004cc8:	60a3      	str	r3, [r4, #8]
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	4433      	add	r3, r6
 8004cce:	6023      	str	r3, [r4, #0]
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd6:	462a      	mov	r2, r5
 8004cd8:	f000 fad4 	bl	8005284 <_realloc_r>
 8004cdc:	4606      	mov	r6, r0
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d1e0      	bne.n	8004ca4 <__ssputs_r+0x5c>
 8004ce2:	6921      	ldr	r1, [r4, #16]
 8004ce4:	4650      	mov	r0, sl
 8004ce6:	f7ff feb7 	bl	8004a58 <_free_r>
 8004cea:	230c      	movs	r3, #12
 8004cec:	f8ca 3000 	str.w	r3, [sl]
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cf6:	81a3      	strh	r3, [r4, #12]
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	e7e9      	b.n	8004cd2 <__ssputs_r+0x8a>
	...

08004d00 <_svfiprintf_r>:
 8004d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	4698      	mov	r8, r3
 8004d06:	898b      	ldrh	r3, [r1, #12]
 8004d08:	061b      	lsls	r3, r3, #24
 8004d0a:	b09d      	sub	sp, #116	@ 0x74
 8004d0c:	4607      	mov	r7, r0
 8004d0e:	460d      	mov	r5, r1
 8004d10:	4614      	mov	r4, r2
 8004d12:	d510      	bpl.n	8004d36 <_svfiprintf_r+0x36>
 8004d14:	690b      	ldr	r3, [r1, #16]
 8004d16:	b973      	cbnz	r3, 8004d36 <_svfiprintf_r+0x36>
 8004d18:	2140      	movs	r1, #64	@ 0x40
 8004d1a:	f7ff ff09 	bl	8004b30 <_malloc_r>
 8004d1e:	6028      	str	r0, [r5, #0]
 8004d20:	6128      	str	r0, [r5, #16]
 8004d22:	b930      	cbnz	r0, 8004d32 <_svfiprintf_r+0x32>
 8004d24:	230c      	movs	r3, #12
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	b01d      	add	sp, #116	@ 0x74
 8004d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d32:	2340      	movs	r3, #64	@ 0x40
 8004d34:	616b      	str	r3, [r5, #20]
 8004d36:	2300      	movs	r3, #0
 8004d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d3a:	2320      	movs	r3, #32
 8004d3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d44:	2330      	movs	r3, #48	@ 0x30
 8004d46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ee4 <_svfiprintf_r+0x1e4>
 8004d4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d4e:	f04f 0901 	mov.w	r9, #1
 8004d52:	4623      	mov	r3, r4
 8004d54:	469a      	mov	sl, r3
 8004d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d5a:	b10a      	cbz	r2, 8004d60 <_svfiprintf_r+0x60>
 8004d5c:	2a25      	cmp	r2, #37	@ 0x25
 8004d5e:	d1f9      	bne.n	8004d54 <_svfiprintf_r+0x54>
 8004d60:	ebba 0b04 	subs.w	fp, sl, r4
 8004d64:	d00b      	beq.n	8004d7e <_svfiprintf_r+0x7e>
 8004d66:	465b      	mov	r3, fp
 8004d68:	4622      	mov	r2, r4
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	4638      	mov	r0, r7
 8004d6e:	f7ff ff6b 	bl	8004c48 <__ssputs_r>
 8004d72:	3001      	adds	r0, #1
 8004d74:	f000 80a7 	beq.w	8004ec6 <_svfiprintf_r+0x1c6>
 8004d78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d7a:	445a      	add	r2, fp
 8004d7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 809f 	beq.w	8004ec6 <_svfiprintf_r+0x1c6>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d92:	f10a 0a01 	add.w	sl, sl, #1
 8004d96:	9304      	str	r3, [sp, #16]
 8004d98:	9307      	str	r3, [sp, #28]
 8004d9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004da0:	4654      	mov	r4, sl
 8004da2:	2205      	movs	r2, #5
 8004da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da8:	484e      	ldr	r0, [pc, #312]	@ (8004ee4 <_svfiprintf_r+0x1e4>)
 8004daa:	f7fb fa11 	bl	80001d0 <memchr>
 8004dae:	9a04      	ldr	r2, [sp, #16]
 8004db0:	b9d8      	cbnz	r0, 8004dea <_svfiprintf_r+0xea>
 8004db2:	06d0      	lsls	r0, r2, #27
 8004db4:	bf44      	itt	mi
 8004db6:	2320      	movmi	r3, #32
 8004db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dbc:	0711      	lsls	r1, r2, #28
 8004dbe:	bf44      	itt	mi
 8004dc0:	232b      	movmi	r3, #43	@ 0x2b
 8004dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004dca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dcc:	d015      	beq.n	8004dfa <_svfiprintf_r+0xfa>
 8004dce:	9a07      	ldr	r2, [sp, #28]
 8004dd0:	4654      	mov	r4, sl
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f04f 0c0a 	mov.w	ip, #10
 8004dd8:	4621      	mov	r1, r4
 8004dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dde:	3b30      	subs	r3, #48	@ 0x30
 8004de0:	2b09      	cmp	r3, #9
 8004de2:	d94b      	bls.n	8004e7c <_svfiprintf_r+0x17c>
 8004de4:	b1b0      	cbz	r0, 8004e14 <_svfiprintf_r+0x114>
 8004de6:	9207      	str	r2, [sp, #28]
 8004de8:	e014      	b.n	8004e14 <_svfiprintf_r+0x114>
 8004dea:	eba0 0308 	sub.w	r3, r0, r8
 8004dee:	fa09 f303 	lsl.w	r3, r9, r3
 8004df2:	4313      	orrs	r3, r2
 8004df4:	9304      	str	r3, [sp, #16]
 8004df6:	46a2      	mov	sl, r4
 8004df8:	e7d2      	b.n	8004da0 <_svfiprintf_r+0xa0>
 8004dfa:	9b03      	ldr	r3, [sp, #12]
 8004dfc:	1d19      	adds	r1, r3, #4
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	9103      	str	r1, [sp, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bfbb      	ittet	lt
 8004e06:	425b      	neglt	r3, r3
 8004e08:	f042 0202 	orrlt.w	r2, r2, #2
 8004e0c:	9307      	strge	r3, [sp, #28]
 8004e0e:	9307      	strlt	r3, [sp, #28]
 8004e10:	bfb8      	it	lt
 8004e12:	9204      	strlt	r2, [sp, #16]
 8004e14:	7823      	ldrb	r3, [r4, #0]
 8004e16:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e18:	d10a      	bne.n	8004e30 <_svfiprintf_r+0x130>
 8004e1a:	7863      	ldrb	r3, [r4, #1]
 8004e1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e1e:	d132      	bne.n	8004e86 <_svfiprintf_r+0x186>
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	1d1a      	adds	r2, r3, #4
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	9203      	str	r2, [sp, #12]
 8004e28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e2c:	3402      	adds	r4, #2
 8004e2e:	9305      	str	r3, [sp, #20]
 8004e30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ef4 <_svfiprintf_r+0x1f4>
 8004e34:	7821      	ldrb	r1, [r4, #0]
 8004e36:	2203      	movs	r2, #3
 8004e38:	4650      	mov	r0, sl
 8004e3a:	f7fb f9c9 	bl	80001d0 <memchr>
 8004e3e:	b138      	cbz	r0, 8004e50 <_svfiprintf_r+0x150>
 8004e40:	9b04      	ldr	r3, [sp, #16]
 8004e42:	eba0 000a 	sub.w	r0, r0, sl
 8004e46:	2240      	movs	r2, #64	@ 0x40
 8004e48:	4082      	lsls	r2, r0
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	3401      	adds	r4, #1
 8004e4e:	9304      	str	r3, [sp, #16]
 8004e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e54:	4824      	ldr	r0, [pc, #144]	@ (8004ee8 <_svfiprintf_r+0x1e8>)
 8004e56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e5a:	2206      	movs	r2, #6
 8004e5c:	f7fb f9b8 	bl	80001d0 <memchr>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d036      	beq.n	8004ed2 <_svfiprintf_r+0x1d2>
 8004e64:	4b21      	ldr	r3, [pc, #132]	@ (8004eec <_svfiprintf_r+0x1ec>)
 8004e66:	bb1b      	cbnz	r3, 8004eb0 <_svfiprintf_r+0x1b0>
 8004e68:	9b03      	ldr	r3, [sp, #12]
 8004e6a:	3307      	adds	r3, #7
 8004e6c:	f023 0307 	bic.w	r3, r3, #7
 8004e70:	3308      	adds	r3, #8
 8004e72:	9303      	str	r3, [sp, #12]
 8004e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e76:	4433      	add	r3, r6
 8004e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e7a:	e76a      	b.n	8004d52 <_svfiprintf_r+0x52>
 8004e7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e80:	460c      	mov	r4, r1
 8004e82:	2001      	movs	r0, #1
 8004e84:	e7a8      	b.n	8004dd8 <_svfiprintf_r+0xd8>
 8004e86:	2300      	movs	r3, #0
 8004e88:	3401      	adds	r4, #1
 8004e8a:	9305      	str	r3, [sp, #20]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	f04f 0c0a 	mov.w	ip, #10
 8004e92:	4620      	mov	r0, r4
 8004e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e98:	3a30      	subs	r2, #48	@ 0x30
 8004e9a:	2a09      	cmp	r2, #9
 8004e9c:	d903      	bls.n	8004ea6 <_svfiprintf_r+0x1a6>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0c6      	beq.n	8004e30 <_svfiprintf_r+0x130>
 8004ea2:	9105      	str	r1, [sp, #20]
 8004ea4:	e7c4      	b.n	8004e30 <_svfiprintf_r+0x130>
 8004ea6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004eaa:	4604      	mov	r4, r0
 8004eac:	2301      	movs	r3, #1
 8004eae:	e7f0      	b.n	8004e92 <_svfiprintf_r+0x192>
 8004eb0:	ab03      	add	r3, sp, #12
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	462a      	mov	r2, r5
 8004eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef0 <_svfiprintf_r+0x1f0>)
 8004eb8:	a904      	add	r1, sp, #16
 8004eba:	4638      	mov	r0, r7
 8004ebc:	f3af 8000 	nop.w
 8004ec0:	1c42      	adds	r2, r0, #1
 8004ec2:	4606      	mov	r6, r0
 8004ec4:	d1d6      	bne.n	8004e74 <_svfiprintf_r+0x174>
 8004ec6:	89ab      	ldrh	r3, [r5, #12]
 8004ec8:	065b      	lsls	r3, r3, #25
 8004eca:	f53f af2d 	bmi.w	8004d28 <_svfiprintf_r+0x28>
 8004ece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ed0:	e72c      	b.n	8004d2c <_svfiprintf_r+0x2c>
 8004ed2:	ab03      	add	r3, sp, #12
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	462a      	mov	r2, r5
 8004ed8:	4b05      	ldr	r3, [pc, #20]	@ (8004ef0 <_svfiprintf_r+0x1f0>)
 8004eda:	a904      	add	r1, sp, #16
 8004edc:	4638      	mov	r0, r7
 8004ede:	f000 f879 	bl	8004fd4 <_printf_i>
 8004ee2:	e7ed      	b.n	8004ec0 <_svfiprintf_r+0x1c0>
 8004ee4:	080053b8 	.word	0x080053b8
 8004ee8:	080053c2 	.word	0x080053c2
 8004eec:	00000000 	.word	0x00000000
 8004ef0:	08004c49 	.word	0x08004c49
 8004ef4:	080053be 	.word	0x080053be

08004ef8 <_printf_common>:
 8004ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004efc:	4616      	mov	r6, r2
 8004efe:	4698      	mov	r8, r3
 8004f00:	688a      	ldr	r2, [r1, #8]
 8004f02:	690b      	ldr	r3, [r1, #16]
 8004f04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	bfb8      	it	lt
 8004f0c:	4613      	movlt	r3, r2
 8004f0e:	6033      	str	r3, [r6, #0]
 8004f10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f14:	4607      	mov	r7, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	b10a      	cbz	r2, 8004f1e <_printf_common+0x26>
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	6033      	str	r3, [r6, #0]
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	0699      	lsls	r1, r3, #26
 8004f22:	bf42      	ittt	mi
 8004f24:	6833      	ldrmi	r3, [r6, #0]
 8004f26:	3302      	addmi	r3, #2
 8004f28:	6033      	strmi	r3, [r6, #0]
 8004f2a:	6825      	ldr	r5, [r4, #0]
 8004f2c:	f015 0506 	ands.w	r5, r5, #6
 8004f30:	d106      	bne.n	8004f40 <_printf_common+0x48>
 8004f32:	f104 0a19 	add.w	sl, r4, #25
 8004f36:	68e3      	ldr	r3, [r4, #12]
 8004f38:	6832      	ldr	r2, [r6, #0]
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	42ab      	cmp	r3, r5
 8004f3e:	dc26      	bgt.n	8004f8e <_printf_common+0x96>
 8004f40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	3b00      	subs	r3, #0
 8004f48:	bf18      	it	ne
 8004f4a:	2301      	movne	r3, #1
 8004f4c:	0692      	lsls	r2, r2, #26
 8004f4e:	d42b      	bmi.n	8004fa8 <_printf_common+0xb0>
 8004f50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f54:	4641      	mov	r1, r8
 8004f56:	4638      	mov	r0, r7
 8004f58:	47c8      	blx	r9
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d01e      	beq.n	8004f9c <_printf_common+0xa4>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	6922      	ldr	r2, [r4, #16]
 8004f62:	f003 0306 	and.w	r3, r3, #6
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	bf02      	ittt	eq
 8004f6a:	68e5      	ldreq	r5, [r4, #12]
 8004f6c:	6833      	ldreq	r3, [r6, #0]
 8004f6e:	1aed      	subeq	r5, r5, r3
 8004f70:	68a3      	ldr	r3, [r4, #8]
 8004f72:	bf0c      	ite	eq
 8004f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f78:	2500      	movne	r5, #0
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	bfc4      	itt	gt
 8004f7e:	1a9b      	subgt	r3, r3, r2
 8004f80:	18ed      	addgt	r5, r5, r3
 8004f82:	2600      	movs	r6, #0
 8004f84:	341a      	adds	r4, #26
 8004f86:	42b5      	cmp	r5, r6
 8004f88:	d11a      	bne.n	8004fc0 <_printf_common+0xc8>
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	e008      	b.n	8004fa0 <_printf_common+0xa8>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4652      	mov	r2, sl
 8004f92:	4641      	mov	r1, r8
 8004f94:	4638      	mov	r0, r7
 8004f96:	47c8      	blx	r9
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d103      	bne.n	8004fa4 <_printf_common+0xac>
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	e7c6      	b.n	8004f36 <_printf_common+0x3e>
 8004fa8:	18e1      	adds	r1, r4, r3
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	2030      	movs	r0, #48	@ 0x30
 8004fae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fb2:	4422      	add	r2, r4
 8004fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fbc:	3302      	adds	r3, #2
 8004fbe:	e7c7      	b.n	8004f50 <_printf_common+0x58>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	47c8      	blx	r9
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d0e6      	beq.n	8004f9c <_printf_common+0xa4>
 8004fce:	3601      	adds	r6, #1
 8004fd0:	e7d9      	b.n	8004f86 <_printf_common+0x8e>
	...

08004fd4 <_printf_i>:
 8004fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd8:	7e0f      	ldrb	r7, [r1, #24]
 8004fda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fdc:	2f78      	cmp	r7, #120	@ 0x78
 8004fde:	4691      	mov	r9, r2
 8004fe0:	4680      	mov	r8, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	469a      	mov	sl, r3
 8004fe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fea:	d807      	bhi.n	8004ffc <_printf_i+0x28>
 8004fec:	2f62      	cmp	r7, #98	@ 0x62
 8004fee:	d80a      	bhi.n	8005006 <_printf_i+0x32>
 8004ff0:	2f00      	cmp	r7, #0
 8004ff2:	f000 80d2 	beq.w	800519a <_printf_i+0x1c6>
 8004ff6:	2f58      	cmp	r7, #88	@ 0x58
 8004ff8:	f000 80b9 	beq.w	800516e <_printf_i+0x19a>
 8004ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005004:	e03a      	b.n	800507c <_printf_i+0xa8>
 8005006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800500a:	2b15      	cmp	r3, #21
 800500c:	d8f6      	bhi.n	8004ffc <_printf_i+0x28>
 800500e:	a101      	add	r1, pc, #4	@ (adr r1, 8005014 <_printf_i+0x40>)
 8005010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005014:	0800506d 	.word	0x0800506d
 8005018:	08005081 	.word	0x08005081
 800501c:	08004ffd 	.word	0x08004ffd
 8005020:	08004ffd 	.word	0x08004ffd
 8005024:	08004ffd 	.word	0x08004ffd
 8005028:	08004ffd 	.word	0x08004ffd
 800502c:	08005081 	.word	0x08005081
 8005030:	08004ffd 	.word	0x08004ffd
 8005034:	08004ffd 	.word	0x08004ffd
 8005038:	08004ffd 	.word	0x08004ffd
 800503c:	08004ffd 	.word	0x08004ffd
 8005040:	08005181 	.word	0x08005181
 8005044:	080050ab 	.word	0x080050ab
 8005048:	0800513b 	.word	0x0800513b
 800504c:	08004ffd 	.word	0x08004ffd
 8005050:	08004ffd 	.word	0x08004ffd
 8005054:	080051a3 	.word	0x080051a3
 8005058:	08004ffd 	.word	0x08004ffd
 800505c:	080050ab 	.word	0x080050ab
 8005060:	08004ffd 	.word	0x08004ffd
 8005064:	08004ffd 	.word	0x08004ffd
 8005068:	08005143 	.word	0x08005143
 800506c:	6833      	ldr	r3, [r6, #0]
 800506e:	1d1a      	adds	r2, r3, #4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6032      	str	r2, [r6, #0]
 8005074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800507c:	2301      	movs	r3, #1
 800507e:	e09d      	b.n	80051bc <_printf_i+0x1e8>
 8005080:	6833      	ldr	r3, [r6, #0]
 8005082:	6820      	ldr	r0, [r4, #0]
 8005084:	1d19      	adds	r1, r3, #4
 8005086:	6031      	str	r1, [r6, #0]
 8005088:	0606      	lsls	r6, r0, #24
 800508a:	d501      	bpl.n	8005090 <_printf_i+0xbc>
 800508c:	681d      	ldr	r5, [r3, #0]
 800508e:	e003      	b.n	8005098 <_printf_i+0xc4>
 8005090:	0645      	lsls	r5, r0, #25
 8005092:	d5fb      	bpl.n	800508c <_printf_i+0xb8>
 8005094:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005098:	2d00      	cmp	r5, #0
 800509a:	da03      	bge.n	80050a4 <_printf_i+0xd0>
 800509c:	232d      	movs	r3, #45	@ 0x2d
 800509e:	426d      	negs	r5, r5
 80050a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050a4:	4859      	ldr	r0, [pc, #356]	@ (800520c <_printf_i+0x238>)
 80050a6:	230a      	movs	r3, #10
 80050a8:	e011      	b.n	80050ce <_printf_i+0xfa>
 80050aa:	6821      	ldr	r1, [r4, #0]
 80050ac:	6833      	ldr	r3, [r6, #0]
 80050ae:	0608      	lsls	r0, r1, #24
 80050b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80050b4:	d402      	bmi.n	80050bc <_printf_i+0xe8>
 80050b6:	0649      	lsls	r1, r1, #25
 80050b8:	bf48      	it	mi
 80050ba:	b2ad      	uxthmi	r5, r5
 80050bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80050be:	4853      	ldr	r0, [pc, #332]	@ (800520c <_printf_i+0x238>)
 80050c0:	6033      	str	r3, [r6, #0]
 80050c2:	bf14      	ite	ne
 80050c4:	230a      	movne	r3, #10
 80050c6:	2308      	moveq	r3, #8
 80050c8:	2100      	movs	r1, #0
 80050ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ce:	6866      	ldr	r6, [r4, #4]
 80050d0:	60a6      	str	r6, [r4, #8]
 80050d2:	2e00      	cmp	r6, #0
 80050d4:	bfa2      	ittt	ge
 80050d6:	6821      	ldrge	r1, [r4, #0]
 80050d8:	f021 0104 	bicge.w	r1, r1, #4
 80050dc:	6021      	strge	r1, [r4, #0]
 80050de:	b90d      	cbnz	r5, 80050e4 <_printf_i+0x110>
 80050e0:	2e00      	cmp	r6, #0
 80050e2:	d04b      	beq.n	800517c <_printf_i+0x1a8>
 80050e4:	4616      	mov	r6, r2
 80050e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80050ea:	fb03 5711 	mls	r7, r3, r1, r5
 80050ee:	5dc7      	ldrb	r7, [r0, r7]
 80050f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050f4:	462f      	mov	r7, r5
 80050f6:	42bb      	cmp	r3, r7
 80050f8:	460d      	mov	r5, r1
 80050fa:	d9f4      	bls.n	80050e6 <_printf_i+0x112>
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d10b      	bne.n	8005118 <_printf_i+0x144>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	07df      	lsls	r7, r3, #31
 8005104:	d508      	bpl.n	8005118 <_printf_i+0x144>
 8005106:	6923      	ldr	r3, [r4, #16]
 8005108:	6861      	ldr	r1, [r4, #4]
 800510a:	4299      	cmp	r1, r3
 800510c:	bfde      	ittt	le
 800510e:	2330      	movle	r3, #48	@ 0x30
 8005110:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005114:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005118:	1b92      	subs	r2, r2, r6
 800511a:	6122      	str	r2, [r4, #16]
 800511c:	f8cd a000 	str.w	sl, [sp]
 8005120:	464b      	mov	r3, r9
 8005122:	aa03      	add	r2, sp, #12
 8005124:	4621      	mov	r1, r4
 8005126:	4640      	mov	r0, r8
 8005128:	f7ff fee6 	bl	8004ef8 <_printf_common>
 800512c:	3001      	adds	r0, #1
 800512e:	d14a      	bne.n	80051c6 <_printf_i+0x1f2>
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	b004      	add	sp, #16
 8005136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	f043 0320 	orr.w	r3, r3, #32
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	4833      	ldr	r0, [pc, #204]	@ (8005210 <_printf_i+0x23c>)
 8005144:	2778      	movs	r7, #120	@ 0x78
 8005146:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	6831      	ldr	r1, [r6, #0]
 800514e:	061f      	lsls	r7, r3, #24
 8005150:	f851 5b04 	ldr.w	r5, [r1], #4
 8005154:	d402      	bmi.n	800515c <_printf_i+0x188>
 8005156:	065f      	lsls	r7, r3, #25
 8005158:	bf48      	it	mi
 800515a:	b2ad      	uxthmi	r5, r5
 800515c:	6031      	str	r1, [r6, #0]
 800515e:	07d9      	lsls	r1, r3, #31
 8005160:	bf44      	itt	mi
 8005162:	f043 0320 	orrmi.w	r3, r3, #32
 8005166:	6023      	strmi	r3, [r4, #0]
 8005168:	b11d      	cbz	r5, 8005172 <_printf_i+0x19e>
 800516a:	2310      	movs	r3, #16
 800516c:	e7ac      	b.n	80050c8 <_printf_i+0xf4>
 800516e:	4827      	ldr	r0, [pc, #156]	@ (800520c <_printf_i+0x238>)
 8005170:	e7e9      	b.n	8005146 <_printf_i+0x172>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	f023 0320 	bic.w	r3, r3, #32
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	e7f6      	b.n	800516a <_printf_i+0x196>
 800517c:	4616      	mov	r6, r2
 800517e:	e7bd      	b.n	80050fc <_printf_i+0x128>
 8005180:	6833      	ldr	r3, [r6, #0]
 8005182:	6825      	ldr	r5, [r4, #0]
 8005184:	6961      	ldr	r1, [r4, #20]
 8005186:	1d18      	adds	r0, r3, #4
 8005188:	6030      	str	r0, [r6, #0]
 800518a:	062e      	lsls	r6, r5, #24
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	d501      	bpl.n	8005194 <_printf_i+0x1c0>
 8005190:	6019      	str	r1, [r3, #0]
 8005192:	e002      	b.n	800519a <_printf_i+0x1c6>
 8005194:	0668      	lsls	r0, r5, #25
 8005196:	d5fb      	bpl.n	8005190 <_printf_i+0x1bc>
 8005198:	8019      	strh	r1, [r3, #0]
 800519a:	2300      	movs	r3, #0
 800519c:	6123      	str	r3, [r4, #16]
 800519e:	4616      	mov	r6, r2
 80051a0:	e7bc      	b.n	800511c <_printf_i+0x148>
 80051a2:	6833      	ldr	r3, [r6, #0]
 80051a4:	1d1a      	adds	r2, r3, #4
 80051a6:	6032      	str	r2, [r6, #0]
 80051a8:	681e      	ldr	r6, [r3, #0]
 80051aa:	6862      	ldr	r2, [r4, #4]
 80051ac:	2100      	movs	r1, #0
 80051ae:	4630      	mov	r0, r6
 80051b0:	f7fb f80e 	bl	80001d0 <memchr>
 80051b4:	b108      	cbz	r0, 80051ba <_printf_i+0x1e6>
 80051b6:	1b80      	subs	r0, r0, r6
 80051b8:	6060      	str	r0, [r4, #4]
 80051ba:	6863      	ldr	r3, [r4, #4]
 80051bc:	6123      	str	r3, [r4, #16]
 80051be:	2300      	movs	r3, #0
 80051c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051c4:	e7aa      	b.n	800511c <_printf_i+0x148>
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	4632      	mov	r2, r6
 80051ca:	4649      	mov	r1, r9
 80051cc:	4640      	mov	r0, r8
 80051ce:	47d0      	blx	sl
 80051d0:	3001      	adds	r0, #1
 80051d2:	d0ad      	beq.n	8005130 <_printf_i+0x15c>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	079b      	lsls	r3, r3, #30
 80051d8:	d413      	bmi.n	8005202 <_printf_i+0x22e>
 80051da:	68e0      	ldr	r0, [r4, #12]
 80051dc:	9b03      	ldr	r3, [sp, #12]
 80051de:	4298      	cmp	r0, r3
 80051e0:	bfb8      	it	lt
 80051e2:	4618      	movlt	r0, r3
 80051e4:	e7a6      	b.n	8005134 <_printf_i+0x160>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4632      	mov	r2, r6
 80051ea:	4649      	mov	r1, r9
 80051ec:	4640      	mov	r0, r8
 80051ee:	47d0      	blx	sl
 80051f0:	3001      	adds	r0, #1
 80051f2:	d09d      	beq.n	8005130 <_printf_i+0x15c>
 80051f4:	3501      	adds	r5, #1
 80051f6:	68e3      	ldr	r3, [r4, #12]
 80051f8:	9903      	ldr	r1, [sp, #12]
 80051fa:	1a5b      	subs	r3, r3, r1
 80051fc:	42ab      	cmp	r3, r5
 80051fe:	dcf2      	bgt.n	80051e6 <_printf_i+0x212>
 8005200:	e7eb      	b.n	80051da <_printf_i+0x206>
 8005202:	2500      	movs	r5, #0
 8005204:	f104 0619 	add.w	r6, r4, #25
 8005208:	e7f5      	b.n	80051f6 <_printf_i+0x222>
 800520a:	bf00      	nop
 800520c:	080053c9 	.word	0x080053c9
 8005210:	080053da 	.word	0x080053da

08005214 <memmove>:
 8005214:	4288      	cmp	r0, r1
 8005216:	b510      	push	{r4, lr}
 8005218:	eb01 0402 	add.w	r4, r1, r2
 800521c:	d902      	bls.n	8005224 <memmove+0x10>
 800521e:	4284      	cmp	r4, r0
 8005220:	4623      	mov	r3, r4
 8005222:	d807      	bhi.n	8005234 <memmove+0x20>
 8005224:	1e43      	subs	r3, r0, #1
 8005226:	42a1      	cmp	r1, r4
 8005228:	d008      	beq.n	800523c <memmove+0x28>
 800522a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800522e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005232:	e7f8      	b.n	8005226 <memmove+0x12>
 8005234:	4402      	add	r2, r0
 8005236:	4601      	mov	r1, r0
 8005238:	428a      	cmp	r2, r1
 800523a:	d100      	bne.n	800523e <memmove+0x2a>
 800523c:	bd10      	pop	{r4, pc}
 800523e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005246:	e7f7      	b.n	8005238 <memmove+0x24>

08005248 <_sbrk_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d06      	ldr	r5, [pc, #24]	@ (8005264 <_sbrk_r+0x1c>)
 800524c:	2300      	movs	r3, #0
 800524e:	4604      	mov	r4, r0
 8005250:	4608      	mov	r0, r1
 8005252:	602b      	str	r3, [r5, #0]
 8005254:	f7fb feec 	bl	8001030 <_sbrk>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_sbrk_r+0x1a>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_sbrk_r+0x1a>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	200002e8 	.word	0x200002e8

08005268 <memcpy>:
 8005268:	440a      	add	r2, r1
 800526a:	4291      	cmp	r1, r2
 800526c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005270:	d100      	bne.n	8005274 <memcpy+0xc>
 8005272:	4770      	bx	lr
 8005274:	b510      	push	{r4, lr}
 8005276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800527a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800527e:	4291      	cmp	r1, r2
 8005280:	d1f9      	bne.n	8005276 <memcpy+0xe>
 8005282:	bd10      	pop	{r4, pc}

08005284 <_realloc_r>:
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	4680      	mov	r8, r0
 800528a:	4615      	mov	r5, r2
 800528c:	460c      	mov	r4, r1
 800528e:	b921      	cbnz	r1, 800529a <_realloc_r+0x16>
 8005290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005294:	4611      	mov	r1, r2
 8005296:	f7ff bc4b 	b.w	8004b30 <_malloc_r>
 800529a:	b92a      	cbnz	r2, 80052a8 <_realloc_r+0x24>
 800529c:	f7ff fbdc 	bl	8004a58 <_free_r>
 80052a0:	2400      	movs	r4, #0
 80052a2:	4620      	mov	r0, r4
 80052a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a8:	f000 f81a 	bl	80052e0 <_malloc_usable_size_r>
 80052ac:	4285      	cmp	r5, r0
 80052ae:	4606      	mov	r6, r0
 80052b0:	d802      	bhi.n	80052b8 <_realloc_r+0x34>
 80052b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80052b6:	d8f4      	bhi.n	80052a2 <_realloc_r+0x1e>
 80052b8:	4629      	mov	r1, r5
 80052ba:	4640      	mov	r0, r8
 80052bc:	f7ff fc38 	bl	8004b30 <_malloc_r>
 80052c0:	4607      	mov	r7, r0
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d0ec      	beq.n	80052a0 <_realloc_r+0x1c>
 80052c6:	42b5      	cmp	r5, r6
 80052c8:	462a      	mov	r2, r5
 80052ca:	4621      	mov	r1, r4
 80052cc:	bf28      	it	cs
 80052ce:	4632      	movcs	r2, r6
 80052d0:	f7ff ffca 	bl	8005268 <memcpy>
 80052d4:	4621      	mov	r1, r4
 80052d6:	4640      	mov	r0, r8
 80052d8:	f7ff fbbe 	bl	8004a58 <_free_r>
 80052dc:	463c      	mov	r4, r7
 80052de:	e7e0      	b.n	80052a2 <_realloc_r+0x1e>

080052e0 <_malloc_usable_size_r>:
 80052e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e4:	1f18      	subs	r0, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bfbc      	itt	lt
 80052ea:	580b      	ldrlt	r3, [r1, r0]
 80052ec:	18c0      	addlt	r0, r0, r3
 80052ee:	4770      	bx	lr

080052f0 <_init>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr

080052fc <_fini>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr
